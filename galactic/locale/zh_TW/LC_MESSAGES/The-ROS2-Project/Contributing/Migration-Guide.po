# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation galactic\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 06:55+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:7
msgid "Migration guide from ROS 1"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:11
msgid "Table of Contents"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:13
msgid "There are two different kinds of package migrations:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:15
msgid ""
"Migrating the source code of an existing package from ROS 1 to ROS 2 with "
"the intent that a significant part of the source code will stay the same or "
"at least similar. An example for this could be `pluginlib <https://github."
"com/ros/pluginlib>`_ where the source code is maintained in different "
"branches within the same repository and commonly patches can be ported "
"between those branches when necessary."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:17
msgid ""
"Implementing the same or similar functionality of a ROS 1 package for ROS 2 "
"but with the assumption that the source code will be significantly "
"different. An example for this could be `roscpp <https://github.com/ros/"
"ros_comm/tree/melodic-devel/clients/roscpp>`_ in ROS 1 and `rclcpp <https://"
"github.com/ros2/rclcpp/tree/rolling/rclcpp>`_ in ROS 2 which are separate "
"repositories and don't share any code."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:20
msgid ""
"This article focuses on the former case and describes the high-level steps "
"to migrate a ROS 1 package to ROS 2. It does not aim to be a step-by-step "
"migration instruction and is not considered the *final* \"solution\". Future "
"versions will aim to make migration smoother and less effort up to the point "
"of maintaining a single package from the same branch for ROS 1 as well as "
"ROS 2."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:25
msgid "Prerequisites"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:27
msgid ""
"Before being able to migrate a ROS 1 package to ROS 2 all of its "
"dependencies must be available in ROS 2."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:30
msgid "Migration steps"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:37
msgid "Package manifests"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:39
msgid ""
"ROS 2 doesn't support format 1 of the package specification but only newer "
"format versions (2 and higher). Therefore the ``package.xml`` file must be "
"updated to at least format 2 if it uses format 1. Since ROS 1 supports all "
"formats it is safe to perform that conversion in the ROS 1 package."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:43
msgid ""
"Some packages might have different names in ROS 2 so the dependencies might "
"need to be updated accordingly."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:46
msgid "Metapackages"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:48
msgid ""
"ROS 2 doesn't have a special package type for metapackages. Metapackages can "
"still exist as regular packages that only contain runtime dependencies. When "
"migrating metapackages from ROS 1, simply remove the ``<metapackage />`` tag "
"in your package manifest."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:53
msgid "Message, service, and action definitions"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:55
msgid ""
"Message files must end in ``.msg`` and must be located in the subfolder "
"``msg``. Service files must end in ``.srv`` and must be located in the "
"subfolder ``srv``. Actions files must end in ``.action`` and must be located "
"in the subfolder ``action``."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:59
msgid ""
"These files might need to be updated to comply with the `ROS Interface "
"definition <https://design.ros2.org/articles/interface_definition.html>`__. "
"Some primitive types have been removed and the types ``duration`` and "
"``time`` which were builtin types in ROS 1 have been replaced with normal "
"message definitions and must be used from the `builtin_interfaces <https://"
"github.com/ros2/rcl_interfaces/tree/rolling/builtin_interfaces>`__ package. "
"Also some naming conventions are stricter than in ROS 1."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:63
msgid "In your ``package.xml``:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:66
msgid "Add ``<buildtool_depend>rosidl_default_generators</buildtool_depend>``."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:67
msgid "Add ``<exec_depend>rosidl_default_runtime</exec_depend>``."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:68
msgid ""
"For each dependent message package, add ``<depend>message_package</depend>``."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:70
msgid "In your ``CMakeLists.txt``:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:72
msgid "Start by enabling C++14"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:74
#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:799
msgid "set(CMAKE_CXX_STANDARD 14)"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:79
msgid "Add ``find_package(rosidl_default_generators REQUIRED)``"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:80
msgid ""
"For each dependent message package, add ``find_package(message_package "
"REQUIRED)`` and replace the CMake function call to ``generate_messages`` "
"with ``rosidl_generate_interfaces``."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:82
msgid ""
"This will replace ``add_message_files`` and ``add_service_files`` listing of "
"all the message and service files, which can be removed."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:85
msgid "Build system"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:87
msgid ""
"The build system in ROS 2 is called `ament <https://design.ros2.org/articles/"
"ament.html>`__ and the build tool is :doc:`colcon <../../Tutorials/Beginner-"
"Client-Libraries/Colcon-Tutorial>`. Ament is built on CMake: ``ament_cmake`` "
"provides CMake functions to make writing ``CMakeLists.txt`` files easier."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:92
msgid "Build tool"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:94
msgid ""
"Instead of using ``catkin_make``, ``catkin_make_isolated`` or ``catkin "
"build`` ROS 2 uses the command line tool `colcon <https://design.ros2.org/"
"articles/build_tool.html>`__ to build and install a set of packages."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:97
msgid "Pure Python package"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:99
msgid ""
"If the ROS 1 package uses CMake only to invoke the ``setup.py`` file and "
"does not contain anything beside Python code (e.g. also no messages, "
"services, etc.) it should be converted into a pure Python package in ROS 2:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:103
msgid "Update or add the build type in the ``package.xml`` file:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:105
msgid ""
"<export>\n"
"  <build_type>ament_python</build_type>\n"
"</export>"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:112
msgid "Remove the ``CMakeLists.txt`` file"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:115
msgid "Update the ``setup.py`` file to be a standard Python setup script"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:117
msgid ""
"ROS 2 supports Python 3 only. While each package can choose to also support "
"Python 2 it must invoke executables with Python 3 if it uses any API "
"provided by other ROS 2 packages."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:121
msgid "Update the *CMakeLists.txt* to use *ament_cmake*"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:123
msgid ""
"Apply the following changes to use ``ament_cmake`` instead of ``catkin``:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:127
msgid "Set the build type in the ``package.xml`` file export section:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:129
#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:750
msgid ""
"<export>\n"
"  <build_type>ament_cmake</build_type>\n"
"</export>"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:136
msgid ""
"Replace the ``find_package`` invocation with ``catkin`` and the "
"``COMPONENTS`` with:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:138
msgid ""
"find_package(ament_cmake REQUIRED)\n"
"find_package(component1 REQUIRED)\n"
"# ...\n"
"find_package(componentN REQUIRED)"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:146
msgid "Move and update the ``catkin_package`` invocation with:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:150
msgid ""
"Invoke ``ament_package`` instead but **after** all targets have been "
"registered."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:153
msgid ""
"The only valid argument for `ament_package <https://github.com/ament/"
"ament_cmake/blob/rolling/ament_cmake_core/cmake/core/ament_package.cmake>`__ "
"is ``CONFIG_EXTRAS``. All other arguments are covered by separate functions "
"which all need to be invoked *before* ``ament_package``:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:156
msgid ""
"Instead of passing ``CATKIN_DEPENDS ...`` call "
"``ament_export_dependencies(...)`` before."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:157
msgid ""
"Instead of passing ``INCLUDE_DIRS ...`` call "
"``ament_export_include_directories(...)`` before."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:158
msgid ""
"Instead of passing ``LIBRARIES ...`` call ``ament_export_libraries(...)`` "
"before."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:161
msgid ""
"**TODO document ament_export_targets (``ament_export_interfaces`` in "
"Eloquent and older)?**"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:164
msgid ""
"Replace the invocation of ``add_message_files``, ``add_service_files`` and "
"``generate_messages`` with `rosidl_generate_interfaces <https://github.com/"
"ros2/rosidl/blob/rolling/rosidl_cmake/cmake/rosidl_generate_interfaces."
"cmake>`__."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:168
msgid ""
"The first argument is the ``target_name``. If you're building just one "
"library it's ``${PROJECT_NAME}``"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:172
msgid ""
"Followed by the list of message filenames, relative to the package root."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:175
msgid ""
"If you will be using the list of filenames multiple times, it is recommended "
"to compose a list of message files and pass the list to the function for "
"clarity."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:178
msgid ""
"The final multi-value-keyword argument fpr ``generate_messages`` is "
"``DEPENDENCIES`` which requires the list of dependent message packages."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:180
msgid ""
"rosidl_generate_interfaces(${PROJECT_NAME}\n"
"  ${msg_files}\n"
"  DEPENDENCIES std_msgs\n"
")"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:188
msgid ""
"Remove any occurrences of the *devel space*. Related CMake variables like "
"``CATKIN_DEVEL_PREFIX`` do not exist anymore."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:192
msgid ""
"The ``CATKIN_DEPENDS`` and ``DEPENDS`` arguments are passed to the new "
"function `ament_export_dependencies <https://github.com/ament/ament_cmake/"
"blob/rolling/ament_cmake_export_dependencies/cmake/ament_export_dependencies."
"cmake>`__."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:193
msgid "``CATKIN_GLOBAL_BIN_DESTINATION``: ``bin``"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:194
msgid "``CATKIN_GLOBAL_INCLUDE_DESTINATION``: ``include``"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:195
msgid "``CATKIN_GLOBAL_LIB_DESTINATION``: ``lib``"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:196
msgid "``CATKIN_GLOBAL_LIBEXEC_DESTINATION``: ``lib``"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:197
msgid "``CATKIN_GLOBAL_SHARE_DESTINATION``: ``share``"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:198
msgid "``CATKIN_PACKAGE_BIN_DESTINATION``: ``lib/${PROJECT_NAME}``"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:199
msgid "``CATKIN_PACKAGE_INCLUDE_DESTINATION``: ``include/${PROJECT_NAME}``"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:200
msgid "``CATKIN_PACKAGE_LIB_DESTINATION``: ``lib``"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:201
msgid "``CATKIN_PACKAGE_SHARE_DESTINATION``: ``share/${PROJECT_NAME}``"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:204
msgid "Unit tests"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:206
msgid "If you are using gtest:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:208
msgid ""
"Replace ``CATKIN_ENABLE_TESTING`` with ``BUILD_TESTING``. Replace "
"``catkin_add_gtest`` with ``ament_add_gtest``."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:211
msgid ""
"-   if (CATKIN_ENABLE_TESTING)\n"
"-     find_package(GTest REQUIRED)  # or rostest\n"
"-     include_directories(${GTEST_INCLUDE_DIRS})\n"
"-     catkin_add_gtest(${PROJECT_NAME}-some-test src/test/some_test.cpp)\n"
"-     target_link_libraries(${PROJECT_NAME}-some-test\n"
"-       ${PROJECT_NAME}_some_dependency\n"
"-       ${catkin_LIBRARIES}\n"
"-       ${GTEST_LIBRARIES})\n"
"-   endif()\n"
"+   if (BUILD_TESTING)\n"
"+     find_package(ament_cmake_gtest REQUIRED)\n"
"+     ament_add_gtest(${PROJECT_NAME}-some-test src/test/test_something."
"cpp)\n"
"+     ament_target_dependencies(${PROJECT_NAME)-some-test\n"
"+       \"rclcpp\"\n"
"+       \"std_msgs\")\n"
"+     target_link_libraries(${PROJECT_NAME}-some-test\n"
"+       ${PROJECT_NAME}_some_dependency)\n"
"+   endif()"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:232
msgid ""
"Add ``<test_depend>ament_cmake_gtest</test_depend>`` to your ``package.xml``."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:234
msgid ""
"-   <test_depend>rostest</test_depend>\n"
"+   <test_depend>ament_cmake_gtest</test_depend>"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:240
msgid "Linters"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:242
msgid ""
"In ROS 2 we are working to maintain clean code using linters. The styles for "
"different languages are defined in our `Developer Guide <Developer-Guide>`."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:245
msgid ""
"If you are starting a project from scratch it is recommended to follow the "
"style guide and turn on the automatic linter unit tests by adding these "
"lines just below ``if(BUILD_TESTING)`` (until alpha 5 this was "
"``AMENT_ENABLE_TESTING``)."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:247
msgid ""
"find_package(ament_lint_auto REQUIRED)\n"
"ament_lint_auto_find_test_dependencies()"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:252
msgid ""
"You will also need to add the following dependencies to your ``package.xml``:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:254
msgid ""
"<test_depend>ament_lint_auto</test_depend>\n"
"<test_depend>ament_lint_common</test_depend>"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:260
msgid "Continue to use ``catkin`` in CMake"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:262
msgid ""
"ROS 2 uses ament as the build system but for backward compatibility ROS 2 "
"has a package called ``catkin`` which provides almost the same API as catkin "
"in ROS 1. In order to use this backward compatibility API the ``CMakeLists."
"txt`` must only be updated to call the function ``catkin_ament_package()`` "
"*after* all targets."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:265
msgid ""
"**NOTE: This has not been implemented yet and is only an idea at the moment. "
"Due to the number of changes related to dependencies it has not yet been "
"decided if this compatibility API is useful enough to justify the effort.**"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:269
msgid "Update source code"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:272
msgid "Messages, services, and actions"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:274
msgid ""
"The namespace of ROS 2 messages, services, and actions use a subnamespace "
"(``msg``, ``srv``, or ``action``, respectively) after the package name. "
"Therefore an include looks like: ``#include <my_interfaces/msg/my_message."
"hpp>``. The C++ type is then named: ``my_interfaces::msg::MyMessage``."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:278
msgid ""
"Shared pointer types are provided as typedefs within the message structs: "
"``my_interfaces::msg::MyMessage::SharedPtr`` as well as ``my_interfaces::"
"msg::MyMessage::ConstSharedPtr``."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:280
msgid ""
"For more details please see the article about the `generated C++ interfaces "
"<https://design.ros2.org/articles/generated_interfaces_cpp.html>`__."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:282
msgid "The migration requires includes to change by:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:285
msgid ""
"inserting the subfolder ``msg`` between the package name and message datatype"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:286
msgid "changing the included filename from CamelCase to underscore separation"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:287
msgid "changing from ``*.h`` to ``*.hpp``"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:289
msgid ""
"// ROS 1 style is in comments, ROS 2 follows, uncommented.\n"
"// # include <geometry_msgs/PointStamped.h>\n"
"#include <geometry_msgs/msg/point_stamped.hpp>\n"
"\n"
"// geometry_msgs::PointStamped point_stamped;\n"
"geometry_msgs::msg::PointStamped point_stamped;"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:298
msgid ""
"The migration requires code to insert the ``msg`` namespace into all "
"instances."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:301
msgid "Use of service objects"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:303
msgid ""
"Service callbacks in ROS 2 do not have boolean return values. Instead of "
"returning false on failures, throwing exceptions is recommended."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:306
msgid ""
"// ROS 1 style is in comments, ROS 2 follows, uncommented.\n"
"// #include \"nav_msgs/GetMap.h\"\n"
"#include \"nav_msgs/srv/get_map.hpp\"\n"
"\n"
"// bool service_callback(\n"
"//   nav_msgs::GetMap::Request & request,\n"
"//   nav_msgs::GetMap::Response & response)\n"
"void service_callback(\n"
"  const std::shared_ptr<nav_msgs::srv::GetMap::Request> request,\n"
"  std::shared_ptr<nav_msgs::srv::GetMap::Response> response)\n"
"{\n"
"  // ...\n"
"  // return true;  // or false for failure\n"
"}"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:324
msgid "Usages of ros::Time"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:326
msgid "For usages of ``ros::Time``:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:328
msgid "Replace all instances of ``ros::Time`` with ``rclcpp::Time``"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:330
msgid "If your messages or code makes use of std_msgs::Time:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:332
msgid ""
"Convert all instances of std_msgs::Time to builtin_interfaces::msg::Time"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:334
msgid ""
"Convert all ``#include \"std_msgs/time.h`` to ``#include "
"\"builtin_interfaces/msg/time.hpp\"``"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:336
msgid ""
"Convert all instances using the std_msgs::Time field ``nsec`` to the "
"builtin_interfaces::msg::Time field ``nanosec``"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:339
msgid "Usages of ros::Rate"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:341
msgid ""
"There is an equivalent type ``rclcpp::Rate`` object which is basically a "
"drop in replacement for ``ros::Rate``."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:344
msgid "ROS client library"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:352
msgid "**NOTE: Others to be written**"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:355
msgid "Boost"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:357
msgid ""
"Much of the functionality previously provided by Boost has been integrated "
"into the C++ standard library. As such we would like to take advantage of "
"the new core features and avoid the dependency on boost where possible."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:361
msgid "Shared Pointers"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:363
msgid ""
"To switch shared pointers from boost to standard C++ replace instances of:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:366
msgid "``#include <boost/shared_ptr.hpp>`` with ``#include <memory>``"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:367
msgid "``boost::shared_ptr`` with ``std::shared_ptr``"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:369
msgid ""
"There may also be variants such as ``weak_ptr`` which you want to convert as "
"well."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:371
msgid ""
"Also it is recommended practice to use ``using`` instead of ``typedef``. "
"``using`` has the ability to work better in templated logic. For details "
"`see here <https://stackoverflow.com/questions/10747810/what-is-the-"
"difference-between-typedef-and-using-in-c11>`__"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:376
msgid "Thread/Mutexes"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:378
msgid ""
"Another common part of boost used in ROS codebases are mutexes in ``boost::"
"thread``."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:381
msgid ""
"Replace ``boost::mutex::scoped_lock`` with ``std::unique_lock<std::mutex>``"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:382
msgid "Replace ``boost::mutex`` with ``std::mutex``"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:383
msgid "Replace ``#include <boost/thread/mutex.hpp>`` with ``#include <mutex>``"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:386
msgid "Unordered Map"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:388
#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:397
msgid "Replace:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:391
msgid ""
"``#include <boost/unordered_map.hpp>`` with ``#include <unordered_map>``"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:392
msgid "``boost::unordered_map`` with ``std::unordered_map``"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:395
msgid "function"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:400
msgid "``#include <boost/function.hpp>``  with ``#include <functional>``"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:401
msgid "``boost::function`` with ``std::function``"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:404
msgid "Parameters"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:406
msgid ""
"In ROS 1, parameters are associated with a central server that allowed "
"retrieving parameters at runtime through the use of the network APIs. In ROS "
"2, parameters are associated per node and are configurable at runtime with "
"ROS services."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:409
msgid ""
"See `ROS 2 Parameter design document <https://design.ros2.org/articles/"
"ros_parameters.html>`_ for more details about the system model."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:411
msgid ""
"See :doc:`ROS 2 CLI usage <../../Tutorials/Beginner-CLI-Tools/Understanding-"
"ROS2-Parameters/Understanding-ROS2-Parameters>` for a better understanding "
"of how the CLI tools work and its differences with ROS 1 tooling."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:413
msgid ""
"See :doc:`../../How-To-Guides/Parameters-YAML-files-migration-guide` to see "
"how YAML parameter files are parsed in ROS 2 and their differences with ROS "
"implementation."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:416
msgid "Launch files"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:418
msgid ""
"While launch files in ROS 1 are always specified using `.xml <https://wiki."
"ros.org/roslaunch/XML>`__ files, ROS 2 supports Python scripts to enable "
"more flexibility (see `launch package <https://github.com/ros2/launch/tree/"
"rolling/launch>`__) as well as XML and YAML files. See `separate tutorial "
"<../../How-To-Guides/Launch-files-migration-guide>` on migrating launch "
"files from ROS 1 to ROS 2."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:422
msgid "Example: Converting an existing ROS 1 package to use ROS 2"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:424
msgid ""
"Let's say that we have simple ROS 1 package called ``talker`` that uses "
"``roscpp`` in one node, called ``talker``. This package is in a catkin "
"workspace, located at ``~/ros1_talker``."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:429
msgid "The ROS 1 code"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:431
msgid "Here's the directory layout of our catkin workspace:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:433
msgid ""
"$ cd ~/ros1_talker\n"
"$ find .\n"
".\n"
"./src\n"
"./src/talker\n"
"./src/talker/package.xml\n"
"./src/talker/CMakeLists.txt\n"
"./src/talker/talker.cpp"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:444
msgid "Here is the content of those three files:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:446
msgid "``src/talker/package.xml``:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:448
msgid ""
"<package>\n"
"  <name>talker</name>\n"
"  <version>0.0.0</version>\n"
"  <description>talker</description>\n"
"  <maintainer email=\"gerkey@osrfoundation.org\">Brian Gerkey</maintainer>\n"
"  <license>Apache 2.0</license>\n"
"  <buildtool_depend>catkin</buildtool_depend>\n"
"  <build_depend>roscpp</build_depend>\n"
"  <build_depend>std_msgs</build_depend>\n"
"  <run_depend>roscpp</run_depend>\n"
"  <run_depend>std_msgs</run_depend>\n"
"</package>"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:463
msgid "``src/talker/CMakeLists.txt``:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:465
msgid ""
"cmake_minimum_required(VERSION 2.8.3)\n"
"project(talker)\n"
"find_package(catkin REQUIRED COMPONENTS roscpp std_msgs)\n"
"catkin_package()\n"
"include_directories(${catkin_INCLUDE_DIRS})\n"
"add_executable(talker talker.cpp)\n"
"target_link_libraries(talker ${catkin_LIBRARIES})\n"
"install(TARGETS talker\n"
"  RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION})"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:477
msgid "``src/talker/talker.cpp``:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:479
msgid ""
"#include <sstream>\n"
"#include \"ros/ros.h\"\n"
"#include \"std_msgs/String.h\"\n"
"int main(int argc, char **argv)\n"
"{\n"
"  ros::init(argc, argv, \"talker\");\n"
"  ros::NodeHandle n;\n"
"  ros::Publisher chatter_pub = n.advertise<std_msgs::String>(\"chatter\", "
"1000);\n"
"  ros::Rate loop_rate(10);\n"
"  int count = 0;\n"
"  std_msgs::String msg;\n"
"  while (ros::ok())\n"
"  {\n"
"    std::stringstream ss;\n"
"    ss << \"hello world \" << count++;\n"
"    msg.data = ss.str();\n"
"    ROS_INFO(\"%s\", msg.data.c_str());\n"
"    chatter_pub.publish(msg);\n"
"    ros::spinOnce();\n"
"    loop_rate.sleep();\n"
"  }\n"
"  return 0;\n"
"}"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:506
msgid "Building the ROS 1 code"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:508
msgid ""
"We source an environment setup file (in this case for Jade using bash), then "
"we build our package using ``catkin_make install``:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:511
msgid ""
". /opt/ros/jade/setup.bash\n"
"cd ~/ros1_talker\n"
"catkin_make install"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:518
msgid "Running the ROS 1 node"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:520
msgid ""
"If there's not already one running, we start a ``roscore``, first sourcing "
"the setup file from our ``catkin`` install tree (the system setup file at ``/"
"opt/ros/jade/setup.bash`` would also work here):"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:524
msgid ""
". ~/ros1_talker/install/setup.bash\n"
"roscore"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:529
msgid ""
"In another shell, we run the node from the ``catkin`` install space using "
"``rosrun``, again sourcing the setup file first (in this case it must be the "
"one from our workspace):"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:533
msgid ""
". ~/ros1_talker/install/setup.bash\n"
"rosrun talker talker"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:539
msgid "Migrating to ROS 2"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:541
msgid "Let's start by creating a new workspace in which to work:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:543
msgid ""
"mkdir ~/ros2_talker\n"
"cd ~/ros2_talker"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:548
msgid ""
"We'll copy the source tree from our ROS 1 package into that workspace, where "
"we can modify it:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:550
msgid ""
"mkdir src\n"
"cp -a ~/ros1_talker/src/talker src"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:555
msgid ""
"Now we'll modify the C++ code in the node. The ROS 2 C++ library, called "
"``rclcpp``, provides a different API from that provided by ``roscpp``. The "
"concepts are very similar between the two libraries, which makes the changes "
"reasonably straightforward to make."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:562
msgid "Included headers"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:564
msgid ""
"In place of ``ros/ros.h``, which gave us access to the ``roscpp`` library "
"API, we need to include ``rclcpp/rclcpp.hpp``, which gives us access to the "
"``rclcpp`` library API:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:568
msgid ""
"//#include \"ros/ros.h\"\n"
"#include \"rclcpp/rclcpp.hpp\""
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:573
msgid ""
"To get the ``std_msgs/String`` message definition, in place of ``std_msgs/"
"String.h``, we need to include ``std_msgs/msg/string.hpp``:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:576
msgid ""
"//#include \"std_msgs/String.h\"\n"
"#include \"std_msgs/msg/string.hpp\""
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:582
msgid "Changing C++ library calls"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:584
msgid ""
"Instead of passing the node's name to the library initialization call, we do "
"the initialization, then pass the node name to the creation of the node "
"object (we can use the ``auto`` keyword because now we're requiring a C++14 "
"compiler):"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:588
msgid ""
"//  ros::init(argc, argv, \"talker\");\n"
"//  ros::NodeHandle n;\n"
"    rclcpp::init(argc, argv);\n"
"    auto node = rclcpp::Node::make_shared(\"talker\");"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:595
msgid ""
"The creation of the publisher and rate objects looks pretty similar, with "
"some changes to the names of namespace and methods."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:598
msgid ""
"//  ros::Publisher chatter_pub = n.advertise<std_msgs::String>(\"chatter\", "
"1000);\n"
"//  ros::Rate loop_rate(10);\n"
"  auto chatter_pub = node->create_publisher<std_msgs::msg::"
"String>(\"chatter\",\n"
"    1000);\n"
"  rclcpp::Rate loop_rate(10);"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:606
msgid ""
"To further control how message delivery is handled, a quality of service "
"(``QoS``) profile could be passed in. The default profile is "
"``rmw_qos_profile_default``. For more details, see the `design document "
"<https://design.ros2.org/articles/qos.html>`__ and `concept overview <../../"
"Concepts/About-Quality-of-Service-Settings>`."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:613
msgid "The creation of the outgoing message is different in the namespace:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:615
msgid ""
"//  std_msgs::String msg;\n"
"  std_msgs::msg::String msg;"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:620
msgid "In place of ``ros::ok()``, we call ``rclcpp::ok()``:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:622
msgid ""
"//  while (ros::ok())\n"
"  while (rclcpp::ok())"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:627
msgid "Inside the publishing loop, we access the ``data`` field as before:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:629
msgid "msg.data = ss.str();"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:633
msgid ""
"To print a console message, instead of using ``ROS_INFO()``, we use "
"``RCLCPP_INFO()`` and its various cousins. The key difference is that "
"``RCLCPP_INFO()`` takes a Logger object as the first argument."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:638
msgid ""
"//    ROS_INFO(\"%s\", msg.data.c_str());\n"
"    RCLCPP_INFO(node->get_logger(), \"%s\\n\", msg.data.c_str());"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:643
msgid "Publishing the message is the same as before:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:645
msgid "chatter_pub->publish(msg);"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:649
msgid ""
"Spinning (i.e., letting the communications system process any pending "
"incoming/outgoing messages) is different in that the call now takes the node "
"as an argument:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:653
msgid ""
"//    ros::spinOnce();\n"
"    rclcpp::spin_some(node);"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:658
msgid "Sleeping using the rate object is unchanged."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:660
msgid "Putting it all together, the new ``talker.cpp`` looks like this:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:662
msgid ""
"#include <sstream>\n"
"// #include \"ros/ros.h\"\n"
"#include \"rclcpp/rclcpp.hpp\"\n"
"// #include \"std_msgs/String.h\"\n"
"#include \"std_msgs/msg/string.hpp\"\n"
"int main(int argc, char **argv)\n"
"{\n"
"//  ros::init(argc, argv, \"talker\");\n"
"//  ros::NodeHandle n;\n"
"  rclcpp::init(argc, argv);\n"
"  auto node = rclcpp::Node::make_shared(\"talker\");\n"
"//  ros::Publisher chatter_pub = n.advertise<std_msgs::String>(\"chatter\", "
"1000);\n"
"//  ros::Rate loop_rate(10);\n"
"  auto chatter_pub = node->create_publisher<std_msgs::msg::"
"String>(\"chatter\", 1000);\n"
"  rclcpp::Rate loop_rate(10);\n"
"  int count = 0;\n"
"//  std_msgs::String msg;\n"
"  std_msgs::msg::String msg;\n"
"//  while (ros::ok())\n"
"  while (rclcpp::ok())\n"
"  {\n"
"    std::stringstream ss;\n"
"    ss << \"hello world \" << count++;\n"
"    msg.data = ss.str();\n"
"//    ROS_INFO(\"%s\", msg.data.c_str());\n"
"    RCLCPP_INFO(node->get_logger(), \"%s\\n\", msg.data.c_str());\n"
"    chatter_pub->publish(msg);\n"
"//    ros::spinOnce();\n"
"    rclcpp::spin_some(node);\n"
"    loop_rate.sleep();\n"
"  }\n"
"  return 0;\n"
"}"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:699
msgid "Changing the ``package.xml``"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:701
msgid ""
"ROS 2 doesn't support format 1 of the package specification but only newer "
"format versions (2 and higher). We start by specifying the format version in "
"the ``package`` tag:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:704
msgid ""
"<!-- <package> -->\n"
"<package format=\"2\">"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:709
msgid ""
"ROS 2 uses a newer version of ``catkin``, called ``ament_cmake``, which we "
"specify in the ``buildtool_depend`` tag:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:712
msgid ""
"<!--  <buildtool_depend>catkin</buildtool_depend> -->\n"
"  <buildtool_depend>ament_cmake</buildtool_depend>"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:717
msgid ""
"In our build dependencies, instead of ``roscpp`` we use ``rclcpp``, which "
"provides the C++ API that we use."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:720
msgid ""
"<!--  <build_depend>roscpp</build_depend> -->\n"
"  <build_depend>rclcpp</build_depend>"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:725
msgid ""
"We make the same addition in the run dependencies and also update from the "
"``run_depend`` tag to the ``exec_depend`` tag (part of the upgrade to "
"version 2 of the package format):"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:729
msgid ""
"<!--  <run_depend>roscpp</run_depend> -->\n"
"  <exec_depend>rclcpp</exec_depend>\n"
"<!--  <run_depend>std_msgs</run_depend> -->\n"
"  <exec_depend>std_msgs</exec_depend>"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:736
msgid ""
"In ROS 1, we use ``<depend>`` to simplify specifying dependencies for both "
"compile-time and runtime. We can do the same in ROS 2:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:740
msgid ""
"<depend>rclcpp</depend>\n"
"<depend>std_msgs</depend>"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:745
msgid ""
"We also need to tell the build tool what *kind* of package we are, so that "
"it knows how to build us. Because we're using ``ament`` and CMake, we add "
"the following lines to declare our build type to be ``ament_cmake``:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:756
msgid "Putting it all together, our ``package.xml`` now looks like this:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:758
msgid ""
"<!-- <package> -->\n"
"<package format=\"2\">\n"
"  <name>talker</name>\n"
"  <version>0.0.0</version>\n"
"  <description>talker</description>\n"
"  <maintainer email=\"gerkey@osrfoundation.org\">Brian Gerkey</maintainer>\n"
"  <license>Apache License 2.0</license>\n"
"<!--  <buildtool_depend>catkin</buildtool_depend> -->\n"
"  <buildtool_depend>ament_cmake</buildtool_depend>\n"
"<!--  <build_depend>roscpp</build_depend> -->\n"
"<!--  <run_depend>roscpp</run_depend> -->\n"
"<!--  <run_depend>std_msgs</run_depend> -->\n"
"  <depend>rclcpp</depend>\n"
"  <depend>std_msgs</depend>\n"
"  <export>\n"
"    <build_type>ament_cmake</build_type>\n"
"  </export>\n"
"</package>"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:779
msgid ""
"**TODO: show simpler version of this file just using the ``<depend>`` tag, "
"which is enabled by version 2 of the package format (also supported in "
"``catkin`` so, strictly speaking, orthogonal to ROS 2).**"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:784
msgid "Changing the CMake code"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:786
msgid "ROS 2 relies on a higher version of CMake:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:788
msgid ""
"#cmake_minimum_required(VERSION 2.8.3)\n"
"cmake_minimum_required(VERSION 3.5)"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:793
msgid ""
"ROS 2 relies on the C++14 standard. Depending on what compiler you're using, "
"support for C++14 might not be enabled by default. Using ``gcc`` 5.3 (which "
"is what is used on Ubuntu Xenial), we need to enable it explicitly, which we "
"do by adding this line near the top of the file:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:803
msgid "The preferred way to work on all platforms is this:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:805
msgid ""
"if(NOT CMAKE_CXX_STANDARD)\n"
"  set(CMAKE_CXX_STANDARD 14)\n"
"endif()\n"
"if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n"
"  add_compile_options(-Wall -Wextra -Wpedantic)\n"
"endif()"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:814
msgid ""
"Using ``catkin``, we specify the packages we want to build against by "
"passing them as ``COMPONENTS`` arguments when initially finding ``catkin`` "
"itself. With ``ament_cmake``, we find each package individually, starting "
"with ``ament_cmake``:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:818
msgid ""
"#find_package(catkin REQUIRED COMPONENTS roscpp std_msgs)\n"
"find_package(ament_cmake REQUIRED)\n"
"find_package(rclcpp REQUIRED)\n"
"find_package(std_msgs REQUIRED)"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:825
msgid "System dependencies can be found as before:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:827
msgid "find_package(Boost REQUIRED COMPONENTS system filesystem thread)"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:831
msgid ""
"We call ``catkin_package()`` to auto-generate things like CMake "
"configuration files for other packages that use our package. Whereas that "
"call happens *before* specifying targets to build, we now call the analogous "
"``ament_package()`` *after* the targets:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:836
msgid ""
"# catkin_package()\n"
"# At the bottom of the file:\n"
"ament_package()"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:842
msgid ""
"The only directories that need to be manually included are local directories "
"and dependencies that are not ament packages:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:845
msgid ""
"#include_directories(${catkin_INCLUDE_DIRS})\n"
"include_directories(include ${Boost_INCLUDE_DIRS})"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:850
msgid ""
"A better alternative is to specify include directories for each target "
"individually, rather than including all the directories for all targets:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:853
msgid "target_include_directories(target PUBLIC include ${Boost_INCLUDE_DIRS})"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:857
msgid ""
"Similar to how we found each dependent package separately, we need to link "
"each one to the build target. To link with dependent packages that are ament "
"packages, instead of using ``target_link_libraries()``, "
"``ament_target_dependencies()`` is a more concise and more thorough way of "
"handling build flags. It automatically handles both the include directories "
"defined in ``_INCLUDE_DIRS`` and linking libraries defined in ``_LIBRARIES``."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:865
msgid ""
"#target_link_libraries(talker ${catkin_LIBRARIES})\n"
"ament_target_dependencies(talker\n"
"  rclcpp\n"
"  std_msgs)"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:872
msgid ""
"To link with packages that are not ament packages, such as system "
"dependencies like ``Boost``, or a library being built in the same "
"``CMakeLists.txt``, use ``target_link_libraries()``:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:876
msgid "target_link_libraries(target ${Boost_LIBRARIES})"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:880
msgid ""
"For installation, ``catkin`` defines variables like "
"``CATKIN_PACKAGE_BIN_DESTINATION``. With ``ament_cmake``, we just give a "
"path relative to the installation root, like ``bin`` for executables:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:884
msgid ""
"#install(TARGETS talker\n"
"#  RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION})\n"
"install(TARGETS talker\n"
"  DESTINATION lib/${PROJECT_NAME})"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:891
msgid ""
"Optionally, we can install and export the included directories for "
"downstream packages:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:893
msgid ""
"install(DIRECTORY include/\n"
"  DESTINATION include)\n"
"ament_export_include_directories(include)"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:899
msgid "Optionally, we can export dependencies for downstream packages:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:901
msgid "ament_export_dependencies(std_msgs)"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:905
msgid "Putting it all together, the new ``CMakeLists.txt`` looks like this:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:907
msgid ""
"#cmake_minimum_required(VERSION 2.8.3)\n"
"cmake_minimum_required(VERSION 3.5)\n"
"project(talker)\n"
"if(NOT CMAKE_CXX_STANDARD)\n"
"  set(CMAKE_CXX_STANDARD 14)\n"
"endif()\n"
"if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n"
"  add_compile_options(-Wall -Wextra -Wpedantic)\n"
"endif()\n"
"#find_package(catkin REQUIRED COMPONENTS roscpp std_msgs)\n"
"find_package(ament_cmake REQUIRED)\n"
"find_package(rclcpp REQUIRED)\n"
"find_package(std_msgs REQUIRED)\n"
"#catkin_package()\n"
"#include_directories(${catkin_INCLUDE_DIRS})\n"
"include_directories(include)\n"
"add_executable(talker talker.cpp)\n"
"#target_link_libraries(talker ${catkin_LIBRARIES})\n"
"ament_target_dependencies(talker\n"
"  rclcpp\n"
"  std_msgs)\n"
"#install(TARGETS talker\n"
"#  RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION})\n"
"install(TARGETS talker\n"
"  DESTINATION lib/${PROJECT_NAME})\n"
"install(DIRECTORY include/\n"
"  DESTINATION include)\n"
"ament_export_include_directories(include)\n"
"ament_export_dependencies(std_msgs)\n"
"ament_package()"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:940
msgid "**TODO: Show what this would look like with ``ament_auto``.**"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:943
msgid "Building the ROS 2 code"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:945
msgid ""
"We source an environment setup file (in this case the one generated by "
"following the ROS 2 installation tutorial, which builds in ``~/ros2_ws``, "
"then we build our package using ``colcon build``:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:949
msgid ""
". ~/ros2_ws/install/setup.bash\n"
"cd ~/ros2_talker\n"
"colcon build"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:956
msgid "Running the ROS 2 node"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:958
msgid ""
"Because we installed the ``talker`` executable into ``bin``, after sourcing "
"the setup file, from our install tree, we can invoke it by name directly "
"(also, there is not yet a ROS 2 equivalent for ``rosrun``):"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:962
msgid ""
". ~/ros2_ws/install/setup.bash\n"
"talker"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:968
msgid "Update scripts"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:971
msgid "ROS CLI arguments"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:973
msgid ""
"Since `ROS Eloquent <../../Releases/Release-Eloquent-Elusor>`, ROS arguments "
"should be scoped with ``--ros-args`` and a trailing ``--`` (the trailing "
"double dash may be elided if no arguments follow it)."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:975
msgid ""
"Remapping names is similar to ROS 1, taking on the form ``from:=to``, except "
"that it must be preceded by a ``--remap`` (or ``-r``) flag. For example:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:978
msgid "ros2 run some_package some_ros_executable --ros-args -r foo:=bar"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:982
msgid ""
"We use a similar syntax for parameters, using the ``--param`` (or ``-p``) "
"flag:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:985
msgid "ros2 run some_package some_ros_executable --ros-args -p my_param:=value"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:989
msgid "Note, this is different than using a leading underscore in ROS 1."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:991
msgid ""
"To change a node name use ``__node`` (the ROS 1 equivalent is ``__name``):"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:993
msgid ""
"ros2 run some_package some_ros_executable --ros-args -r __node:=new_node_name"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:997
msgid ""
"Note the use of the ``-r`` flag. The same remap flag is needed for changing "
"the namespace ``__ns``:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:1000
msgid ""
"ros2 run some_package some_ros_executable --ros-args -r __ns:=/new/namespace"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:1004
msgid "There is no equivalent in ROS 2 for the following ROS 1 keys:"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:1006
msgid ""
"``__log`` (but ``--log-config-file`` can be used to provide a logger "
"configuration file)"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:1007
msgid "``__ip``"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:1008
msgid "``__hostname``"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:1009
msgid "``__master``"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:1011
msgid ""
"For more information, see the `design document <https://design.ros2.org/"
"articles/ros_command_line_arguments.html>`_."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:1014
msgid "Quick reference"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:1017
msgid "Feature"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:1017
msgid "ROS 1"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:1017
msgid "ROS 2"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:1019
msgid "remapping"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:1019
msgid "foo:=bar"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:1019
msgid "-r foo:=bar"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:1021
msgid "parameters"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:1021
msgid "_foo:=bar"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:1021
msgid "-p foo:=bar"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:1023
msgid "node name"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:1023
msgid "__name:=foo"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:1023
msgid "-r __node:=foo"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:1025
msgid "namespace"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:1025
msgid "__ns:=foo"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:1025
msgid "-r __ns:=foo"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:1030
msgid "More examples and tools"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:1032
msgid ""
"Launch File migrator that converts a ROS 1 XML launch file to a ROS 2 Python "
"launch file: https://github.com/aws-robotics/ros2-launch-file-migrator"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:1033
msgid ""
"Amazon has exposed their tools for porting ROS 1 robots to ROS 2 https://"
"github.com/awslabs/ros2-migration-tools/tree/master/porting\\_tools"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:1038
msgid "Licensing"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:1040
msgid ""
"In ROS 2 our recommended license is the `Apache 2.0 License <https://www."
"apache.org/licenses/LICENSE-2.0>`__. In ROS 1 our recommended license was "
"the `3-Clause BSD License <https://opensource.org/licenses/BSD-3-Clause>`__."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:1043
msgid ""
"For any new project we recommend using the Apache 2.0 License, whether ROS 1 "
"or ROS 2."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:1045
msgid ""
"However, when migrating code from ROS 1 to ROS 2 we cannot simply change the "
"license. The existing license must be preserved for any preexisting "
"contributions."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:1048
msgid ""
"To that end if a package is being migrated we recommend keeping the existing "
"license and continuing to contribute to that package under the existing OSI "
"license, which we expect to be the BSD license for core elements."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:1050
msgid "This will keep things clear and easy to understand."
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:1053
msgid "Changing the License"
msgstr ""

#: ../../../source/The-ROS2-Project/Contributing/Migration-Guide.rst:1055
msgid ""
"It is possible to change the license, however you will need to contact all "
"the contributors and get permission. For most packages this is likely to be "
"a significant effort and not worth considering. If the package has a small "
"set of contributors then this may be feasible."
msgstr ""
