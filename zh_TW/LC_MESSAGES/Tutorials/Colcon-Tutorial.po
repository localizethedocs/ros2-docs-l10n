# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Open Robotics
# This file is distributed under the same license as the ros2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ros2 documentation dashing\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 06:55+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/Tutorials/Colcon-Tutorial.rst:8
msgid "Using colcon to build packages"
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:12
msgid "Table of Contents"
msgstr "目次表"

#: ../../../source/Tutorials/Colcon-Tutorial.rst:14
msgid ""
"This is a brief tutorial of how to create and build a ROS 2 workspace with "
"``colcon``. It is a practical tutorial and not designed to replace the core "
"documentation."
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:18
msgid "Background"
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:20
msgid ""
"``colcon`` is an iteration on the ROS build tools ``catkin_make``, "
"``catkin_make_isolated``, ``catkin_tools`` and ``ament_tools``. For more "
"information on the design of colcon see `this document <https://design.ros2."
"org/articles/build_tool.html>`__."
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:23
msgid ""
"The source code can be found in the `colcon GitHub organization <https://"
"github.com/colcon>`__."
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:26
msgid "Prerequisites"
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:29
msgid "Install colcon"
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:33
#: ../../../source/Tutorials/Colcon-Tutorial.rst:87
#: ../../../source/Tutorials/Colcon-Tutorial.rst:164
#: ../../../source/Tutorials/Colcon-Tutorial.rst:205
#: ../../../source/Tutorials/Colcon-Tutorial.rst:237
msgid "Linux"
msgstr "Linux"

#: ../../../source/Tutorials/Colcon-Tutorial.rst:35
msgid "sudo apt install python3-colcon-common-extensions"
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:39
#: ../../../source/Tutorials/Colcon-Tutorial.rst:94
#: ../../../source/Tutorials/Colcon-Tutorial.rst:170
#: ../../../source/Tutorials/Colcon-Tutorial.rst:211
#: ../../../source/Tutorials/Colcon-Tutorial.rst:243
msgid "macOS"
msgstr "macOS"

#: ../../../source/Tutorials/Colcon-Tutorial.rst:41
msgid "python3 -m pip install colcon-common-extensions"
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:45
#: ../../../source/Tutorials/Colcon-Tutorial.rst:101
#: ../../../source/Tutorials/Colcon-Tutorial.rst:176
#: ../../../source/Tutorials/Colcon-Tutorial.rst:217
#: ../../../source/Tutorials/Colcon-Tutorial.rst:249
msgid "Windows"
msgstr "Windows"

#: ../../../source/Tutorials/Colcon-Tutorial.rst:47
msgid "pip install -U colcon-common-extensions"
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:53
msgid "Install ROS 2"
msgstr "安裝 ROS 2"

#: ../../../source/Tutorials/Colcon-Tutorial.rst:55
msgid "To build the samples, you will need to install ROS 2."
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:57
msgid "Follow the `installation instructions <../Installation>`."
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:59
msgid ""
"If installing from Debian packages, this tutorial requires the `desktop "
"installation <linux-install-debians-install-ros-2-packages>`."
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:62
msgid "Basics"
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:64
msgid ""
"A ROS workspace is a directory with a particular structure. Commonly there "
"is a ``src`` subdirectory. Inside that subdirectory is where the source code "
"of ROS packages will be located. Typically the directory starts otherwise "
"empty."
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:69
msgid ""
"colcon does out of source builds. By default it will create the following "
"directories as peers of the ``src`` directory:"
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:72
msgid ""
"The ``build`` directory will be where intermediate files are stored. For "
"each package a subfolder will be created in which e.g. CMake is being "
"invoked."
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:74
msgid ""
"The ``install`` directory is where each package will be installed to. By "
"default each package will be installed into a separate subdirectory."
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:76
msgid ""
"The ``log`` directory contains various logging information about each colcon "
"invocation."
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:78
msgid "Compared to catkin there is no ``devel`` directory."
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:81
msgid "Create a workspace"
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:83
msgid ""
"First, create a directory (``ros2_example_ws``) to contain our workspace:"
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:89
#: ../../../source/Tutorials/Colcon-Tutorial.rst:96
msgid ""
"mkdir -p ~/ros2_example_ws/src\n"
"cd ~/ros2_example_ws"
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:103
msgid ""
"md \\dev\\ros2_example_ws\\src\n"
"cd \\dev\\ros2_example_ws"
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:108
msgid "At this point the workspace contains a single empty directory ``src``:"
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:110
msgid ""
".\n"
"└── src\n"
"\n"
"1 directory, 0 files"
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:118
msgid "Add some sources"
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:120
msgid ""
"Let's clone the `examples <https://github.com/ros2/examples>`__ repository "
"into the ``src`` directory of the workspace:"
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:122
msgid "git clone https://github.com/ros2/examples src/examples -b dashing"
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:126
msgid "Now the workspace should have the source code to the ROS 2 examples:"
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:128
msgid ""
".\n"
"└── src\n"
"    └── examples\n"
"        ├── CONTRIBUTING.md\n"
"        ├── LICENSE\n"
"        ├── rclcpp\n"
"        ├── rclpy\n"
"        └── README.md\n"
"\n"
"4 directories, 3 files"
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:142
msgid "Source an underlay"
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:144
msgid ""
"It is important that we have sourced the environment for an existing ROS 2 "
"installation that will provide our workspace with the necessary build "
"dependencies for the example packages. This is achieved by sourcing the "
"setup script provided by a binary installation or a source installation, ie. "
"another colcon workspace (see `Installation <../Installation>`). We call "
"this environment an **underlay**."
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:148
msgid ""
"Our workspace, ``ros2_examples_ws``, will be an **overlay** on top of the "
"existing ROS 2 installation. In general, it is recommended to use an overlay "
"when you plan to iterate on a small number of packages, rather than putting "
"all of your packages into the same workspace."
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:152
msgid "Build the workspace"
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:156
msgid ""
"To build packages on Windows you need to be in a Visual Studio environment, "
"see `Building the ROS 2 Code <windows-dev-build-ros2>` for more details."
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:158
msgid ""
"In the root of the workspace, run ``colcon build``. Since build types such "
"as ``ament_cmake`` do not support the concept of the ``devel`` space and "
"require the package to be installed, colcon supports the option ``--symlink-"
"install``. This allows the installed files to be changed by changing the "
"files in the ``source`` space (e.g. Python files or other not compiled "
"resourced) for faster iteration."
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:166
#: ../../../source/Tutorials/Colcon-Tutorial.rst:172
msgid "colcon build --symlink-install"
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:178
msgid "colcon build --symlink-install --merge-install"
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:182
msgid ""
"Windows doesn’t allow long paths, so ``merge-install`` will combine all the "
"paths into the ``install`` directory."
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:184
msgid ""
"After the build is finished, we should see the ``build``, ``install``, and "
"``log`` directories:"
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:186
msgid ""
".\n"
"├── build\n"
"├── install\n"
"├── log\n"
"└── src\n"
"\n"
"4 directories, 0 files"
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:199
msgid "Run tests"
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:201
msgid "To run tests for the packages we just built, run the following:"
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:207
#: ../../../source/Tutorials/Colcon-Tutorial.rst:213
msgid "colcon test"
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:219
msgid ""
"Remember to use a ``x64 Native Tools Command Prompt for VS 2019`` for "
"executing the following command, as we are going to build a workspace."
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:221
msgid "colcon test --merge-install"
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:225
msgid ""
"You also need to specify ``--merge-install`` here since we used it for "
"building above."
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:228
msgid "Source the environment"
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:230
msgid ""
"When colcon has completed building successfully, the output will be in the "
"``install`` directory. Before you can use any of the installed executables "
"or libraries, you will need to add them to your path and library paths. "
"colcon will have generated bash/bat files in the ``install`` directory to "
"help setup the environment. These files will add all of the required "
"elements to your path and library paths as well as provide any bash or shell "
"commands exported by packages."
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:239
#: ../../../source/Tutorials/Colcon-Tutorial.rst:245
msgid ". install/setup.bash"
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:251
msgid "call install\\setup.bat"
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:255
msgid "Or with Powershell:"
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:257
msgid "install\\setup.ps1"
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:262
msgid "Try a demo"
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:264
msgid ""
"With the environment sourced we can run executables built by colcon. Let's "
"run a subscriber node from the examples:"
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:267
msgid "ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function"
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:271
msgid ""
"In another terminal, let's run a publisher node (don't forget to source the "
"setup script):"
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:273
msgid "ros2 run examples_rclcpp_minimal_publisher publisher_member_function"
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:277
msgid ""
"You should see messages from the publisher and subscriber with numbers "
"incrementing."
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:280
msgid "Create your own package"
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:282
msgid ""
"colcon uses the ``package.xml`` specification defined in `REP 149 <https://"
"www.ros.org/reps/rep-0149.html>`__ (`format 2 <https://www.ros.org/reps/"
"rep-0140.html>`__ is also supported)."
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:284
msgid ""
"colcon supports multiple build types. The recommended build types are "
"``ament_cmake`` and ``ament_python``. Also supported are pure ``cmake`` "
"packages."
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:288
msgid ""
"An example of an ``ament_python`` build is the `ament_index_python package "
"<https://github.com/ament/ament_index/tree/dashing/ament_index_python>`__ , "
"where the setup.py is the primary entry point for building."
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:290
msgid ""
"A package such as `demo_nodes_cpp <https://github.com/ros2/demos/tree/"
"dashing/demo_nodes_cpp>`__ uses the ``ament_cmake`` build type, and uses "
"CMake as the build tool."
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:292
msgid ""
"For convenience, you can use the tool ``ros2 pkg create`` to create a new "
"package based on a template."
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:294
msgid ""
"For ``catkin`` users, this is the equivalent of ``catkin_create_package``."
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:297
msgid "Tips"
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:301
msgid ""
"If you do not want to build a specific package place an empty file named "
"``COLCON_IGNORE`` in the directory and it will not be indexed."
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:304
msgid ""
"If you want to avoid configuring and building tests in CMake packages you "
"can pass: ``--cmake-args -DBUILD_TESTING=0``."
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:307
msgid "If you want to run a single particular test from a package:"
msgstr ""

#: ../../../source/Tutorials/Colcon-Tutorial.rst:309
msgid ""
"colcon test --packages-select YOUR_PKG_NAME --ctest-args -R YOUR_TEST_IN_PKG"
msgstr ""
