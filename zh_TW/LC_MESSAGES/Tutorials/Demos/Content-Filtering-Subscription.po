# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation jazzy\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-01 08:38+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:6
msgid "Creating a content filtering subscription"
msgstr ""

#: ../../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:8
msgid "**Goal:** Create a content filtering subscription."
msgstr ""

#: ../../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:10
msgid "**Tutorial level:** Advanced"
msgstr ""

#: ../../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:12
msgid "**Time:** 15 minutes"
msgstr ""

#: ../../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:16
msgid "Table of Contents"
msgstr "目次表"

#: ../../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:19
msgid "Overview"
msgstr ""

#: ../../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:21
msgid ""
"ROS 2 applications typically consist of topics to transmit data from "
"publishers to subscriptions. Basically, subscriptions receive all published "
"data from publishers on the topic. But sometimes, a subscription might be "
"interested in only a subset of the data which is being sent by publishers. A "
"content filtering subscription allows to receive only the data of interest "
"for the application."
msgstr ""

#: ../../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:26
msgid ""
"In this demo, we'll be highlighting how to create a content filtering "
"subscription and how they work."
msgstr ""

#: ../../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:29
msgid "RMW Support"
msgstr ""

#: ../../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:31
msgid "Content filtering subscriptions require RMW implementation support."
msgstr ""

#: ../../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:33
msgid "Content-Filtering-Subscription Support Status"
msgstr ""

#: ../../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:36
msgid "rmw_fastrtps"
msgstr ""

#: ../../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:37
#: ../../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:39
msgid "supported"
msgstr ""

#: ../../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:38
msgid "rmw_connextdds"
msgstr ""

#: ../../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:40
msgid "rmw_cyclonedds"
msgstr ""

#: ../../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:41
#: ../../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:43
msgid "not supported"
msgstr ""

#: ../../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:42
msgid "rmw_zenoh_cpp"
msgstr ""

#: ../../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:45
msgid ""
"Currently all RMW implementations that support content filtering "
"subscriptions are `DDS <https://www.omg.org/omg-dds-portal/>`__ based. That "
"means that the supported filtering expressions and parameters are also "
"dependent on `DDS <https://www.omg.org/omg-dds-portal/>`__, you can refer to "
"`DDS specification <https://www.omg.org/spec/DDS/1.4/PDF>`__ ``Annex B - "
"Syntax for Queries and Filters`` for details."
msgstr ""

#: ../../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:49
msgid "Installing the demo"
msgstr ""

#: ../../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:51
msgid ""
"See the :doc:`installation instructions <../../Installation>` for details on "
"installing ROS 2."
msgstr ""

#: ../../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:53
msgid ""
"If you've installed ROS 2 from packages, ensure that you have ``ros-rolling-"
"demo-nodes-cpp`` installed. If you downloaded the archive or built ROS 2 "
"from source, it will already be part of the installation."
msgstr ""

#: ../../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:57
msgid "Temperature filtering demo"
msgstr ""

#: ../../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:59
msgid ""
"This demo shows how a content filtering subscription can be used to only "
"receive temperature values that are out of the acceptable temperature range, "
"detecting emergencies. The content filtering subscription filters out the "
"uninteresting temperature data, so that the subscription callback is not "
"issued."
msgstr ""

#: ../../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:62
msgid "ContentFilteringPublisher:"
msgstr ""

#: ../../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:64
msgid ""
"https://github.com/ros2/demos/blob/rolling/demo_nodes_cpp/src/topics/"
"content_filtering_publisher.cpp"
msgstr ""

#: ../../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:66
msgid ""
"#include <array>\n"
"#include <chrono>\n"
"#include <memory>\n"
"#include <utility>\n"
"\n"
"#include \"rclcpp/rclcpp.hpp\"\n"
"#include \"rclcpp_components/register_node_macro.hpp\"\n"
"\n"
"#include \"std_msgs/msg/float32.hpp\"\n"
"\n"
"#include \"demo_nodes_cpp/visibility_control.h\"\n"
"\n"
"namespace demo_nodes_cpp\n"
"{\n"
"// The simulated temperature data starts from -100.0 and ends at 150.0 with "
"a step size of 10.0\n"
"constexpr std::array<float, 3> TEMPERATURE_SETTING {-100.0f, 150.0f, "
"10.0f};\n"
"\n"
"// Create a ContentFilteringPublisher class that subclasses the generic "
"rclcpp::Node base class.\n"
"// The main function below will instantiate the class as a ROS node.\n"
"class ContentFilteringPublisher final : public rclcpp::Node\n"
"{\n"
"public:\n"
"  DEMO_NODES_CPP_PUBLIC\n"
"  explicit ContentFilteringPublisher(const rclcpp::NodeOptions & options)\n"
"  : Node(\"content_filtering_publisher\", options)\n"
"  {\n"
"    // Create a function for when messages are to be sent.\n"
"    auto publish_message =\n"
"      [this]() -> void\n"
"      {\n"
"        msg_ = std::make_unique<std_msgs::msg::Float32>();\n"
"        msg_->data = temperature_;\n"
"        temperature_ += TEMPERATURE_SETTING[2];\n"
"        if (temperature_ > TEMPERATURE_SETTING[1]) {\n"
"          temperature_ = TEMPERATURE_SETTING[0];\n"
"        }\n"
"        RCLCPP_INFO(this->get_logger(), \"Publishing: '%f'\", msg_->data);\n"
"        // Put the message into a queue to be processed by the middleware.\n"
"        // This call is non-blocking.\n"
"        pub_->publish(std::move(msg_));\n"
"      };\n"
"    // Create a publisher with a custom Quality of Service profile.\n"
"    // Uniform initialization is suggested so it can be trivially changed "
"to\n"
"    // rclcpp::KeepAll{} if the user wishes.\n"
"    // (rclcpp::KeepLast(7) -> rclcpp::KeepAll() fails to compile)\n"
"    rclcpp::QoS qos(rclcpp::KeepLast{7});\n"
"    pub_ = this->create_publisher<std_msgs::msg::Float32>(\"temperature\", "
"qos);\n"
"\n"
"    int64_t publish_ms = this->declare_parameter(\"publish_ms\", 1000);\n"
"\n"
"    // Use a timer to schedule periodic message publishing.\n"
"    timer_ = this->create_wall_timer(std::chrono::milliseconds(publish_ms), "
"publish_message);\n"
"  }\n"
"\n"
"private:\n"
"  float temperature_ = TEMPERATURE_SETTING[0];\n"
"  std::unique_ptr<std_msgs::msg::Float32> msg_;\n"
"  rclcpp::Publisher<std_msgs::msg::Float32>::SharedPtr pub_;\n"
"  rclcpp::TimerBase::SharedPtr timer_;\n"
"};\n"
"\n"
"}  // namespace demo_nodes_cpp"
msgstr ""

#: ../../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:131
msgid ""
"The content filter is defined in the subscription side, publishers don't "
"need to be configured in any special way to allow content filtering. The "
"``ContentFilteringPublisher`` node publishes simulated temperature data "
"starting from -100.0 and ending at 150.0 with a step size of 10.0 every "
"second."
msgstr ""

#: ../../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:134
msgid ""
"We can run the demo by running the ``ros2 run demo_nodes_cpp "
"content_filtering_publisher`` executable (don't forget to source the setup "
"file first):"
msgstr ""

#: ../../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:136
msgid ""
"$ ros2 run demo_nodes_cpp content_filtering_publisher\n"
"[INFO] [1651094594.822753479] [content_filtering_publisher]: Publishing: "
"'-100.000000'\n"
"[INFO] [1651094595.822723857] [content_filtering_publisher]: Publishing: "
"'-90.000000'\n"
"[INFO] [1651094596.822752996] [content_filtering_publisher]: Publishing: "
"'-80.000000'\n"
"[INFO] [1651094597.822752475] [content_filtering_publisher]: Publishing: "
"'-70.000000'\n"
"[INFO] [1651094598.822721485] [content_filtering_publisher]: Publishing: "
"'-60.000000'\n"
"[INFO] [1651094599.822696188] [content_filtering_publisher]: Publishing: "
"'-50.000000'\n"
"[INFO] [1651094600.822699217] [content_filtering_publisher]: Publishing: "
"'-40.000000'\n"
"[INFO] [1651094601.822744113] [content_filtering_publisher]: Publishing: "
"'-30.000000'\n"
"[INFO] [1651094602.822694805] [content_filtering_publisher]: Publishing: "
"'-20.000000'\n"
"[INFO] [1651094603.822735805] [content_filtering_publisher]: Publishing: "
"'-10.000000'\n"
"[INFO] [1651094604.822722094] [content_filtering_publisher]: Publishing: "
"'0.000000'\n"
"[INFO] [1651094605.822699960] [content_filtering_publisher]: Publishing: "
"'10.000000'\n"
"[INFO] [1651094606.822748946] [content_filtering_publisher]: Publishing: "
"'20.000000'\n"
"[INFO] [1651094607.822694017] [content_filtering_publisher]: Publishing: "
"'30.000000'\n"
"[INFO] [1651094608.822708798] [content_filtering_publisher]: Publishing: "
"'40.000000'\n"
"[INFO] [1651094609.822692417] [content_filtering_publisher]: Publishing: "
"'50.000000'\n"
"[INFO] [1651094610.822696426] [content_filtering_publisher]: Publishing: "
"'60.000000'\n"
"[INFO] [1651094611.822751913] [content_filtering_publisher]: Publishing: "
"'70.000000'\n"
"[INFO] [1651094612.822692231] [content_filtering_publisher]: Publishing: "
"'80.000000'\n"
"[INFO] [1651094613.822745549] [content_filtering_publisher]: Publishing: "
"'90.000000'\n"
"[INFO] [1651094614.822701982] [content_filtering_publisher]: Publishing: "
"'100.000000'\n"
"[INFO] [1651094615.822691465] [content_filtering_publisher]: Publishing: "
"'110.000000'\n"
"[INFO] [1651094616.822649070] [content_filtering_publisher]: Publishing: "
"'120.000000'\n"
"[INFO] [1651094617.822693616] [content_filtering_publisher]: Publishing: "
"'130.000000'\n"
"[INFO] [1651094618.822691832] [content_filtering_publisher]: Publishing: "
"'140.000000'\n"
"[INFO] [1651094619.822688452] [content_filtering_publisher]: Publishing: "
"'150.000000'\n"
"[INFO] [1651094620.822645327] [content_filtering_publisher]: Publishing: "
"'-100.000000'\n"
"[INFO] [1651094621.822689219] [content_filtering_publisher]: Publishing: "
"'-90.000000'\n"
"[INFO] [1651094622.822694292] [content_filtering_publisher]: Publishing: "
"'-80.000000'\n"
"[...]"
msgstr ""

#: ../../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:170
msgid "ContentFilteringSubscriber:"
msgstr ""

#: ../../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:172
msgid ""
"https://github.com/ros2/demos/blob/rolling/demo_nodes_cpp/src/topics/"
"content_filtering_subscriber.cpp"
msgstr ""

#: ../../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:174
msgid ""
"#include <array>\n"
"#include <string>\n"
"\n"
"#include \"rclcpp/rclcpp.hpp\"\n"
"#include \"rclcpp_components/register_node_macro.hpp\"\n"
"#include \"rcpputils/join.hpp\"\n"
"\n"
"#include \"std_msgs/msg/float32.hpp\"\n"
"\n"
"#include \"demo_nodes_cpp/visibility_control.h\"\n"
"\n"
"namespace demo_nodes_cpp\n"
"{\n"
"// Emergency temperature data less than -30 or greater than 100\n"
"constexpr std::array<float, 2> EMERGENCY_TEMPERATURE {-30.0f, 100.0f};\n"
"\n"
"// Create a ContentFilteringSubscriber class that subclasses the generic "
"rclcpp::Node base class.\n"
"// The main function below will instantiate the class as a ROS node.\n"
"class ContentFilteringSubscriber : public rclcpp::Node\n"
"{\n"
"public:\n"
"  DEMO_NODES_CPP_PUBLIC\n"
"  explicit ContentFilteringSubscriber(const rclcpp::NodeOptions & options)\n"
"  : Node(\"content_filtering_subscriber\", options)\n"
"  {\n"
"    // Create a callback function for when messages are received.\n"
"    auto callback =\n"
"      [this](const std_msgs::msg::Float32 & msg) -> void\n"
"      {\n"
"        if (msg.data < EMERGENCY_TEMPERATURE[0] || msg.data > "
"EMERGENCY_TEMPERATURE[1]) {\n"
"          RCLCPP_INFO(\n"
"            this->get_logger(),\n"
"            \"I receive an emergency temperature data: [%f]\", msg.data);\n"
"        } else {\n"
"          RCLCPP_INFO(this->get_logger(), \"I receive a temperature data: "
"[%f]\", msg.data);\n"
"        }\n"
"      };\n"
"\n"
"    // Initialize a subscription with a content filter to receive emergency "
"temperature data that\n"
"    // are less than -30 or greater than 100.\n"
"    rclcpp::SubscriptionOptions sub_options;\n"
"    sub_options.content_filter_options.filter_expression = \"data < %0 OR "
"data > %1\";\n"
"    sub_options.content_filter_options.expression_parameters = {\n"
"      std::to_string(EMERGENCY_TEMPERATURE[0]),\n"
"      std::to_string(EMERGENCY_TEMPERATURE[1])\n"
"    };\n"
"\n"
"    sub_ = create_subscription<std_msgs::msg::Float32>(\"temperature\", 10, "
"callback, sub_options);\n"
"\n"
"    if (!sub_->is_cft_enabled()) {\n"
"      RCLCPP_WARN(\n"
"        this->get_logger(), \"Content filter is not enabled since it's not "
"supported\");\n"
"    } else {\n"
"      RCLCPP_INFO(\n"
"        this->get_logger(),\n"
"        \"subscribed to topic \\\"%s\\\" with content filter options \\\"%s, "
"{%s}\\\"\",\n"
"        sub_->get_topic_name(),\n"
"        sub_options.content_filter_options.filter_expression.c_str(),\n"
"        rcpputils::join(sub_options.content_filter_options."
"expression_parameters, \", \").c_str());\n"
"    }\n"
"  }\n"
"\n"
"private:\n"
"  rclcpp::Subscription<std_msgs::msg::Float32>::SharedPtr sub_;\n"
"};\n"
"\n"
"}  // namespace demo_nodes_cpp"
msgstr ""

#: ../../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:244
msgid ""
"To enable content filtering, applications can set the filtering expression "
"and the expression parameters in ``SubscriptionOptions``. The application "
"can also check if content filtering is enabled on the subscription."
msgstr ""

#: ../../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:247
msgid ""
"In this demo, the ``ContentFilteringSubscriber`` node creates a content "
"filtering subscription that receives a message only if the temperature value "
"is less than -30.0 or greater than 100.0."
msgstr ""

#: ../../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:249
msgid ""
"As commented before, content filtering subscription support depends on the "
"RMW implementation. Applications can use the ``is_cft_enabled`` method to "
"check if content filtering is actually enabled on the subscription."
msgstr ""

#: ../../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:252
msgid "To test content filtering subscription, let's run it:"
msgstr ""

#: ../../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:254
msgid ""
"$ ros2 run demo_nodes_cpp content_filtering_subscriber\n"
"[INFO] [1651094590.682660703] [content_filtering_subscriber]: subscribed to "
"topic \"/temperature\" with content filter options \"data < %0 OR data > %1, "
"{-30.000000, 100.000000}\"\n"
"[INFO] [1651094594.823805294] [content_filtering_subscriber]: I receive an "
"emergency temperature data: [-100.000000]\n"
"[INFO] [1651094595.823419993] [content_filtering_subscriber]: I receive an "
"emergency temperature data: [-90.000000]\n"
"[INFO] [1651094596.823410859] [content_filtering_subscriber]: I receive an "
"emergency temperature data: [-80.000000]\n"
"[INFO] [1651094597.823350377] [content_filtering_subscriber]: I receive an "
"emergency temperature data: [-70.000000]\n"
"[INFO] [1651094598.823282657] [content_filtering_subscriber]: I receive an "
"emergency temperature data: [-60.000000]\n"
"[INFO] [1651094599.823297857] [content_filtering_subscriber]: I receive an "
"emergency temperature data: [-50.000000]\n"
"[INFO] [1651094600.823355597] [content_filtering_subscriber]: I receive an "
"emergency temperature data: [-40.000000]\n"
"[INFO] [1651094615.823315377] [content_filtering_subscriber]: I receive an "
"emergency temperature data: [110.000000]\n"
"[INFO] [1651094616.823258458] [content_filtering_subscriber]: I receive an "
"emergency temperature data: [120.000000]\n"
"[INFO] [1651094617.823323525] [content_filtering_subscriber]: I receive an "
"emergency temperature data: [130.000000]\n"
"[INFO] [1651094618.823315527] [content_filtering_subscriber]: I receive an "
"emergency temperature data: [140.000000]\n"
"[INFO] [1651094619.823331424] [content_filtering_subscriber]: I receive an "
"emergency temperature data: [150.000000]\n"
"[INFO] [1651094620.823271748] [content_filtering_subscriber]: I receive an "
"emergency temperature data: [-100.000000]\n"
"[INFO] [1651094621.823343550] [content_filtering_subscriber]: I receive an "
"emergency temperature data: [-90.000000]\n"
"[INFO] [1651094622.823286326] [content_filtering_subscriber]: I receive an "
"emergency temperature data: [-80.000000]\n"
"[INFO] [1651094623.823371031] [content_filtering_subscriber]: I receive an "
"emergency temperature data: [-70.000000]\n"
"[INFO] [1651094624.823333112] [content_filtering_subscriber]: I receive an "
"emergency temperature data: [-60.000000]\n"
"[INFO] [1651094625.823266469] [content_filtering_subscriber]: I receive an "
"emergency temperature data: [-50.000000]\n"
"[INFO] [1651094626.823284093] [content_filtering_subscriber]: I receive an "
"emergency temperature data: [-40.000000]"
msgstr ""

#: ../../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:278
msgid ""
"You should see a message showing the content filtering options used and logs "
"for each message received only if the temperature value is less than -30.0 "
"or greater than 100.0."
msgstr ""

#: ../../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:280
msgid ""
"If content filtering is not supported by the RMW implementation, the "
"subscription will still be created without content filtering enabled. We can "
"try that by executing ``RMW_IMPLEMENTATION=rmw_cyclonedds_cpp ros2 run "
"demo_nodes_cpp content_filtering_publisher``."
msgstr ""

#: ../../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:283
msgid ""
"$ RMW_IMPLEMENTATION=rmw_cyclonedds_cpp ros2 run demo_nodes_cpp "
"content_filtering_subscriber\n"
"[WARN] [1651096637.893842072] [content_filtering_subscriber]: Content filter "
"is not enabled since it is not supported\n"
"[INFO] [1651096641.246043703] [content_filtering_subscriber]: I receive an "
"emergency temperature data: [-100.000000]\n"
"[INFO] [1651096642.245833527] [content_filtering_subscriber]: I receive an "
"emergency temperature data: [-90.000000]\n"
"[INFO] [1651096643.245743471] [content_filtering_subscriber]: I receive an "
"emergency temperature data: [-80.000000]\n"
"[INFO] [1651096644.245833932] [content_filtering_subscriber]: I receive an "
"emergency temperature data: [-70.000000]\n"
"[INFO] [1651096645.245916679] [content_filtering_subscriber]: I receive an "
"emergency temperature data: [-60.000000]\n"
"[INFO] [1651096646.245861895] [content_filtering_subscriber]: I receive an "
"emergency temperature data: [-50.000000]\n"
"[INFO] [1651096647.245946352] [content_filtering_subscriber]: I receive an "
"emergency temperature data: [-40.000000]\n"
"[INFO] [1651096648.245934569] [content_filtering_subscriber]: I receive a "
"temperature data: [-30.000000]\n"
"[INFO] [1651096649.245877906] [content_filtering_subscriber]: I receive a "
"temperature data: [-20.000000]\n"
"[INFO] [1651096650.245939068] [content_filtering_subscriber]: I receive a "
"temperature data: [-10.000000]\n"
"[INFO] [1651096651.245911450] [content_filtering_subscriber]: I receive a "
"temperature data: [0.000000]\n"
"[INFO] [1651096652.245879830] [content_filtering_subscriber]: I receive a "
"temperature data: [10.000000]\n"
"[INFO] [1651096653.245858329] [content_filtering_subscriber]: I receive a "
"temperature data: [20.000000]\n"
"[INFO] [1651096654.245916370] [content_filtering_subscriber]: I receive a "
"temperature data: [30.000000]\n"
"[INFO] [1651096655.245933741] [content_filtering_subscriber]: I receive a "
"temperature data: [40.000000]\n"
"[INFO] [1651096656.245833975] [content_filtering_subscriber]: I receive a "
"temperature data: [50.000000]\n"
"[INFO] [1651096657.245971483] [content_filtering_subscriber]: I receive a "
"temperature data: [60.000000]"
msgstr ""

#: ../../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:305
msgid ""
"You can see the message ``Content filter is not enabled`` because underlying "
"RMW implementation does not support the feature, but the demo still "
"successfully creates the normal subscription to receive all temperature data."
msgstr ""

#: ../../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:308
msgid "Related content"
msgstr ""

#: ../../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:310
msgid ""
"`content filtering examples <https://github.com/ros2/examples/blob/rolling/"
"rclcpp/topics/minimal_subscriber/content_filtering.cpp>`__ that covers all "
"interfaces for content filtering subscription."
msgstr ""

#: ../../../source/Tutorials/Demos/Content-Filtering-Subscription.rst:311
msgid ""
"`content filtering design PR <https://github.com/ros2/design/pull/282>`__"
msgstr ""
