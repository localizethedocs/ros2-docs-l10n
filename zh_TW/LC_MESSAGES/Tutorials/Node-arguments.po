# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Open Robotics
# This file is distributed under the same license as the ros2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ros2 documentation eloquent\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 06:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/Tutorials/Node-arguments.rst:6
msgid "Passing ROS arguments to nodes via the command-line"
msgstr ""

#: ../../../source/Tutorials/Node-arguments.rst:11
msgid "Table of Contents"
msgstr "目次表"

#: ../../../source/Tutorials/Node-arguments.rst:13
msgid ""
"All ROS nodes take a set of arguments that allow various properties to be "
"reconfigured. Examples include configuring the name/namespace of the node, "
"topic/service names used, and parameters on the node. All ros specific "
"arguments have to be specified after a ``--ros-args`` flag:"
msgstr ""

#: ../../../source/Tutorials/Node-arguments.rst:18
msgid "ros2 run my_package node_executable --ros-args ..."
msgstr ""

#: ../../../source/Tutorials/Node-arguments.rst:22
msgid ""
"For more details, see `this design doc <https://design.ros2.org/articles/"
"ros_command_line_arguments.html>`__."
msgstr ""

#: ../../../source/Tutorials/Node-arguments.rst:25
msgid "Name remapping"
msgstr ""

#: ../../../source/Tutorials/Node-arguments.rst:27
msgid ""
"Names within a node (e.g. topics/services) can be remapped using the syntax "
"``-r <old name>:=<new name>``. The name/namespace of the node itself can be "
"remapped using ``-r __node:=<new node name>`` and ``-r __ns:=<new node "
"namespace>``."
msgstr ""

#: ../../../source/Tutorials/Node-arguments.rst:30
msgid ""
"Note that these remappings are \"static\" remappings, in that they apply for "
"the lifetime of the node. \"Dynamic\" remapping of names after nodes have "
"been started is not yet supported."
msgstr ""

#: ../../../source/Tutorials/Node-arguments.rst:33
msgid ""
"See `this design doc <https://design.ros2.org/articles/static_remapping."
"html>`__ for more details on remapping arguments (not all functionality is "
"available yet)."
msgstr ""

#: ../../../source/Tutorials/Node-arguments.rst:36
msgid "Example"
msgstr "範例"

#: ../../../source/Tutorials/Node-arguments.rst:38
msgid ""
"The following invocation will cause the ``talker`` node to be started under "
"the node name ``my_talker``, publishing on the topic named ``my_topic`` "
"instead of the default of ``chatter``. The namespace, which must start with "
"a forward slash, is set to ``/demo``, which means that topics are created in "
"that namespace (``/demo/my_topic``), as opposed to globally (``/my_topic``)."
msgstr ""

#: ../../../source/Tutorials/Node-arguments.rst:41
msgid ""
"ros2 run demo_nodes_cpp talker --ros-args -r __ns:=/demo -r __node:"
"=my_talker -r chatter:=my_topic"
msgstr ""

#: ../../../source/Tutorials/Node-arguments.rst:46
msgid "Passing remapping arguments to specific nodes"
msgstr ""

#: ../../../source/Tutorials/Node-arguments.rst:48
msgid ""
"If multiple nodes are being run within a single process (e.g. using "
"`Composition <Composition>`), remapping arguments can be passed to a "
"specific node using its name as a prefix. For example, the following will "
"pass the remapping arguments to the specified nodes:"
msgstr ""

#: ../../../source/Tutorials/Node-arguments.rst:51
msgid ""
"ros2 run composition manual_composition --ros-args -r talker:__node:"
"=my_talker -r listener:__node:=my_listener"
msgstr ""

#: ../../../source/Tutorials/Node-arguments.rst:56
msgid ""
"The following example will both change the node name and remap a topic (node "
"and namespace changes are always applied *before* topic remapping):"
msgstr ""

#: ../../../source/Tutorials/Node-arguments.rst:58
msgid ""
"ros2 run composition manual_composition --ros-args -r talker:__node:"
"=my_talker -r my_talker:chatter:=my_topic -r listener:__node:=my_listener -r "
"my_listener:chatter:=my_topic"
msgstr ""

#: ../../../source/Tutorials/Node-arguments.rst:63
msgid "Logger configuration"
msgstr ""

#: ../../../source/Tutorials/Node-arguments.rst:65
msgid ""
"See ``--log-level`` argument usage in `the logging page <Logging-and-logger-"
"configuration>`."
msgstr ""

#: ../../../source/Tutorials/Node-arguments.rst:68
msgid "Parameters"
msgstr "參數"

#: ../../../source/Tutorials/Node-arguments.rst:73
msgid "Setting parameters directly in the command line"
msgstr ""

#: ../../../source/Tutorials/Node-arguments.rst:75
msgid ""
"You can set parameters directly from the command line using the following "
"syntax:"
msgstr ""

#: ../../../source/Tutorials/Node-arguments.rst:77
msgid ""
"ros2 run package_name executable_name --ros-args -p param_name:=param_value"
msgstr ""

#: ../../../source/Tutorials/Node-arguments.rst:81
msgid "As an example, you can run:"
msgstr ""

#: ../../../source/Tutorials/Node-arguments.rst:83
msgid ""
"ros2 run demo_nodes_cpp parameter_blackboard --ros-args -p some_int:=42 -p "
"\"a_string:=Hello world\" -p \"some_lists.some_integers:=[1, 2, 3, 4]\" -p "
"\"some_lists.some_doubles:=[3.14, 2.718]\""
msgstr ""

#: ../../../source/Tutorials/Node-arguments.rst:87
#: ../../../source/Tutorials/Node-arguments.rst:125
msgid "Other nodes will be able to retrieve the parameter values, e.g.:"
msgstr ""

#: ../../../source/Tutorials/Node-arguments.rst:89
#: ../../../source/Tutorials/Node-arguments.rst:127
msgid ""
"$ ros2 param list parameter_blackboard\n"
"a_string\n"
"some_int\n"
"some_lists.some_doubles\n"
"some_lists.some_integers"
msgstr ""

#: ../../../source/Tutorials/Node-arguments.rst:98
msgid "Setting parameters from YAML files"
msgstr ""

#: ../../../source/Tutorials/Node-arguments.rst:100
msgid "Parameters can be set from the command-line in the form of yaml files."
msgstr ""

#: ../../../source/Tutorials/Node-arguments.rst:102
msgid ""
"`See here <https://github.com/ros2/rcl/tree/eloquent/"
"rcl_yaml_param_parser>`__ for examples of the yaml file syntax."
msgstr ""

#: ../../../source/Tutorials/Node-arguments.rst:104
msgid "As an example, save the following as ``demo_params.yaml``:"
msgstr ""

#: ../../../source/Tutorials/Node-arguments.rst:106
msgid ""
"parameter_blackboard:\n"
"    ros__parameters:\n"
"        some_int: 42\n"
"        a_string: \"Hello world\"\n"
"        some_lists:\n"
"            some_integers: [1, 2, 3, 4]\n"
"            some_doubles : [3.14, 2.718]"
msgstr ""

#: ../../../source/Tutorials/Node-arguments.rst:116
msgid ""
"Then either declare the parameters within your node with "
"``declare_parameter``  or ``declare_parameters`` (see `documentation "
"<https://docs.ros2.org/eloquent/api/rclcpp/classrclcpp_1_1Node."
"html#a222633623e5c933b7953e5718ec3649a>`__ for function signatures), or `set "
"the node to automatically declare parameters <https://docs.ros2.org/eloquent/"
"api/rclcpp/classrclcpp_1_1NodeOptions."
"html#a094ceb7af7c9b358ec007a4b8e14d40d>`__ if they were passed in via a "
"command line override."
msgstr ""

#: ../../../source/Tutorials/Node-arguments.rst:118
msgid "Then run the following:"
msgstr ""

#: ../../../source/Tutorials/Node-arguments.rst:121
msgid ""
"ros2 run demo_nodes_cpp parameter_blackboard --ros-args --params-file "
"demo_params.yaml"
msgstr ""
