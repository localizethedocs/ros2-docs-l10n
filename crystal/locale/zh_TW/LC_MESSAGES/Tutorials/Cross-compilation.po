# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Open Robotics
# This file is distributed under the same license as the ros2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ros2 documentation crystal\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 06:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/Tutorials/Cross-compilation.rst:2
msgid "Cross-compilation"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:6
msgid "Table of Contents"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:9
msgid "Overview"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:11
msgid ""
"Open Robotics provides pre-built ROS 2 packages for multiple platforms, but "
"a number of developers still rely on `cross-compilation <https://en."
"wikipedia.org/wiki/Cross_compiler>`__ for different reasons such as:"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:12
msgid "The development machine does not match the target system."
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:13
msgid ""
"Tuning the build for specific core architecture (e.g. setting -mcpu=cortex-"
"a53 -mfpu=neon-fp-armv8 when building for Raspberry Pi3)."
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:14
msgid ""
"Targeting a different file systems other than the ones supported by the pre-"
"built images released by Open Robotics."
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:16
msgid ""
"This document provides you with details on how to cross-compile the ROS 2 "
"software stack as well as provide examples for cross-compiling to systems "
"based on the Arm cores."
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:19
msgid "How does it work ?"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:21
msgid ""
"Cross-compiling simple software (e.g. no dependencies on external libraries) "
"is relatively simple and only requiring a cross-compiler toolchain to be "
"used instead of the native toolchain."
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:23
msgid "There are a number of factors which make this process more complex:"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:24
msgid ""
"The software being built must support the target architecture. Architecture "
"specific code must be properly isolated and enabled during the build "
"according to the target architecture. Examples include assembly code."
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:25
msgid ""
"All dependencies (e.g. libraries) must be present, either as pre-built "
"packages or also cross-compiled before the target software using them is "
"cross-compiled."
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:26
msgid ""
"When building software stacks (as opposed to an standalone software) using "
"build tools (e.g. colcon), it is expected from the build tool a mechanism to "
"allow the developer to enable cross-compilation on the underlying build "
"system used by each of software in the stack."
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:29
msgid "Cross-compiling ROS 2"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:31
msgid ""
"The ROS 2 cross-compile tool is under shared ownership of Open Robotics and "
"ROS Tooling Working Group."
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:33
msgid ""
"It is a Python script that compiles ROS 2 source files for supported target "
"architectures using an emulator in a docker container. Detailed design of "
"the tool can be found on `ROS 2 design <https://design.ros2.org/articles/"
"cc_build_tools.html>`__. Instructions to use the tool are in the "
"`cross_compile package <https://github.com/ros-tooling/cross_compile>`__."
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:37
msgid ""
"If you are using an older version, please follow the `legacy tool "
"instructions`_."
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:40
msgid "Legacy tool instructions"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:42
msgid ""
"Follow the steps below only if you are using the old version (release `0.0.1 "
"<https://github.com/ros-tooling/cross_compile/releases/tag/0.0.1>`__) of the "
"cross-compile tool. For all other purposes, follow the `cross_compile "
"<https://github.com/ros-tooling/cross_compile>`__ package documentation."
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:44
msgid ""
"Although ROS 2 is a rich software stack with a number of dependencies, it "
"primarily uses two different types of packages:"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:45
msgid "Python based software, which requires no cross-compilation."
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:46
msgid ""
"CMake based software, which provides a mechanism to do cross-compilation."
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:48
msgid ""
"Furthermore, the ROS 2 software stack is built with `Colcon <https://github."
"com/colcon/colcon-core>`__ which provides a mechanism to forward parameters "
"to the CMake instance used for the individual build of each package/library "
"that is part of the ROS 2 distribution."
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:50
msgid ""
"When building ROS 2 natively, the developer is required to download all the "
"dependencies (e.g. Python and other libraries) before compiling the packages "
"that are part of the ROS 2 distribution. When cross-compiling, the same "
"approach is required. The developer must first have the target system's "
"filesystem with all dependencies already installed."
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:52
msgid ""
"The next sections of this document explain in detail the use of `cmake-"
"toolchains <https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7."
"html>`__ and the `CMAKE_SYSROOT <https://cmake.org/cmake/help/latest/"
"variable/CMAKE_SYSROOT.html>`__ feature to cross-compile ROS 2."
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:55
msgid "CMake toolchain-file"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:57
msgid ""
"A CMake toolchain-file is a file which defines variables to configure CMake "
"for cross-compilation. The basic entries are:"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:59
msgid "``CMAKE_SYSTEM_NAME``: the target platform, e.g. ``linux``"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:60
msgid ""
"``CMAKE_SYSTEM_PROCESSOR``: the target architecture, e.g. ``aarch64`` or "
"``arm``"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:61
msgid "``CMAKE_SYSROOT``: the path to the target file-system"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:62
msgid ""
"``CMAKE_C_COMPILER``: the C cross-compiler, e.g. ``aarch64-linux-gnu-gcc``"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:63
msgid ""
"``CMAKE_CXX_COMPILER``: the C++ cross-compiler, e.g. ``aarch64-linux-gnu-g+"
"+``"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:64
msgid ""
"``CMAKE_FIND_ROOT_PATH``: an alternative path used by the ``find_*`` command "
"to find the file-system"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:66
msgid ""
"When cross-compiling ROS 2, the following options are required to be set:"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:68
msgid ""
"``CMAKE_FIND_ROOT_PATH``: the alternative path used by the ``find_*`` "
"command, use it to specify the path to ROS 2 ``/install`` folder"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:69
msgid ""
"``CMAKE_FIND_ROOT_PATH_MODE_*``: the search strategy for program,package,"
"library, and include, usually: ``NEVER`` (look on the host-fs), ``ONLY`` "
"(look on sysroot), and ``BOTH`` (look on both sysroot and host-fs)"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:70
msgid ""
"``PYTHON_SOABI``: the index name of the python libraries generated by ROS 2, "
"e.g. ``cpython-36m-aarch64-linux-gnu``"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:71
msgid ""
"``THREADS_PTHREAD_ARG \"0\" CACHE STRING \"Result from TRY_RUN\" FORCE``: "
"Force the result of the ``TRY_RUN`` cmd to 0 (success) because binaries can "
"not run on the host system."
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:73
msgid ""
"The toolchain-file is provided to CMake with the ``-"
"DCMAKE_TOOLCHAIN_FILE=path/to/file`` parameter. This will also set the "
"``CMAKE_CROSSCOMPILING`` variable to ``true`` which can be used by the "
"software being built."
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:75
msgid ""
"The ``CMAKE_SYSROOT`` is particularly important for ROS 2 as the packages "
"need many dependencies (e.g. python, openssl, opencv, poco, eigen3, ...). "
"Setting ``CMAKE_SYSROOT`` to a target file-system with all the dependencies "
"installed on it will allow CMake to find them during the cross-compilation."
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:78
msgid ""
"You can find more information on the CMake `documentation <https://cmake.org/"
"cmake/help/latest/manual/cmake-toolchains.7.html>`__ page."
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:80
msgid ""
"When downloading the ROS 2 source code, a generic toolchain-file is "
"available in the repository `ros-tooling/cross_compile/cmake-toolchains "
"<https://github.com/ros-tooling/cross_compile>`__ which can be downloaded "
"separately. Further examples on using it can be found on the `Cross-"
"compiling examples for Arm`_ section."
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:83
msgid "Target file-system"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:85
msgid ""
"As mentioned previously, ROS 2 requires different libraries which needs to "
"be provided to cross-compile."
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:87
msgid "There are a number of ways to obtain the file-system:"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:88
msgid "downloading a pre-built image"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:89
msgid ""
"installing the dependencies on the target and exporting the file-system (e."
"g. with sshfs)"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:90
msgid ""
"using qemu + docker (or chroot) to generate the file-system on the host "
"machine."
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:92
msgid ""
"You can find information on how to use Docker + qemu on the next `Cross-"
"compiling examples for Arm`_ section."
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:95
msgid "Build process"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:97
msgid ""
"The build process is similar to native compilation. The only difference is "
"an extra argument to ``Colcon`` to specify the ``toolchain-file``:"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:99
msgid ""
"colcon build --merge-install \\\n"
"    --cmake-force-configure \\\n"
"    --cmake-args \\\n"
"        -DCMAKE_TOOLCHAIN_FILE=\"<path_to_toolchain/toolchainfile.cmake>\""
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:106
msgid ""
"The ``toolchain-file`` provide to CMake the information of the ``cross-"
"compiler`` and the ``target file-system``. ``Colcon`` will call CMake with "
"the given toolchain-file on every package of ROS 2."
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:110
msgid "Cross-compiling examples for Arm"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:111
msgid ""
"After `downloading the ROS 2 source code <../../Installation/Linux-"
"Development-Setup>`__, you can add cross-compilation assets to the workspace "
"via ``git clone https://github.com/ros-tooling/cross_compile.git -b 0.0.1 "
"src/ros2/cross_compile``. These are working examples on how to cross-compile "
"for Arm cores."
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:113
msgid "The following targets are supported:"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:114
msgid "Ubuntu-arm64: To be used with any ARMv8-A based system."
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:115
msgid "Ubuntu-armhf: To be used with any modern ARMv7-A based system."
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:117
msgid "These are the main steps:"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:118
msgid "Installing development tools"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:119
msgid "Downloading ROS 2 source code"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:120
msgid "Downloading the ROS 2 cross-compilation assets"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:121
msgid "Preparing the sysroot"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:122
msgid "Cross-compiling the ROS 2 software stack"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:124
msgid ""
"The next sections explains in detail each of these steps. For a quick-setup, "
"have a look at the `Automated Cross-compilation`_."
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:127
msgid "These steps were tested on an Ubuntu 18.04 (Bionic)"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:130
msgid "1. Install development tools"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:132
msgid ""
"This step is similar to when building natively. The difference is that some "
"of the libraries and tools are not required because they will be in the "
"sysroot instead. The following packages are required"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:135
msgid ""
"sudo apt update && sudo apt install -y \\\n"
"    cmake \\\n"
"    git \\\n"
"    wget \\\n"
"    python3-pip \\\n"
"    qemu-user-static \\\n"
"    g++-aarch64-linux-gnu \\\n"
"    g++-arm-linux-gnueabihf \\\n"
"    pkg-config-aarch64-linux-gnu\n"
"\n"
"python3 -m pip install -U \\\n"
"    vcstool \\\n"
"    colcon-common-extensions"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:151
msgid ""
"You can install vcstool and colcon-common-extensions via pip. This means you "
"are not required to add extra apt repositories."
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:154
msgid ""
"Docker is used to build the target environment. Follow the official "
"`documentation <https://docs.docker.com/install/linux/docker-ce/ubuntu/>`__ "
"for the installation."
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:157
msgid "2. Download ROS 2 source code"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:159
msgid "Then create a workspace and download the ROS 2 source code:"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:161
msgid ""
"mkdir -p ~/cc_ws/ros2_ws/src\n"
"cd ~/cc_ws/ros2_ws\n"
"wget https://raw.githubusercontent.com/ros2/ros2/release-latest/ros2.repos\n"
"vcs-import src < ros2.repos\n"
"git clone https://github.com/ros-tooling/cross_compile.git -b 0.0.1 src/ros2/"
"cross_compile\n"
"cd .."
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:171
msgid "3. Prepare the sysroot"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:173
msgid ""
"Build an arm Ubuntu image with all the ROS 2 dependencies using Docker and "
"qemu: Copy the ``qemu-static`` binary to the workspace. It will be used to "
"install the ROS 2 dependencies on the target file-system with docker."
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:177
msgid ""
"mkdir qemu-user-static\n"
"cp /usr/bin/qemu-*-static qemu-user-static"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:182
msgid ""
"The standard `setup <../../Installation/Linux-Development-Setup>`__ process "
"of ROS 2 is run inside an arm docker. This is possible thanks to ``qemu-"
"static``, which will emulate an arm machine. The base image used is an "
"Ubuntu Bionic from Docker Hub."
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:184
msgid ""
"docker build -t arm_ros2:latest -f ros2_ws/src/ros2/cross_compile/sysroot/"
"Dockerfile_ubuntu_arm .\n"
"docker run --name arm_sysroot arm_ros2:latest"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:189
msgid "Export the resulting container to a tarball and extract it:"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:191
msgid ""
"docker container export -o sysroot_docker.tar arm_sysroot\n"
"mkdir sysroot_docker\n"
"tar -C sysroot_docker -xf sysroot_docker.tar lib usr opt etc\n"
"docker rm arm_sysroot"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:198
msgid ""
"This container can be used later as virtual target to run the created file-"
"system and run the demo code."
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:201
msgid "4. Build"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:203
msgid "Set the variables used by the generic toolchain-file"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:205
msgid ""
"export TARGET_ARCH=aarch64\n"
"export TARGET_TRIPLE=aarch64-linux-gnu\n"
"export CC=/usr/bin/$TARGET_TRIPLE-gcc\n"
"export CXX=/usr/bin/$TARGET_TRIPLE-g++\n"
"export CROSS_COMPILE=/usr/bin/$TARGET_TRIPLE-\n"
"export SYSROOT=~/cc_ws/sysroot_docker\n"
"export ROS2_INSTALL_PATH=~/cc_ws/ros2_ws/install\n"
"export PYTHON_SOABI=cpython-36m-$TARGET_TRIPLE"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:216
msgid ""
"The following packages still cause errors during the cross-compilation "
"(under investigation) and must be disabled for now."
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:218
msgid ""
"touch \\\n"
"    ros2_ws/src/ros2/rviz/COLCON_IGNORE \\\n"
"    ros2_ws/src/ros-visualization/COLCON_IGNORE"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:224
msgid ""
"The ``Poco`` pre-built has a known issue where it is searching for ``libz`` "
"and ``libpcre`` on the host system instead of SYSROOT. As a workaround for "
"the moment, please link both libraries into the the host's file-system."
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:227
msgid ""
"mkdir -p /usr/lib/$TARGET_TRIPLE\n"
"ln -s `pwd`/sysroot_docker/lib/$TARGET_TRIPLE/libz.so.1 /usr/lib/"
"$TARGET_TRIPLE/libz.so\n"
"ln -s `pwd`/sysroot_docker/lib/$TARGET_TRIPLE/libpcre.so.3 /usr/lib/"
"$TARGET_TRIPLE/libpcre.so"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:233
msgid "Then, start a build with colcon specifying the toolchain-file:"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:235
msgid ""
"cd ros2_ws\n"
"\n"
"colcon build --merge-install \\\n"
"    --cmake-force-configure \\\n"
"    --cmake-args \\\n"
"        -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \\\n"
"        -DCMAKE_TOOLCHAIN_FILE=\"$(pwd)/src/ros2/cross_compile/cmake-"
"toolchains/generic_linux.cmake\" \\\n"
"        -DSECURITY=ON"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:246
msgid ""
"Done! The install and build directories will contain the cross-compiled "
"assets."
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:249
msgid "Automated Cross-compilation"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:251
msgid ""
"All the steps above are also included into a Dockerfile and can be used for "
"automation/CI."
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:253
msgid "First, download the dockerfile and build the image:"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:255
msgid ""
"wget https://raw.githubusercontent.com/ros-tooling/cross_compile/master/"
"Dockerfile_cc_for_arm\n"
"docker build -t ros2-crosscompiler:latest - < Dockerfile_cc_for_arm"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:260
msgid "Now run the image with: (it will take a while !)"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:263
msgid ""
"docker run -it --name ros2_cc \\\n"
"    -v /var/run/docker.sock:/var/run/docker.sock \\\n"
"    ros2-crosscompiler:latest"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:269
msgid ""
"..note:: The -v /var/run/docker.sock allow us to use Docker inside Docker."
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:271
msgid ""
"The result of the build will be inside the ``ros2_ws`` directory, which can "
"be exported with:"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:273
msgid "docker cp ros2_cc:/root/cc_ws/ros2_ws ."
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:278
msgid "Cross-compiling against a pre-built ROS 2"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:280
msgid ""
"It is possible to cross-compile your packages against a pre-built ROS 2. The "
"steps are similar to the previous `Cross-compiling examples for Arm`_ "
"section, with the following modifications:"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:282
msgid ""
"Instead of downloading the ROS 2 stack, just populate your workspace with "
"your package (ros2 examples on this case) and the cross-compilation assets:"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:284
msgid ""
"mkdir -p ~/cc_ws/ros2_ws/src\n"
"cd ~/cc_ws/ros2_ws/src\n"
"git clone https://github.com/ros2/examples.git\n"
"git clone https://github.com/ros-tooling/cross_compile.git -b 0.0.1\n"
"cd .."
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:292
msgid ""
"Generate and export the file-system as described in `3. Prepare the "
"sysroot`_, but with the provided ``Dockerfile_ubuntu_arm64_prebuilt``. These "
"``_prebuilt`` Dockerfile will use the `binary packages <https://index.ros."
"org/doc/ros2/Linux-Install-Debians/>`__ to install ROS 2 instead of building "
"from source."
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:294
msgid ""
"Modify the environment variable ``ROS2_INSTALL_PATH`` to point to the "
"installation directory:"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:296
msgid "export ROS2_INSTALL_PATH=~/cc_ws/sysroot_docker/opt/ros/crystal"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:300
msgid "Source the ``setup.bash`` script on the target file-system:"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:302
msgid "source $ROS2_INSTALL_PATH/setup.bash"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:306
msgid "Then, start a build with ``Colcon`` specifying the ``toolchain-file``:"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:308
msgid ""
"colcon build \\\n"
"    --merge-install \\\n"
"    --cmake-force-configure \\\n"
"    --cmake-args \\\n"
"        -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \\\n"
"        -DCMAKE_TOOLCHAIN_FILE=\"$(pwd)/src/cross_compile/cmake-toolchains/"
"generic_linux.cmake\""
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:318
msgid "Run on the target"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:320
msgid ""
"Copy the file-system on your target or use the previously built docker image:"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:322
msgid "docker run -it --rm -v `pwd`/ros2_ws:/ros2_ws arm_ros2:latest"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:326
msgid "Source the environment:"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:328
msgid "source /ros2_ws/install/local_setup.bash"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:332
msgid "Run some of the C++ or python examples:"
msgstr ""

#: ../../../source/Tutorials/Cross-compilation.rst:334
msgid ""
"ros2 run demo_nodes_cpp listener &\n"
"ros2 run demo_nodes_py talker"
msgstr ""
