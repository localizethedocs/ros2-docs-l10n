# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Open Robotics
# This file is distributed under the same license as the ros2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ros2 documentation crystal\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 06:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:4
msgid "About ROS 2 client libraries"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:7
msgid "Table of Contents"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:10
msgid "Overview"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:12
msgid ""
"Client libraries are the APIs that allow users to implement their ROS code. "
"They are what users use to get access to ROS concepts such as nodes, topics, "
"services, etc. Client libraries come in a variety of programming languages "
"so that users may write ROS code in the language that is best-suited for "
"their application. For example, you might prefer to write visualization "
"tools in Python because it makes prototyping iterations faster, while for "
"parts of your system that are concerned with efficiency, the nodes might be "
"better implemented in C++."
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:17
msgid ""
"Nodes written using different client libraries are able to share messages "
"with each other because all client libraries implement code generators that "
"provide users with the capability to interact with ROS interface files in "
"the respective language."
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:19
msgid ""
"In addition to the language-specific communication tools, client libraries "
"expose to users the core functionality that makes ROS “ROS”. For example, "
"here is a list of functionality that can typically be accessed through a "
"client library:"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:23
msgid "Names and namespaces"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:24
msgid "Time (real or simulated)"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:25
msgid "Parameters"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:26
msgid "Console logging"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:27
msgid "Threading model"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:28
msgid "Intra-process communication"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:31
msgid "Supported client libraries"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:33
msgid ""
"The C++ client library (``rclcpp``) and the Python client library "
"(``rclpy``) are both client libraries which utilize common functionality in "
"the RCL."
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:35
msgid ""
"While the C++ and Python client libraries are maintained by the core ROS 2 "
"team, members of the ROS 2 community have created additional client "
"libraries:"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:38
msgid "`JVM and Android <https://github.com/esteve/ros2_java>`__"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:39
msgid "`Objective C and iOS <https://github.com/esteve/ros2_objc>`__"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:40
msgid "`C# <https://github.com/firesurfer/rclcs>`__"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:41
msgid "`Swift <https://github.com/younata/rclSwift>`__"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:42
msgid "`Node.js <https://www.npmjs.com/package/rclnodejs>`__"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:43
msgid "`Ada <https://github.com/ada-ros/ada4ros2>`__"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:44
msgid "`_.NET Core, UWP and C# <https://github.com/esteve/ros2_dotnet>`__"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:45
msgid "`Rust <https://github.com/ros2-rust/ros2_rust>`__"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:48
msgid "Common functionality: the RCL"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:50
msgid ""
"Most of the functionality found in a client library is not specific to the "
"programming language of the client library. For example, the behavior of "
"parameters and the logic of namespaces should ideally be the same across all "
"programming languages. Because of this, rather than implementing the common "
"functionality from scratch, client libraries make use of a common core ROS "
"Client Library (RCL) interface that implements logic and behavior of ROS "
"concepts that is not language-specific. As a result, client libraries only "
"need to wrap the common functionality in the RCL with foreign function "
"interfaces. This keeps client libraries thinner and easier to develop. For "
"this reason the common RCL functionality is exposed with C interfaces as the "
"C language is typically the easiest language for client libraries to wrap."
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:57
msgid ""
"In addition to making the client libraries light-weight, an advantage of "
"having the common core is that the behavior between languages is more "
"consistent. If any changes are made to the logic/behavior of the "
"functionality in the core RCL -- namespaces, for example -- all client "
"libraries that use the RCL will have these changes reflected. Furthermore, "
"having the common core means that maintaining multiple client libraries "
"becomes less work when it comes to bug fixes."
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:61
msgid ""
"`The API documentation for the RCL can be found here. <https://docs.ros2.org/"
"latest/api/rcl/>`__"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:64
msgid "Language-specific functionality"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:66
msgid ""
"Client library concepts that require language-specific features/properties "
"are not implemented in the RCL but instead are implemented in each client "
"library. For example, threading models used by “spin” functions will have "
"implementations that are specific to the language of the client library."
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:70
msgid "Demo"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:72
msgid ""
"For a walkthrough of the message exchange between a publisher using "
"``rclpy`` and a subscriber using ``rclcpp``\\ , we encourage you to watch "
"`this ROSCon talk <https://vimeo.com/187696091>`__ starting at 17:25 `(here "
"are the slides) <https://roscon.ros.org/2016/presentations/ROSCon%202016%20-"
"%20ROS%202%20Update.pdf>`__."
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:75
msgid "Comparison to ROS 1"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:77
msgid ""
"In ROS 1, all client libraries are developed \"from the ground up\". This "
"allows for the ROS 1 Python client library to be implemented purely in "
"Python, for example, which brings benefits of such as not needing to compile "
"code. However, naming conventions and behaviors are not always consistent "
"between client libraries, bug fixes have to be done in multiple places, and "
"there is a lot of functionality that has only ever been implemented in one "
"client library (e.g. UDPROS)."
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:82
msgid "Summary"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:84
msgid ""
"By utilizing the common core ROS client library, client libraries written in "
"a variety of programming languages are easier to write and have more "
"consistent behavior."
msgstr ""
