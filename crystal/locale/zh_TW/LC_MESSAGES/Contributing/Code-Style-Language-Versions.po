# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Open Robotics
# This file is distributed under the same license as the ros2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ros2 documentation crystal\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 06:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:4
msgid "Code style and language versions"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:8
msgid "Table of Contents"
msgstr "目次表"

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:10
msgid ""
"In order to achieve a consistent looking product we will all follow "
"externally (if possible) defined style guidelines for each language. For "
"other things like package layout or documentation layout we will need to "
"come up with our own guidelines, drawing on current, popular styles in use "
"now."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:13
msgid ""
"Additionally, wherever possible, developers should use integrated tools to "
"allow them to check that these guidelines are followed in their editors. For "
"example, everyone should have a PEP8 checker built into their editor to cut "
"down on review iterations related to style."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:16
msgid ""
"Also where possible, packages should check style as part of their unit tests "
"to help with the automated detection of style issues (see `ament_lint_auto "
"<https://github.com/ament/ament_lint/blob/master/ament_lint_auto/doc/index."
"rst>`__)."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:19
msgid "C"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:22
#: ../../../source/Contributing/Code-Style-Language-Versions.rst:55
msgid "Standard"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:24
msgid "We will target C99."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:27
#: ../../../source/Contributing/Code-Style-Language-Versions.rst:60
#: ../../../source/Contributing/Code-Style-Language-Versions.rst:321
#: ../../../source/Contributing/Code-Style-Language-Versions.rst:351
#: ../../../source/Contributing/Code-Style-Language-Versions.rst:368
#: ../../../source/Contributing/Code-Style-Language-Versions.rst:417
msgid "Style"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:29
msgid ""
"We will use `Python's PEP7 <https://www.python.org/dev/peps/pep-0007/>`__ "
"for our C style guide, with some modifications and additions:"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:31
msgid ""
"We will target C99, as we do not need to support C89 (as PEP7 recommends)"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:33
msgid ""
"rationale: among other things it allows us to use both ``//`` and ``/* */`` "
"style comments"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:34
msgid "rationale: C99 is pretty much ubiquitous now"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:36
msgid "C++ style ``//`` comments are allowed"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:37
msgid ""
"Always place literals on the left-hand side of comparison operators, e.g. "
"``0 == ret`` instead of ``ret == 0``"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:39
msgid "rationale: ``ret == 0`` too easily turns into ``ret = 0`` by accident"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:41
msgid ""
"All of the following modifications only apply if we are not writing Python "
"modules:"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:43
msgid "Do not use ``Py_`` as a prefix for everything"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:45
msgid ""
"instead use a CamelCase version of the package name or other appropriate "
"prefix"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:47
msgid "The stuff about documentation strings doesn't apply"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:49
msgid ""
"We can use the `pep7 <https://github.com/mike-perdide/pep7>`__ python module "
"for style checking. The editor integration seems slim, we may need to look "
"into automated checking for C in more detail."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:52
msgid "C++"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:57
msgid ""
"We will target C++14, using new built-in C++14 features over Boost "
"equivalents wherever possible."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:63
msgid ""
"We will use the `Google C++ Style Guide <https://google.github.io/styleguide/"
"cppguide.html>`__, with some modifications:"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:66
msgid "Line Length"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:68
msgid "Our maximum line length is 100 characters."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:71
msgid "File Extensions"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:73
msgid "Header files should use the .hpp extension."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:75
#: ../../../source/Contributing/Code-Style-Language-Versions.rst:79
msgid "rationale: Allow tools to determine content of files, C++ or C."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:77
msgid "Implementation files should use the .cpp extension."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:82
msgid "Variable Naming"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:84
msgid ""
"For global variables use lowercase with underscores prefixed with ``g_``"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:86
msgid "rationale: keep variable naming case consistent across the project"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:87
msgid "rationale: easy to tell the scope of a variable at a glance"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:88
msgid "consistency across languages"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:91
msgid "Function and Method Naming"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:93
msgid ""
"Google style guide says ``CamelCase``, but the C++ std library's style of "
"``snake_case`` is also allowed"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:95
msgid "rationale: ROS 2 core packages currently use ``snake_case``"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:97
msgid ""
"reason: either an historical oversight or a personal preference that didn't "
"get checked by the linter"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:98
msgid "reason for not changing: retroactively changing would be too disruptive"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:99
msgid "other considerations:"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:101
msgid ""
"``cpplint.py`` does not check this case (hard to enforce other than with "
"review)"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:102
msgid "``snake_case`` can result in more consistency across languages"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:103
msgid "specific guidance:"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:105
msgid "for existing projects, prefer the existing style"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:106
msgid ""
"for new projects, either is acceptable, but a preference for matching "
"related existing projects is advised"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:107
msgid "final decision is always developer discretion"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:109
msgid ""
"special cases like function pointers, callable types, etc. may require "
"bending the rules"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:110
msgid "Note that classes should still use ``CamelCase`` by default"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:113
msgid "Access Control"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:115
msgid ""
"Drop requirement for all class members to be private and therefore require "
"accessors"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:117
msgid "rationale: this is overly constraining for user API design"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:118
msgid ""
"we should prefer private members, only making them public when they are "
"needed"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:119
msgid ""
"we should consider using accessors before choosing to allow direct member "
"access"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:120
msgid ""
"we should have a good reason for allowing direct member access, other than "
"because it is convenient for us"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:123
msgid "Exceptions"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:125
msgid "Exceptions are allowed"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:127
msgid ""
"rationale: this is a new code base, so the legacy argument doesn't apply to "
"us"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:128
msgid ""
"rationale: for user-facing API's it is more idiomatic C++ to have exceptions"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:129
msgid "Exceptions in destructors should be explicitly avoided"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:131
msgid ""
"We should consider avoiding Exceptions if we intend to wrap the resulting "
"API in C"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:133
msgid "rationale: it will make it easier to wrap in C"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:134
msgid ""
"rationale: most of our dependencies in code we intend to wrap in C do not "
"use exceptions anyways"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:137
msgid "Function-like Objects"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:139
msgid "No restrictions on Lambda's or ``std::function`` or ``std::bind``"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:142
msgid "Boost"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:144
msgid "Boost should be avoided until absolutely required"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:147
msgid "Comments and Doc Comments"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:149
msgid ""
"Use ``///`` and ``/** */`` comments for *documentation* purposes and ``//`` "
"style comments for notes and general comments"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:151
msgid ""
"Class and Function comments should use ``///`` and ``/** */`` style comments"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:152
msgid "rationale: these are recommended for Doxygen and Sphinx in C/C++"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:153
msgid ""
"rationale: mixing ``/* */`` and ``//`` is convenient for block commenting "
"out code which contains comments"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:154
msgid ""
"Descriptions of how the code works or notes within classes and functions "
"should use ``//`` style comments"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:157
msgid "Pointer Syntax Alignment"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:159
msgid ""
"Use ``char * c;`` instead of ``char* c;`` or ``char *c;`` because of this "
"scenario ``char* c, *d, *e;``"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:162
msgid "Class Privacy Keywords"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:164
msgid ""
"Do not put 1 space before ``public:``, ``private:``, or ``protected:``, it "
"is more consistent for all indentions to be a multiple of 2"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:166
msgid ""
"rationale: most editors don't like indentions which are not a multiple of "
"the (soft) tab size"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:167
msgid ""
"Use zero spaces before ``public:``, ``private:``, or ``protected:``, or 2 "
"spaces"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:168
msgid ""
"If you use 2 spaces before, indent other class statements by 2 additional "
"spaces"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:169
msgid ""
"Prefer zero spaces, i.e. ``public:``, ``private:``, or ``protected:`` in the "
"same column as the class"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:172
msgid "Nested Templates"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:174
msgid "Never add whitespace to nested templates"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:176
msgid ""
"Prefer ``set<list<string>>`` (C++11 feature) to ``set<list<string> >`` or "
"``set< list<string> >``"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:179
msgid "Always Use Braces"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:181
msgid ""
"Always use braces following ``if``, ``else``, ``do``, ``while``, and "
"``for``, even when the body is a single line."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:183
msgid ""
"rationale: less opportunity for visual ambiguity and for complications due "
"to use of macros in the body"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:186
msgid "Open Versus Cuddled Braces"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:188
msgid ""
"Use open braces for ``function``, ``class``, and ``struct`` definitions, but "
"cuddle braces on ``if``, ``else``, ``while``, ``for``, etc..."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:190
msgid ""
"Exception: when an ``if`` (or ``while``, etc.) condition is long enough to "
"require line-wrapping, then use an open brace (i.e., don't cuddle)."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:192
msgid ""
"When a function call cannot fit on one line, wrap at the open parenthesis "
"(not in between arguments) and start them on the next line with a 2-space "
"indent.  Continue with the 2-space indent on subsequent lines for more "
"arguments.  (Note that the `Google style guide <https://google.github.io/"
"styleguide/cppguide.html#Function_Calls>`__ is internally contradictory on "
"this point.)"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:194
msgid ""
"Same goes for ``if`` (and ``while``, etc.) conditions that are too long to "
"fit on one line."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:197
msgid "Examples"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:199
#: ../../../source/Contributing/Code-Style-Language-Versions.rst:254
msgid "This is OK:"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:201
msgid ""
"int main(int argc, char **argv)\n"
"{\n"
"  if (condition) {\n"
"    return 0;\n"
"  } else {\n"
"    return 1;\n"
"  }\n"
"}\n"
"\n"
"if (this && that || both) {\n"
"  ...\n"
"}\n"
"\n"
"// Long condition; open brace\n"
"if (\n"
"  this && that || both && this && that || both && this && that || both && "
"this && that)\n"
"{\n"
"  ...\n"
"}\n"
"\n"
"// Short function call\n"
"call_func(foo, bar);\n"
"\n"
"// Long function call; wrap at the open parenthesis\n"
"call_func(\n"
"  foo, bar, foo, bar, foo, bar, foo, bar, foo, bar, foo, bar, foo, bar, foo, "
"bar, foo, bar,\n"
"  foo, bar, foo, bar, foo, bar, foo, bar, foo, bar, foo, bar, foo, bar, foo, "
"bar, foo, bar);\n"
"\n"
"// Very long function argument; separate it for readability\n"
"call_func(\n"
"  bang,\n"
"  fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo,\n"
"  bar, bat);"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:237
msgid "This is **not** OK:"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:239
msgid ""
"int main(int argc, char **argv) {\n"
"  return 0;\n"
"}\n"
"\n"
"if (this &&\n"
"    that ||\n"
"    both) {\n"
"  ...\n"
"}"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:252
msgid ""
"Use open braces rather than excessive indention, e.g. for distinguishing "
"constructor code from constructor initializer lists"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:256
msgid ""
"ReturnType LongClassName::ReallyReallyReallyLongFunctionName(\n"
"  Type par_name1,  // 2 space indent\n"
"  Type par_name2,\n"
"  Type par_name3)\n"
"{\n"
"  DoSomething();  // 2 space indent\n"
"  ...\n"
"}\n"
"\n"
"MyClass::MyClass(int var)\n"
": some_var_(var),\n"
"  some_other_var_(var + 1)\n"
"{\n"
"  ...\n"
"  DoSomething();\n"
"  ...\n"
"}"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:276
msgid "This is **not** OK, even weird (the google way?):"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:278
msgid ""
"ReturnType LongClassName::ReallyReallyReallyLongFunctionName(\n"
"    Type par_name1,  // 4 space indent\n"
"    Type par_name2,\n"
"    Type par_name3) {\n"
"  DoSomething();  // 2 space indent\n"
"  ...\n"
"}\n"
"\n"
"MyClass::MyClass(int var)\n"
"    : some_var_(var),             // 4 space indent\n"
"      some_other_var_(var + 1) {  // lined up\n"
"  ...\n"
"  DoSomething();\n"
"  ...\n"
"}"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:297
msgid "Linters"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:299
msgid ""
"Most of these styles and restrictions can be checked with a combination of "
"Google's `cpplint.py <http://google-styleguide.googlecode.com/svn/trunk/"
"cpplint/>`__ and `uncrustify <https://github.com/uncrustify/uncrustify>`__, "
"though we may need to modify them slightly for our above changes."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:301
msgid "We provide command line tools with custom configurations:"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:303
msgid ""
"`ament_cpplint <https://github.com/ament/ament_lint/blob/master/"
"ament_cpplint/doc/index.rst>`__"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:304
msgid ""
"`ament_uncrustify <https://github.com/ament/ament_lint/blob/master/"
"ament_uncrustify/doc/index.rst>`__: `configuration <https://github.com/ament/"
"ament_lint/blob/master/ament_uncrustify/ament_uncrustify/configuration/"
"ament_code_style.cfg>`__"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:306
msgid ""
"We also run other tools to detect and eliminate as many warnings as "
"possible. Here's a non-exhaustive list of additional things we try to do on "
"all of our packages:"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:309
msgid "use compiler flags like ``-Wall -Wextra -Wpedantic``"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:310
msgid ""
"run static code analysis like ``cppcheck``, which we have integrated in "
"`ament_cppcheck <https://github.com/ament/ament_lint/blob/master/"
"ament_cppcheck/doc/index.rst>`__."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:313
msgid "Python"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:316
#: ../../../source/Contributing/Code-Style-Language-Versions.rst:346
#: ../../../source/Contributing/Code-Style-Language-Versions.rst:412
msgid "Version"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:318
msgid "We will target Python 3 for our development."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:323
msgid ""
"We will use the `PEP8 guidelines <https://www.python.org/dev/peps/pep-0008/"
">`_ for code format."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:325
msgid ""
"We chose the following more precise rule where PEP 8 leaves some freedom:"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:327
msgid ""
"`We allow up to 100 characters per line (fifth paragraph) <https://www."
"python.org/dev/peps/pep-0008/#maximum-line-length>`_."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:328
msgid ""
"`We pick single quotes over double quotes as long as no escaping is "
"necessary <https://www.python.org/dev/peps/pep-0008/#string-quotes>`_."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:329
msgid ""
"`We prefer hanging indents for continuation lines <https://www.python.org/"
"dev/peps/pep-0008/#indentation>`_."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:331
msgid ""
"Tools like the ``(ament_)pycodestyle`` Python package should be used in unit-"
"test and/or editor integration for checking Python code style."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:333
msgid ""
"The pycodestyle configuration used in the linter is `here <https://github."
"com/ament/ament_lint/blob/master/ament_pycodestyle/ament_pycodestyle/"
"configuration/ament_pycodestyle.ini>`__."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:335
msgid "Integration with editors:"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:337
msgid "atom: https://atom.io/packages/linter-pycodestyle"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:338
msgid "emacs: http://kwbeam.com/emacs-for-python-i.html"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:339
msgid "Sublime Text: https://sublime.wbond.net/packages/SublimeLinter-flake8"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:340
msgid "vim: https://github.com/nvie/vim-flake8"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:343
msgid "CMake"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:348
msgid "We will target CMake 3.5."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:353
msgid ""
"Since there is not an existing CMake style guide we will define our own:"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:355
msgid "Use lowercase command names (``find_package``, not ``FIND_PACKAGE``)."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:356
msgid "Use ``snake_case`` identifiers (variables, functions, macros)."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:357
msgid "Use empty ``else()`` and ``end...()`` commands."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:358
msgid "No whitespace before ``(``\\ 's."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:359
msgid "Use two spaces of indention, do not use tabs."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:360
msgid ""
"Do not use aligned indentation for parameters of multi-line macro "
"invocations. Use two spaces only."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:361
msgid "Prefer functions with ``set(PARENT_SCOPE)`` to macros."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:362
msgid ""
"When using macros prefix local variables with ``_`` or a reasonable prefix."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:365
msgid "Markdown / reStructured Text / docblocks"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:370
msgid ""
"The following rules to format text is intended to increase readability as "
"well as versioning."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:372
msgid ""
"*[.md, .rst only]* Each section title should be preceded by one empty line "
"and succeeded by one empty line."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:374
msgid ""
"Rationale: It expedites to get an overview about the structure when "
"screening the document."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:376
msgid ""
"*[.rst only]* In reStructured Text the headings should follow the hierarchy "
"described in the `Sphinx style guide <https://documentation-style-guide-"
"sphinx.readthedocs.io/en/latest/style-guide.html#headings>`__:"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:378
msgid "``#`` with overline (only once, used for the document title)"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:379
msgid "``*`` with overline"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:380
msgid "``=``"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:381
msgid "``-``"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:382
msgid "``^``"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:383
msgid "``\"``"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:384
msgid ""
"Rationale: A consistent hierarchy expedites getting an idea about the "
"nesting level when screening the document."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:386
msgid ""
"*[.md only]* In Markdown the headings should follow the ATX-style described "
"in the `Markdown syntax documentation <https://daringfireball.net/projects/"
"markdown/syntax#header>`__"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:388
msgid ""
"ATX-style headers use 1-6 hash characters (``#``) at the start of the line "
"to denote header levels 1-6."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:389
msgid ""
"A space between the hashes and the header title should be used (such as ``# "
"Heading 1``) to make it easier to visually separate them."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:390
msgid ""
"Justification for the ATX-style preference comes from the `Google Markdown "
"style guide <https://github.com/google/styleguide/blob/gh-pages/docguide/"
"style.md#atx-style-headings>`__"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:391
msgid ""
"Rationale: ATX-style headers are easier to search and maintain, and make the "
"first two header levels consistent with the other levels."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:393
msgid "*[any]* Each sentence must start on a new line."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:395
msgid ""
"Rationale: For longer paragraphs a single change in the beginning makes the "
"diff unreadable since it carries forward through the whole paragraph."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:397
msgid ""
"*[any]* Each sentence can optionally be wrapped to keep each line short."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:398
msgid "*[any]* The lines should not have any trailing white spaces."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:399
msgid ""
"*[.md, .rst only]* A code block must be preceded and succeeded by an empty "
"line."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:401
msgid ""
"Rationale: Whitespace is significant only directly before and directly after "
"fenced code blocks. Following these instructions will ensure that "
"highlighting works properly and consistently."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:404
msgid ""
"*[.md, .rst only]* A code block should specify a syntax (e.g. ``bash``)."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:407
msgid "Javascript"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:409
msgid "*(Speculative, not yet used)*"
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:414
msgid ""
"We will target Javascript 1.5, which seems to provide the best balance of "
"support in browsers and languages (node.js) and new features."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:419
msgid ""
"We will use the `airbnb Javascript Style guide <https://github.com/airbnb/"
"javascript>`__."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:421
msgid ""
"The repository referred to above comes with a ``jshintrc`` file which allows "
"the style to be enforced using ``jshint``."
msgstr ""

#: ../../../source/Contributing/Code-Style-Language-Versions.rst:423
msgid ""
"Editor integration for ``jshint`` include ``vim``, ``emacs``, ``Sublime "
"Text``, and others can be found `here <http://www.jshint.com/install/>`__."
msgstr ""
