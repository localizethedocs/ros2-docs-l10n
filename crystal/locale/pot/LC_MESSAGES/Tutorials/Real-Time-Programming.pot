# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Open Robotics
# This file is distributed under the same license as the ros2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ros2 documentation crystal\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 06:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/Tutorials/Real-Time-Programming.rst:6
msgid "Real-time programming in ROS 2"
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:10
msgid "Table of Contents"
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:13
msgid "Background"
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:15
msgid ""
"Real-time computing is a key feature of many robotics systems, particularly "
"safety- and mission-critical applications such as autonomous vehicles, "
"spacecrafts, and industrial manufacturing. We are designing and prototyping "
"ROS 2 with real-time performance constraints in mind, since this is a "
"requirement that was not considered in the early stages of ROS 1 and it is "
"now intractable to refactor ROS 1 to be real-time friendly."
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:18
msgid ""
"`This document <https://design.ros2.org/articles/realtime_background."
"html>`__ outlines the requirements of real-time computing and best practices "
"for software engineers.  In short:"
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:20
msgid ""
"To make a real-time computer system, our real-time loop must update "
"periodically to meet deadlines. We can only tolerate a small margin of error "
"on these deadlines (our maximum allowable jitter). To do this, we must avoid "
"nondeterministic operations in the execution path, things like: pagefault "
"events, dynamic memory allocation/deallocation, and synchronization "
"primitives that block indefinitely."
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:24
msgid ""
"A classic example of a controls problem commonly solved by real-time "
"computing is balancing an `inverted pendulum <https://en.wikipedia.org/wiki/"
"Inverted_pendulum>`__. If the controller blocked for an unexpectedly long "
"amount of time, the pendulum would fall down or go unstable. But if the "
"controller reliably updates at a rate faster than the motor controlling the "
"pendulum can operate, the pendulum will successfully adapt react to sensor "
"data to balance the pendulum."
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:28
msgid ""
"Now that you know everything about real-time computing, let's try a demo!"
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:31
msgid "Install and run the demo"
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:33
msgid ""
"The real-time demo was written with Linux operating systems in mind, since "
"many members of the ROS community doing real-time computing use Xenomai or "
"RT_PREEMPT as their real-time solutions. Since many of the operations done "
"in the demo to optimize performance or OS-specific, the demo only builds and "
"runs on Linux systems. **So, if you are an OSX or Windows user, don't try "
"this part!**"
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:37
msgid ""
"Also this must be built from source using a the static DDS API. **Currently "
"the only supported implementation is Connext**."
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:39
msgid ""
"First, follow the instructions to build ROS 2 `from source <../Installation/"
"Linux-Development-Setup>` using Connext DDS as the middleware."
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:42
msgid "Run the tests"
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:44
msgid ""
"**Before you run make sure you have at least 8Gb of RAM free. With the "
"memory locking, swap will not work anymore.**"
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:46
msgid "Source your ROS 2 setup.bash."
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:48
msgid ""
"Run the demo binary, and redirect the output. You may want to use ``sudo`` "
"in case you get permission error:"
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:50
msgid "pendulum_demo > output.txt"
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:55
msgid "What the heck just happened?"
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:57
msgid ""
"First, even though you redirected stdout, you will see some output to the "
"console (from stderr):"
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:61
msgid ""
"mlockall failed: Cannot allocate memory\n"
"Couldn't lock all cached virtual memory.\n"
"Pagefaults from reading pages not yet mapped into RAM will be recorded."
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:65
msgid ""
"After the initialization stage of the demo program, it will attempt to lock "
"all cached memory into RAM and prevent future dynamic memory allocations "
"using ``mlockall``. This is to prevent pagefaults from loading lots of new "
"memory into RAM. (See `the realtime design article <https://design.ros2.org/"
"articles/realtime_background.html#memory-management>`__ for more "
"information.)"
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:69
msgid ""
"The demo will continue on as usual when this occurs. At the bottom of the "
"output.txt file generated by the demo, you'll see the number of pagefaults "
"encountered during execution:"
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:74
msgid ""
"rttest statistics:\n"
"  - Minor pagefaults: 20\n"
"  - Major pagefaults: 0"
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:78
msgid "If we want those pagefaults to go away, we'll have to..."
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:81
msgid "Adjust permissions for memory locking"
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:83
#: ../../../source/Tutorials/Real-Time-Programming.rst:178
msgid "Add to ``/etc/security/limits.conf`` (as sudo):"
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:87
msgid "<your username>    -   memlock   <limit in kB>"
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:89
msgid ""
"A limit of ``-1`` is unlimited. If you choose this, you may need to "
"accompany it with ``ulimit -l unlimited`` after editing the file."
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:92
msgid ""
"After saving the file, log out and log back in. Then rerun the "
"``pendulum_demo`` invocation."
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:95
msgid ""
"You'll either see zero pagefaults in your output file, or an error saying "
"that a bad_alloc exception was caught. If this happened, you didn't have "
"enough free memory available to lock the memory allocated for the process "
"into RAM. You'll need to install more RAM in your computer to see zero "
"pagefaults!"
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:100
msgid "Output overview"
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:102
msgid "To see more output, we have to run the ``pendulum_logger`` node."
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:104
msgid "In one shell with your ``install/setup.bash`` sourced, invoke:"
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:106
msgid "pendulum_logger"
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:111
msgid "You should see the output message:"
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:115
msgid "Logger node initialized."
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:117
msgid ""
"In another shell with setup.bash sourced, invoke ``pendulum_demo`` again."
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:119
msgid ""
"As soon as this executable starts, you should see the other shell constantly "
"printing output:"
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:123
msgid ""
"Commanded motor angle: 1.570796\n"
"Actual motor angle: 1.570796\n"
"Mean latency: 210144.000000 ns\n"
"Min latency: 4805 ns\n"
"Max latency: 578137 ns\n"
"Minor pagefaults during execution: 0\n"
"Major pagefaults during execution: 0"
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:131
msgid ""
"The demo is controlling a very simple inverted pendulum simulation. The "
"pendulum simulation calculates its position in its own thread. A ROS node "
"simulates a motor encoder sensor for the pendulum and publishes its "
"position. Another ROS node acts as a simple PID controller and calculates "
"the next command message."
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:136
msgid ""
"The logger node periodically prints out the pendulum's state and the runtime "
"performance statistics of the demo during its execution phase."
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:138
msgid ""
"After the ``pendulum_demo`` is finished, you'll have to CTRL-C out of the "
"logger node to exit."
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:141
msgid "Latency"
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:143
msgid ""
"At the ``pendulum_demo`` execution, you'll see the final statistics "
"collected for the demo:"
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:147
msgid ""
"rttest statistics:\n"
"  - Minor pagefaults: 0\n"
"  - Major pagefaults: 0\n"
"  Latency (time after deadline was missed):\n"
"    - Min: 3354 ns\n"
"    - Max: 2752187 ns\n"
"    - Mean: 19871.8 ns\n"
"    - Standard deviation: 1.35819e+08\n"
"\n"
"PendulumMotor received 985 messages\n"
"PendulumController received 987 messages"
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:159
msgid ""
"The latency fields show you the minimum, maximum, and average latency of the "
"update loop in nanoseconds. Here, latency means the amount of time after the "
"update was expected to occur."
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:162
msgid ""
"The requirements of a real-time system depend on the application, but let's "
"say in this demo we have a 1KHz (1 millisecond) update loop, and we're "
"aiming for a maximum allowable latency of 5% of our update period."
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:164
msgid ""
"So, our average latency was really good in this run, but the maximum latency "
"was unacceptable because it actually exceeded our update loop! What happened?"
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:166
msgid ""
"We may be suffering from a non-deterministic scheduler. If you're running a "
"vanilla Linux system and you don't have the RT_PREEMPT kernel installed, you "
"probably won't be able to meet the real-time goal we set for ourselves, "
"because the Linux scheduler won't allow you to arbitrarily pre-empt threads "
"at the user level."
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:169
msgid ""
"See the `realtime design article <https://github.com/ros2/design/blob/gh-"
"pages/articles/realtime#multithreaded-programming-and-synchronization>`__ "
"for more information."
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:171
msgid ""
"The demo attempts to set the scheduler and thread priority of the demo to be "
"suitable for real-time performance. If this operation failed, you'll see an "
"error message: \"Couldn't set scheduling priority and policy: Operation not "
"permitted\". You can get slightly better performance by following the "
"instructions in the next section:"
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:176
msgid "Setting permissions for the scheduler"
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:182
msgid "<your username>    -   rtprio   98"
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:184
msgid ""
"The range of the rtprio (real-time priority) field is 0-99. However, do NOT "
"set the limit to 99 because then your processes could interfere with "
"important system processes that run at the top priority (e.g. watchdog). "
"This demo will attempt to run the control loop at priority 98."
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:189
msgid "Plotting results"
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:191
msgid ""
"You can plot the latency and pagefault statistics that are collected in this "
"demo after the demo runs."
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:193
msgid ""
"Because the code has been instrumented with `rttest <https://github.com/ros2/"
"rttest>`__, there are useful command line tools available to us:"
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:195
msgid ""
"-i Specify how many iterations to run the real-time loop. Default is 1000."
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:198
msgid ""
"-u Specify the update period. Default units are microseconds. Use the suffix "
"\"s\" for seconds, \"ms\" for milliseconds, \"us\" for microseconds, and "
"\"ns\" for nanoseconds. Default update period is 1ms."
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:203
msgid "-f Specify the name of the file for writing the collected data."
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:205
msgid "Run the demo again with the name a file to save results to:"
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:207
msgid "pendulum_demo -f pendulum_demo_results"
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:211
msgid "Then run the ``rttest_plot`` script on the resulting file:"
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:213
msgid "rttest_plot pendulum_demo_results"
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:217
msgid "This script will produce three files:"
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:221
msgid ""
"pendulum_demo_results_plot_latency.svg\n"
"pendulum_demo_results_plot_majflts.svg\n"
"pendulum_demo_results_plot_minflts.svg"
msgstr ""

#: ../../../source/Tutorials/Real-Time-Programming.rst:225
msgid "You can view these plots in an image viewer of your choice."
msgstr ""
