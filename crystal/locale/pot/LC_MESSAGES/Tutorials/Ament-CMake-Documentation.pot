# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Open Robotics
# This file is distributed under the same license as the ros2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ros2 documentation crystal\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 06:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:2
msgid "ament_cmake user documentation"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:4
msgid ""
"ament_cmake is the build system for CMake based packages in ROS 2 (in "
"particular, it will be used for most if not all C/C++ projects). It is a set "
"of scripts enhancing CMake and adding convenience functionality for package "
"authors. Knowing the basics of `CMake <https://cmake.org/cmake/help/v3.5/"
">`__ will be very helpful, an official tutorial can be found `here <https://"
"cmake.org/cmake-tutorial/>`__."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:10
msgid "Table of Contents"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:13
msgid "Basics"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:15
msgid ""
"A basic CMake outline can be produced using ``ros2 pkg create "
"<package_name>`` on the command line. The basic build information is then "
"gathered in two files: the ``package.xml`` and the ``CMakeLists.txt``. The "
"``package.xml`` must contain all dependencies and a bit of metadata to allow "
"colcon to find the correct build order for your packages, to install the "
"required dependencies in CI as well as provide the information for a release "
"with ``bloom``. The ``CMakeLists.txt`` contains the commands to build and "
"package executables and libraries and will be the main focus of this "
"document."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:21
msgid "Basic project outline"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:23
msgid ""
"The basic outline of the ``CMakeLists.txt`` of an ament package contains:"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:25
msgid ""
"cmake_minimum_required(VERSION 3.5)\n"
"project(my_project)\n"
"\n"
"ament_package()"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:32
msgid ""
"The argument to ``project`` will be the package name and must be identical "
"to the package name in the ``package.xml``."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:34
msgid ""
"The project setup is done by ``ament_package()`` and this call must occur "
"exactly once per package. ``ament_package()`` installs the ``package.xml``, "
"registers the package with the ament index, and installs config (and "
"possibly target) files for CMake so that it can be found by other packages "
"using ``find_package``. Since ``ament_package()`` gathers a lot of "
"information from the ``CMakeLists.txt`` it should be the last call in your "
"``CMakeLists.txt``. Although it is possible to follow calls to "
"``ament_package()`` by calls to ``install`` functions copying files and "
"directories, it is simpler to just keep ``ament_package()`` the last call."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:39
msgid "``ament_package`` can be given additional arguments:"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:41
msgid ""
"``CONFIG_EXTRAS``: a list of CMake files (``.cmake`` or ``.cmake.in`` "
"templates expanded by ``configure_file()``) which should be available to "
"clients of the package. For an example of when to use these arguments, see "
"the discussion in `Adding resources`_. For more information on how to use "
"template files, see `the official documentation <https://cmake.org/cmake/"
"help/v3.5/command/configure_file.html>`__."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:45
msgid ""
"``CONFIG_EXTRAS_POST``: same as ``CONFIG_EXTRAS``, but the order in which "
"the files are added differs. While ``CONFIG_EXTRAS`` files are included "
"before the files generated for the ``ament_export_*`` calls the files from "
"``CONFIG_EXTRAS_POST`` are included afterwards."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:48
msgid ""
"Instead of adding to ``ament_package``, you can also add to the variable "
"``${PROJECT_NAME}_CONFIG_EXTRAS`` and ``${PROJECT_NAME}_CONFIG_EXTRAS_POST`` "
"with the same effect. The only difference is again the order in which the "
"files are added with the following total order:"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:51
msgid "files added by ``CONFIG_EXTRAS``"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:53
msgid "files added by appending to ``${PROJECT_NAME}_CONFIG_EXTRAS``"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:55
msgid "files added by appending to ``${PROJECT_NAME}_CONFIG_EXTRAS_POST``"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:57
msgid "files added by ``CONFIG_EXTRAS_POST``"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:60
msgid "Adding files and headers"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:62
msgid ""
"There are two main targets to build: libraries and executables which are "
"built by ``add_library`` and ``add_executable`` respectively."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:64
msgid ""
"With the separation of header files and implementation in C/C++, it is not "
"always necessary to add both files as argument to ``add_library``/ "
"``add_executable``."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:66
msgid "The following best practice is proposed:"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:68
msgid ""
"if you are building a library, put all headers which should be usable by "
"clients and therefore must be installed into a subdirectory of the "
"``include`` folder named like the package, while all other files (``.c/."
"cpp`` and header files which should not be exported) are inside the ``src`` "
"folder."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:70
msgid ""
"only cpp files are explicitly referenced in the call to ``add_library`` or "
"``add_executable``"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:72
msgid "allow to find headers via"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:74
msgid ""
"target_include_directories(my_target\n"
"  PUBLIC\n"
"    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n"
"    $<INSTALL_INTERFACE:include>)"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:81
msgid ""
"This adds all files in the folder ``${CMAKE_CURRENT_SOURCE_DIR}/include`` to "
"the public interface during build time and all files in the include folder "
"(relative to ``${CMAKE_INSTALL_DIR}``) when being installed."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:83
msgid ""
"In principle, using generator expressions here is not necessary if both "
"folders are called ``include`` and top-level with respect to "
"``${CMAKE_CURRENT_SOURCE_DIR}`` and ``${CMAKE_INSTALL_DIR}``, but it is very "
"common."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:86
msgid "Adding Dependencies"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:88
msgid "There are two ways to link your packages against a new dependency."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:90
msgid ""
"The first and recommended way is to use the ament macro "
"``ament_target_dependencies``. As an example, suppose we want to link "
"``my_target`` against the linear algebra library Eigen3."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:93
msgid ""
"find_package(Eigen3 REQUIRED)\n"
"ament_target_dependencies(my_target Eigen3)"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:98
msgid ""
"It includes the necessary headers and libraries and their dependencies to be "
"correctly found by the project. It will also ensure that the include "
"directories of all dependencies are ordered correctly when using overlay "
"workspaces."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:101
msgid "The second way is to use ``target_link_libraries``."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:103
msgid ""
"The recommended way in modern CMake is to only use targets, exporting and "
"linking against them. CMake targets are namespaced, similar to C++. For "
"instance, ``Eigen3`` defines the target ``Eigen3::Eigen``."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:107
msgid ""
"At least until ``Crystal Clemmys`` target names are not supported in the "
"``ament_target_dependencies`` macro. Sometimes it will be necessary to call "
"the ``target_link_libaries`` CMake function. In the example of Eigen3, the "
"call should then look like"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:111
msgid ""
"find_package(Eigen3 REQUIRED)\n"
"target_link_libraries(my_target Eigen3::Eigen)"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:116
msgid ""
"This will also include necessary headers, libraries and their dependencies, "
"but in contrast to ``ament_target_dependencies`` it might not correctly "
"order the dependencies when using overlay workspaces."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:120
msgid ""
"It should never be necessary to ``find_package`` a library that is not "
"explicitly needed but is a dependency of another dependency that is "
"explicitly needed. If that is the case, file a bug against the corresponding "
"package."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:124
msgid "Building a Library"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:126
msgid ""
"When building a reusable library, some information needs to be exported for "
"downstream packages to easily use it."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:128
msgid ""
"ament_export_interfaces(export_my_library HAS_LIBRARY_TARGET)\n"
"ament_export_dependencies(some_dependency)\n"
"\n"
"install(\n"
"  DIRECTORY include/\n"
"  DESTINATION include\n"
")\n"
"\n"
"install(\n"
"  TARGETS my_library\n"
"  EXPORT export_my_library\n"
"  LIBRARY DESTINATION lib\n"
"  ARCHIVE DESTINATION lib\n"
"  RUNTIME DESTINATION bin\n"
"  INCLUDES DESTINATION include\n"
")"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:147
msgid ""
"Here, we assume that the folder ``include`` contains the headers which need "
"to be exported. Note that it is not necessary to put all headers into a "
"separate folder, only those that should be included by clients."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:150
msgid "Here is what's happening in the snippet above:"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:152
msgid ""
"The ``ament_export_interfaces`` macro exports the targets for CMake. This is "
"necessary to allow your library's clients to use the "
"``target_link_libraries(client my_library::my_library)`` syntax. "
"``ament_export_targets`` can take an arbitrary list of targets named as "
"``EXPORT`` in an install call and an additional option "
"``HAS_LIBRARY_TARGET``, which adds potential libraries to environment "
"variables."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:156
msgid ""
"The ``ament_export_dependencies`` exports dependencies to downstream "
"packages. This is necessary so that the user of the library does not have to "
"call ``find_package`` for those dependencies, too."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:159
msgid ""
"The first ``install`` commands installs the header files which should be "
"available to clients."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:163
msgid ""
"Calling ``ament_export_targets``, ``ament_export_dependencies``, or other "
"ament commands from a CMake subdirectory will not work as expected. This is "
"because the CMake subdirectory has no way of setting necessary variables in "
"the parent scope where ``ament_package`` is called."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:166
msgid ""
"The last large install command installs the library. Archives and library "
"files will be exported to the lib folder, runtime binaries will be installed "
"to the bin folder and the path to installed headers is ``include``."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:171
msgid ""
"Windows dlls are treated as runtime artifacts and installed into the "
"``RUNTIME DESTINATION`` folder. It is therefore advised to not leave out the "
"``RUNTIME`` install even when developing libraries on Unix based systems."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:174
msgid ""
"Regarding the ``include directory``, the install command only adds "
"information to CMake, it does not actually install the includes folder. This "
"is done by copying the headers via ``install(DIRECTORY <dir> DESTINATION "
"<dest>)`` as described above."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:177
msgid ""
"The ``EXPORT`` notation of the install call requires additional attention: "
"It installs the CMake files for the ``my_library`` target. It is named "
"exactly like the argument in ``ament_export_targets`` and could be named "
"like the library. However, this will then prohibit using the "
"``ament_target_dependencies`` way of including your library. To allow for "
"full flexibility, it is advised to prepend the export target with something "
"like ``export_<target>``."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:183
msgid ""
"All install paths are relative to ``CMAKE_INSTALL_PREFIX``, which is already "
"set correctly by colcon/ament"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:185
msgid ""
"There are two additional functions which can be used but are superfluous for "
"target based installs:"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:187
msgid ""
"ament_export_include_directories(include)\n"
"ament_export_libraries(my_library)"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:192
msgid ""
"The first macro marks the directory of the exported include directories "
"(this is achieved by ``INCLUDES DESTINATION`` in the target ``install`` "
"call). The second macro marks the location of the installed library (this is "
"done by the ``HAS_LIBRARY_TARGET`` argument in the call to "
"``ament_export_targets``)."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:195
msgid ""
"Some of the macros can take different types of arguments for non-target "
"exports, but since the recommended way for modern Make is to use targets, we "
"will not cover them here. Documentation of these options can be found in the "
"source code itself."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:199
msgid "Compiler and linker options"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:201
msgid ""
"ROS 2 targets compilers which comply with the C++14 and C99 standard until "
"at least ``Crystal Clemmys``. Newer versions might be targeted in the future "
"and are referenced `here <https://www.ros.org/reps/rep-2000.html>`__. "
"Therefore it is customary to set the corresponding CMake flags:"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:205
msgid ""
"if(NOT CMAKE_C_STANDARD)\n"
"  set(CMAKE_C_STANDARD 99)\n"
"endif()\n"
"if(NOT CMAKE_CXX_STANDARD)\n"
"  set(CMAKE_CXX_STANDARD 14)\n"
"endif()"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:214
msgid ""
"To keep the code clean, compilers should throw warnings for questionable "
"code and these warnings should be fixed."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:216
msgid "It is recommended to at least cover the following warning levels:"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:218
msgid "For Visual Studio, the default ``W1`` warnings are kept"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:220
msgid ""
"For GCC and Clang: ``-Wall -Wextra -Wpedantic`` are required and ``-Wshadow -"
"Werror`` are advisable (the latter makes warnings errors)."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:222
msgid ""
"Although modern CMake advises to add compiler flags on a target basis, i.e. "
"call"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:224
msgid "target_compile_options(my_target PRIVATE -Wall)"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:228
msgid ""
"it is at the moment recommended to use the directory level function "
"``add_compile_options(-Wall)`` to not clutter the code with target-based "
"compile options for all executables and tests."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:231
msgid "Building libraries on Windows"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:233
msgid ""
"Since Linux, Mac and Windows are all officially supported platforms, to have "
"maximum impact any package should also build on Windows. The Windows library "
"format enforces symbol visibility: Every symbol which should be used from a "
"client has to be explicitly exported by the library (and data symbols need "
"to be implicitly imported)."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:237
msgid ""
"To keep this compatible with Clang and GCC builds, it is advised to use the "
"logic in `the GCC wiki <https://gcc.gnu.org/wiki/Visibility>`__. To use it "
"for a package called ``my_library``:"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:240
msgid ""
"Copy the logic in the link into a header file called ``visibility_control."
"hpp``."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:242
msgid ""
"Replace ``DLL`` by ``MY_LIBRARY`` (for an example, see visibility control of "
"`rviz_rendering <https://github.com/ros2/rviz/blob/ros2/rviz_rendering/"
"include/rviz_rendering/visibility_control.hpp>`__)."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:244
msgid ""
"Use the macros \"MY_LIBRARY_PUBLIC\" for all symbols you need to export (i."
"e. classes or functions)."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:246
msgid "In the project ``CMakeLists.txt`` use:"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:248
msgid ""
"target_compile_definitions(my_library PRIVATE "
"\"MY_LIBRARY_BUILDING_LIBRARY\")"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:253
msgid "Testing and Linting"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:255
msgid ""
"In order to separate testing from building the library with colcon, wrap all "
"calls to linters and tests in a conditional:"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:257
msgid ""
"if(BUILD_TESTING)\n"
"  find_package(ament_gtest)\n"
"  ament_add_gtest(<tests>)\n"
"endif()"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:265
msgid "Linting"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:267
msgid ""
"It's advised to use the combined call from `ament_lint_auto <https://github."
"com/ament/ament_lint/blob/dashing/ament_lint_auto/doc/index."
"rst#ament_lint_auto>`_:"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:269
msgid ""
"find_package(ament_lint_auto REQUIRED)\n"
"ament_lint_auto_find_test_dependencies()"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:274
msgid ""
"This will run linters as defined in the ``package.xml``. It is recommended "
"to use the set of linters defined by the package ``ament_lint_common``."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:277
msgid ""
"Linters provided by ament can also be added separately, instead of running "
"``ament_lint_auto``. One example of how to do so can be found in the "
"`ament_cmake_lint_cmake documentation <https://github.com/ament/ament_lint/"
"blob/dashing/ament_cmake_lint_cmake/doc/index.rst>`_."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:281
msgid "Testing"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:283
msgid "Ament contains CMake macros to simplify setting up GTests. Call:"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:285
msgid ""
"find_package(ament_gtest)\n"
"ament_add_gtest(some_test <test_sources>)"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:290
msgid ""
"to add a GTest. This is then a regular target which can be linked against "
"other libraries (such as the project library). The macros have additional "
"parameters:"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:294
msgid ""
"``APPEND_ENV``: append environment variables. For instance you can add to "
"the ament prefix path by calling:"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:297
msgid ""
"find_package(ament_gtest REQUIRED)\n"
"ament_add_gtest(some_test <test_sources>\n"
"  APPEND_ENV PATH=some/addtional/path/for/testing/resources)"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:303
msgid ""
"``APPEND_LIBRARY_DIRS``: append libraries so that they can be found by the "
"linker at runtime. This can be achieved by setting environment variables "
"like ``PATH`` on Windows and ``LD_LIBRARY_PATH`` on Linux, but this makes "
"the call platform specific."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:306
msgid "``ENV``: set environment variables (same syntax as ``APPEND_ENV``)."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:308
msgid ""
"``TIMEOUT``: set a test timeout in second. The default for GTests is 60 "
"seconds.  For example:"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:310
msgid "ament_add_gtest(some_test <test_sources> TIMEOUT 120)"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:314
msgid ""
"``SKIP_TEST``: skip this test (will be shown as \"passed\" in the console "
"output)."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:316
msgid "``SKIP_LINKING_MAIN_LIBRARIES``: Don't link against GTest."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:318
msgid "``WORKING_DIRECTORY``: set the working directory for the test."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:320
msgid ""
"The default working directory otherwise is the ``CMAKE_SOURCE_DIR``, which "
"will be evaluated to the directory of the top-level ``CMakeLists.txt``."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:322
msgid "Similarly, there is a CMake macro to set up GTest including GMock:"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:324
msgid ""
"find_package(ament_gmock REQUIRED)\n"
"ament_add_gmock(some_test <test_sources>)"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:329
msgid "It has the same additional parameters as ``ament_add_gtest``."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:332
msgid "Extending ament"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:334
msgid ""
"It is possible to register additional macros/functions with ``ament_cmake`` "
"and extend it in several ways."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:337
msgid "Adding a function/macro to ament"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:339
msgid ""
"Extending ament will often times mean that you want to have some functions "
"available to other packages. The best way to provide the macro to client "
"packages is to register it with ament."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:342
msgid ""
"This can be done by appending the ``${PROJECT_NAME}_CONFIG_EXTRAS`` "
"variable, which is used by ``ament_package()`` via"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:344
msgid ""
"list(APPEND ${PROJECT_NAME}_CONFIG_EXTRAS\n"
"  path/to/file.cmake\"\n"
"  other/pathto/file.cmake\"\n"
")"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:351
msgid ""
"Alternatively, you can directly add the files to the ``ament_package()`` "
"call:"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:353
msgid ""
"ament_package(CONFIG_EXTRAS\n"
"  path/to/file.cmake\n"
"  other/pathto/file.cmake\n"
")"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:361
msgid "Adding to extension points"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:363
msgid ""
"In addition to simple files with functions that can be used in other "
"packages, you can also add extensions to ament. Those extensions are scripts "
"which are executed with the function which defines the extension point. The "
"most common use-case for ament extensions is probably registering rosidl "
"message generators: When writing a generator, you normally want to generate "
"all messages and services with your generator also without modifying the "
"code for the message/service definition packages. This is possible by "
"registering the generator as an extension to ``rosidl_generate_interfaces``."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:369
msgid "As an example, see"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:371
msgid ""
"ament_register_extension(\n"
"  \"rosidl_generate_interfaces\"\n"
"  \"rosidl_generator_cpp\"\n"
"  \"rosidl_generator_cpp_generate_interfaces.cmake\")"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:378
msgid ""
"which registers the macro ``rosidl_generator_cpp_generate_interfaces.cmake`` "
"for the package ``rosidl_generator_cpp`` to the extension point "
"``rosidl_generate_interfaces``. When the extension point gets executed, this "
"will trigger the execution of the script "
"``rosidl_generator_cpp_generate_interfaces.cmake`` here. In particular, this "
"will call the generator whenever the function ``rosidl_generate_interfaces`` "
"gets executed."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:382
msgid ""
"The most important extension point aside from ``rosidl_generate_interfaces`` "
"for generators is ``ament_package``, which will simply execute scripts with "
"the ``ament_package()`` call. This extension point is useful when "
"registering resources (see below)."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:385
msgid ""
"``ament_register_extension`` is a function which takes exactly three "
"arguments:"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:387
msgid ""
"``extension_point``: The name of the extension point (most of the time this "
"will be one of ``ament_package`` or ``rosidl_generate_interfaces``)"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:389
msgid ""
"``package_name``: The name of the package containing the CMake file (i.e. "
"the project name of the project where the file is written to)"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:391
msgid ""
"``cmake_filename``: The CMake file executed when the extension point is run"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:395
msgid ""
"It is possible to define custom extension points in a similar manner to "
"``ament_package`` and ``rosidl_generate_interfaces``, but this should hardly "
"be necessary."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:398
msgid "Adding extension points"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:400
msgid ""
"Very rarely, it might be interesting to define a new extension point to "
"ament."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:402
msgid ""
"Extension points can be registered within a macro so that all extensions "
"will be executed when the corresponding macro is called. To do so:"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:405
msgid ""
"Define and document a name for your extension (e.g. ``my_extension_point``), "
"which is the name passed to the ``ament_register_extension`` macro when "
"using the extension point."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:407
msgid "In the macro/function which should execute the extensions call:"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:409
msgid "ament_execute_extensions(my_extension_point)"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:413
msgid ""
"Ament extensions work by defining a variable containing the name of the "
"extension point and filling it with the macros to be executed. Upon calling "
"``ament_execute_extensions``, the scripts defined in the variable are then "
"executed one after another."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:417
msgid "Adding resources"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:419
msgid ""
"Especially when developing plugins or packages which allow plugins it is "
"often essential to add resources to one ROS package from another (e.g. a "
"plugin). Examples can be plugins for tools using the pluginlib."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:422
msgid ""
"This can be achieved using the ament index (also called \"resource index\")."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:425
msgid "The ament index explained"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:427
msgid ""
"For details on the design and intentions, see `here <https://github.com/"
"ament/ament_cmake/blob/dashing/ament_cmake_core/doc/resource_index.md>`__"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:429
msgid ""
"In principle, the ament index is contained in a folder within the install/"
"share folder of your package. It contains shallow subfolders named after "
"different types of resources. Within the subfolder, each package providing "
"said resource is referenced by name with a \"marker file\". The file may "
"contain whatever content necessary to obtain the resources, e.g. relative "
"paths to the installation directories of the resource, it may also be simply "
"empty."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:434
msgid ""
"To give an example, consider providing display plugins for RViz: When "
"providing RViz plugins in a project named ``my_rviz_displays`` which will be "
"read by the pluginlib, you will provide a ``plugin_description.xml`` file, "
"which will be installed and used by the pluginlib to load the plugins. To "
"achieve this, the plugin_description.xml is registered as a resource in the "
"resource_index via"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:438
msgid ""
"pluginlib_export_plugin_description_file(rviz_common plugins_description.xml)"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:442
msgid ""
"When running ``colcon build``, this installs a file ``my_rviz_displays`` "
"into a subfolder ``rviz_common__pluginlib__plugin`` into the resource_index. "
"Pluginlib factories within rviz_common will know to gather information from "
"all folders named ``rviz_common__pluginlib__plugin`` for packages that "
"export plugins. The marker file for pluginlib factories contains an install-"
"folder relative path to the ``plugins_description.xml`` file (and the name "
"of the library as marker file name). With this information, the pluginlib "
"can load the library and know which plugins to load from the "
"``plugin_description.xml`` file."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:447
msgid ""
"As a second example, consider the possibility to let your own RViz plugins "
"use your own custom meshes. Meshes get loaded at startup time so that the "
"plugin owner does not have to deal with it, but this implies RViz has to "
"know about the meshes. To achieve this, RViz provides a function:"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:451
msgid "register_rviz_ogre_media_exports(DIRECTORIES <my_dirs>)"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:455
msgid ""
"This registers the directories as an ogre_media resource in the ament index. "
"In short, it installs a file named after the project which calls the "
"function into a subfolder called ``rviz_ogre_media_exports``. The file "
"contains the install folder relative paths to the directories listed in the "
"macros. On startup time, RViz can now search for all folders called "
"``rviz_ogre_media_exports`` and load resources in all folders provided. "
"These searches are done using ``ament_index_cpp`` (or ``ament_index_py`` for "
"Python packages)."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:461
msgid ""
"In the following sections we will explore how to add your own resources to "
"the ament index and provide best practices for doing so."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:464
msgid "Querying the ament index"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:466
msgid ""
"If necessary, it is possible to query the ament index for resources via "
"CMake. To do so, there are three functions:"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:469
msgid ""
"``ament_index_has_resource``: obtain a prefix path to the resource if it "
"exists with the following parameters:"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:471
msgid ""
"``var``: the output parameter: fill this variable with FALSE if the resource "
"does not exist or the prefix path to the resource otherwise"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:473
#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:481
#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:493
msgid ""
"``resource_type``: The type of the resource (e.g. "
"``rviz_common__pluginlib__plugin``)"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:475
#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:483
msgid ""
"``resource_name``: The name of the resource which usually amounts to the "
"name of the package having added the resource of type resource_type (e.g. "
"``rviz_default_plugins``)"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:477
msgid ""
"``ament_index_get_resource``: Obtain the content of a specific resource, i."
"e. the contents of the marker file in the ament index."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:479
msgid ""
"``var``: the output parameter: filled with the content of the resource "
"marker file if it exists."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:485
#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:495
msgid ""
"``PREFIX_PATH``: The prefix path to search for (usually, the default "
"``ament_index_get_prefix_path()`` will be enough)."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:487
msgid ""
"Note that ``ament_index_get_resource`` will throw an error if the resource "
"does not exist, so it might be necessary to check using "
"``ament_index_has_resource``."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:489
msgid ""
"``ament_index_get_resources``: Get all packages which registered resources "
"of a specific type from the index"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:491
msgid ""
"``var``: Output parameter: filled with a list of names of all packages which "
"registered a resource of resource_type"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:498
msgid "Adding to the ament index"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:500
msgid "Defining a resource requires two bits of information:"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:502
msgid "a name for the resource which must be unique,"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:504
msgid ""
"a layout of the marker file, which can be anything and could also be empty "
"(this is true for instance for the \"package\" resource marking a ROS 2 "
"package)"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:506
msgid "For the RViz mesh resource, the corresponding choices were:"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:508
msgid "``rviz_ogre_media_exports`` as name of the resource,"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:510
msgid ""
"install path relative paths to all folders containing resources. This will "
"already enable you to write the logic for using the corresponding resource "
"in your package."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:512
msgid ""
"To allow users to easily register resources for your package, you should "
"furthermore provide macros or functions such as the pluginlib function or "
"``rviz_ogre_media_exports`` function."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:514
msgid ""
"To register a resource, use the ament function "
"``ament_index_register_resource``. This will create and install the marker "
"files in the resource_index. As an example, the corresponding call for "
"``rviz_ogre_media_exports`` is the following:"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:518
msgid ""
"ament_index_register_resource(rviz_ogre_media_exports CONTENT "
"${OGRE_MEDIA_RESOURCE_FILE})"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:522
msgid ""
"This installs a file named like ``${PROJECT_NAME}`` into a folder "
"``rviz_ogre_media_exports`` into the resource_index with content given by "
"variable ``${OGRE_MEDIA_RESOURCE_FILE}``. The macro has a number of "
"parameters that can be useful:"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:525
msgid ""
"the first (unnamed) parameter is the name of the resource, which amounts to "
"the name of the folder in the resource_index"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:527
msgid ""
"``CONTENT``: The content of the marker file as string. This could be a list "
"of relative paths, etc. ``CONTENT`` cannot be used together with "
"``CONTENT_FILE``."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:529
msgid ""
"``CONTENT_FILE``: The path to a file which will be use to create the marker "
"file. The file can be a plain file or a template file expanded with "
"``configure_file()``. ``CONTENT_FILE`` cannot be used together with "
"``CONTENT``."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:532
msgid ""
"``PACKAGE_NAME``: The name of the package/library exporting the resource, "
"which amounts to the name of the marker file. Defaults to ``${PROJECT_NAME}"
"``."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:534
msgid ""
"``AMENT_INDEX_BINARY_DIR``: The base path of the generated ament index. "
"Unless really necessary, always use the default ``${CMAKE_BINARY_DIR}/"
"ament_cmake_index``."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:536
msgid "``SKIP_INSTALL``: Skip installing the marker file."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:538
msgid ""
"Since only one marker file exists per package, it is usually a problem if "
"the CMake function/macro gets called twice by the same project. However, for "
"large projects it might be best to split up calls registering resources."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:541
msgid ""
"Therefore, it is best practice to let a macro registering a resource such as "
"``register_rviz_ogre_media_exports.cmake`` only fill some variables. The "
"real call to ``ament_index_register_resource`` can then be added within an "
"ament extension to ``ament_package``. Since there must only ever be one call "
"to ``ament_package`` per project, there will always only be one place where "
"the resource gets registered. In the case of ``rviz_ogre_media_exports`` "
"this amounts to the following strategy:"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:546
msgid ""
"The macro ``register_rviz_ogre_media_exports`` takes a list of folders and "
"appends them to a variable called ``OGRE_MEDIA_RESOURCE_FILE``."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:548
msgid ""
"Another macro called ``register_rviz_ogre_media_exports_hook`` calls "
"``ament_index_register_resource`` if ``${OGRE_MEDIA_RESOURCE_FILE}`` is non-"
"empty."
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:550
msgid ""
"The ``register_rviz_ogre_media_exports_hook.cmake`` file is registered as an "
"ament extension in a third file ``register_rviz_ogre_media_exports_hook-"
"extras.cmake`` via calling"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:552
msgid ""
"ament_register_extension(\"ament_package\" \"rviz_rendering\"\n"
"  \"register_rviz_ogre_media_exports_hook.cmake\")"
msgstr ""

#: ../../../source/Tutorials/Ament-CMake-Documentation.rst:557
msgid ""
"The files ``register_rviz_ogre_media_exports.cmake`` and "
"``register_rviz_ogre_media_exports_hook-extra.cmake`` are registered as "
"``CONFIG_EXTRA`` with ``ament_package()``."
msgstr ""
