# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Open Robotics
# This file is distributed under the same license as the ros2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ros2 documentation crystal\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 06:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/Installation/Windows-Development-Setup.rst:2
msgid "Building ROS 2 on Windows"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:6
msgid "Table of Contents"
msgstr "目录"

#: ../../../source/Installation/Windows-Development-Setup.rst:8
msgid ""
"This guide is about how to setup a development environment for ROS 2 on "
"Windows."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:11
msgid "Prerequisites"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:13
msgid ""
"First follow the steps for `Installing Prerequisites <windows-install-binary-"
"installing-prerequisites>` on the Binary Installation page."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:15
msgid "Stop and return here when you reach the \"Downloading ROS 2\" section."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:18
msgid "Additional prerequisites"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:20
msgid ""
"When building from source you'll need a few additional prerequisites "
"installed."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:23
msgid "Install additional prerequisites from Chocolatey"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:25
msgid "First install git:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:27
msgid "> choco install -y git"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:31
msgid ""
"You will need to append the Git cmd folder ``C:\\Program Files\\Git\\cmd`` "
"to the PATH (you can do this by clicking the Windows icon, typing "
"\"Environment Variables\", then clicking on \"Edit the system environment "
"variables\". In the resulting dialog, click \"Environment Variables\", the "
"click \"Path\" on the bottom pane, then click \"Edit\" and add the path)."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:34
msgid "Then install ``patch``:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:36
msgid "> choco install -y patch"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:40
msgid ""
"You may need to close the cmd prompt and open a new one, but at this point "
"you should be able to run ``git``\\ , ``python``\\ , ``cmake``\\ , and "
"``patch.exe --version``."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:43
msgid "Install developer tools"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:45
msgid ""
"Now we are ready to install some our tools that we use to help in developing "
"ROS 2."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:47
msgid "Let's start with ``vcstool``:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:49
msgid "> pip install -U vcstool"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:53
msgid ""
"You can test it out by just running ``vcs`` (you should be able to do this "
"in the same cmd prompt)."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:55
msgid "Next, install ``colcon``:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:57
msgid "> pip install -U colcon-common-extensions"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:61
msgid ""
"You can test it out by just running ``colcon`` (you should be able to do "
"this in the same cmd prompt)."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:63
msgid "Also, you should install ``curl``:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:65
msgid "> choco install -y curl"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:70
msgid "Install dependencies"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:72
msgid "Next install the latest version of ``setuptools`` and ``pip``:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:74
msgid "> <PATH_TO_PYTHON_EXECUTABLE> -m pip install -U setuptools pip"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:78
msgid ""
"Where ``PATH_TO_PYTHON_EXECUTABLE`` looks like: ``c:\\python37\\python.exe``"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:80
msgid "Then you can continue installing other Python dependencies:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:82
msgid "> pip install -U catkin_pkg EmPy lark-parser pyparsing pyyaml"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:86
msgid "Next install testing tools like ``pytest`` and others:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:88
msgid "> pip install -U pytest coverage mock"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:92
msgid "Next install linters and checkers like ``flake8`` and others:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:94
msgid ""
"> pip install -U flake8 flake8-blind-except flake8-builtins flake8-class-"
"newline flake8-comprehensions flake8-deprecated flake8-docstrings flake8-"
"import-order flake8-quotes pep8 pydocstyle"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:98
msgid "Next install cppcheck:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:100
msgid "> choco install -y cppcheck"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:104
msgid "You will need to add ``C:\\Program Files\\Cppcheck`` to the ``PATH``."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:106
msgid "Next install xmllint:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:108
msgid ""
"Download the `64 bit binary archives <https://www.zlatkovic.com/pub/"
"libxml/64bit/>`__ of ``libxml2`` (and its dependencies ``iconv`` and "
"``zlib``) from https://www.zlatkovic.com/projects/libxml/"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:109
msgid "Unpack all archives into e.g. ``C:\\xmllint``"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:110
msgid "Add ``C:\\xmllint\\bin`` to the ``PATH``."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:113
msgid "Install Qt5"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:115
msgid ""
"This section is only required if you are building rviz, but it comes with "
"our default set of sources, so if you don't know, then assume you are "
"building it."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:117
msgid "First get the installer from Qt's website:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:119
msgid "https://www.qt.io/download"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:121
msgid ""
"Select the Open Source version and then the ``Qt Online Installer for "
"Windows``."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:123
msgid ""
"Run the installer and install Qt5. We recommend you install it to the "
"default location of ``C:\\Qt``, but if you choose somewhere else, make sure "
"to update the paths below accordingly. When selecting components to install, "
"the only thing you absolutely need for bouncy and later is the appropriate "
"MSVC 64-bit component under the ``Qt`` -> ``Qt 5.10.0`` tree. We're using "
"``5.10.0`` as of the writing of this document and that's what we recommend "
"since that's all we test on Windows, but later version will probably work "
"too. For bouncy and later, be sure to select ``MSVC 2017 64-bit``. For "
"ardent use ``MSVC 2015 64-bit``. After that, the default settings are fine."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:130
msgid ""
"Finally, set the ``Qt5_DIR`` environment variable in the ``cmd.exe`` where "
"you intend to build so that CMake can find it:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:132
msgid ""
"> set Qt5_DIR=C:\\Qt\\5.10.0\\msvc2017_64\n"
": You could set it permanently with ``setx -m Qt5_DIR C:"
"\\Qt\\5.10.0\\msvc2017_64`` instead, but that requires Administrator."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:139
msgid ""
"This path might change based on which MSVC version you're using or if you "
"installed it to a different directory."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:142
msgid "RQt dependencies"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:144
msgid "> pip install -U pydot PyQt5"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:149
msgid "Get the ROS 2 code"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:151
msgid ""
"Now that we have the development tools we can get the ROS 2 source code."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:153
msgid ""
"First setup a development folder, for example ``C:\\dev\\ros2_crystal``:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:155
msgid ""
"> md \\dev\\ros2_crystal\\src\n"
"> cd \\dev\\ros2_crystal"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:160
msgid ""
"Get the ``ros2.repos`` file which defines the repositories to clone from:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:162
msgid ""
"# CMD\n"
"> curl -sk https://raw.githubusercontent.com/ros2/ros2/crystal/ros2.repos -o "
"ros2.repos\n"
"\n"
"# PowerShell\n"
"> curl https://raw.githubusercontent.com/ros2/ros2/crystal/ros2.repos -o "
"ros2.repos"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:170
msgid ""
"Next you can use ``vcs`` to import the repositories listed in the ``ros2."
"repos`` file:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:172
msgid ""
"# CMD\n"
"> vcs import src < ros2.repos\n"
"\n"
"# PowerShell\n"
"> vcs import --input ros2.repos src"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:181
msgid "Install additional DDS implementations (optional)"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:183
msgid ""
"If you would like to use another DDS or RTPS vendor besides the default, "
"eProsima's Fast RTPS, you can find instructions `here <DDS-Implementations>`."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:186
msgid "Build the ROS 2 Code"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:190
msgid ""
"To build ROS 2 you will need a Visual Studio Command Prompt (usually titled "
"\"x64 Native Tools Command Prompt for VS 2017\" for bouncy and later or "
"\"x64 Native Tools Command Prompt for VS 2015\" for ardent and earlier) "
"running as Administrator."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:192
msgid ""
"Fast RTPS is bundled with the ROS 2 source and will always be built unless "
"you put an ``AMENT_IGNORE`` file in the ``src\\eProsima`` folder."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:194
msgid "To build the ``\\dev\\ros2_crystal`` folder tree:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:196
msgid "> colcon build --merge-install"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:202
msgid ""
"We're using ``--merge-install`` here to avoid a ``PATH`` variable that is "
"too long at the end of the build. If you're adapting these instructions to "
"build a smaller workspace then you might be able to use the default behavior "
"which is isolated install, i.e. where each package is installed to a "
"different folder."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:206
msgid ""
"If you are doing a debug build use ``python_d path\\to\\colcon_executable`` "
"``colcon``. See `Extra stuff for debug mode`_ for more info on running "
"Python code in debug builds on Windows."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:210
msgid "Environment setup"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:212
msgid ""
"Start a command shell and source the ROS 2 setup file to set up the "
"workspace:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:214
msgid "> call C:\\dev\\ros2_crystal\\install\\local_setup.bat"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:218
msgid ""
"This will automatically set up the environment for any DDS vendors that "
"support was built for."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:220
msgid ""
"It is normal that the previous command, if nothing else went wrong, outputs "
"\"The system cannot find the path specified.\" exactly once."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:223
msgid "Test and run"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:225
msgid ""
"Note that the first time you run any executable you will have to allow "
"access to the network through a Windows Firewall popup."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:227
msgid "You can run the tests using this command:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:229
msgid "> colcon test --merge-install"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:235
msgid ""
"``--merge-install`` should only be used if it was also used in the build "
"step."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:237
msgid "Afterwards you can get a summary of the tests using this command:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:239
msgid "> colcon test-result"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:243
msgid ""
"To run the examples, first open a clean new ``cmd.exe`` and set up the "
"workspace by sourcing the ``local_setup.bat`` file. Then, run a C++ "
"``talker``\\ :"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:246
msgid ""
"> call install\\local_setup.bat\n"
"> ros2 run demo_nodes_cpp talker"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:251
msgid ""
"In a separate shell you can do the same, but instead run a Python "
"``listener``\\ :"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:253
msgid ""
"> call install\\local_setup.bat\n"
"> ros2 run demo_nodes_py listener"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:258
msgid ""
"You should see the ``talker`` saying that it's ``Publishing`` messages and "
"the ``listener`` saying ``I heard`` those messages. This verifies both the C+"
"+ and Python APIs are working properly. Hooray!"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:262
msgid "See the `tutorials and demos </Tutorials>` for other things to try."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:266
msgid ""
"It is not recommended to build in the same cmd prompt that you've sourced "
"the ``local_setup.bat``."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:269
msgid "Extra stuff for Debug mode"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:271
msgid ""
"If you want to be able to run all the tests in Debug mode, you'll need to "
"install a few more things:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:274
msgid "To be able to extract the Python source tarball, you can use PeaZip:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:276
msgid "> choco install -y peazip"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:281
msgid ""
"You'll also need SVN, since some of the Python source-build dependencies are "
"checked out via SVN:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:283
msgid "> choco install -y svn hg"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:288
msgid ""
"You'll need to quit and restart the command prompt after installing the "
"above."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:289
msgid "Get and extract the Python 3.7.4 source from the ``tgz``:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:291
msgid "https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tgz"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:292
msgid ""
"To keep these instructions concise, please extract it to ``C:"
"\\dev\\Python-3.7.4``"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:294
msgid ""
"Now, build the Python source in debug mode from a Visual Studio command "
"prompt:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:296
msgid ""
"> cd C:\\dev\\Python-3.7.4\\PCbuild\n"
"> get_externals.bat\n"
"> build.bat -p x64 -d"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:303
msgid ""
"Finally, copy the build products into the Python37 installation directories, "
"next to the Release-mode Python executable and DLL's:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:305
msgid ""
"> cd C:\\dev\\Python-3.7.4\\PCbuild\\amd64\n"
"> copy python_d.exe C:\\Python37 /Y\n"
"> copy python37_d.dll C:\\Python37 /Y\n"
"> copy python3_d.dll C:\\Python37 /Y\n"
"> copy python37_d.lib C:\\Python37\\libs /Y\n"
"> copy python3_d.lib C:\\Python37\\libs /Y\n"
"> for %I in (*_d.pyd) do copy %I C:\\Python37\\DLLs /Y"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:316
msgid "Now, from a fresh command prompt, make sure that ``python_d`` works:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:318
msgid ""
"> python_d\n"
"> import _ctypes"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:324
msgid ""
"To create executables python scripts(.exe), python_d should be used to "
"invoke colcon"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:326
msgid "> python_d path\\to\\colcon_executable build"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:330
msgid "Hooray, you're done!"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:333
msgid "SROS2 Debug Mode"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:335
msgid ""
"In order to use SROS2 in Debug mode on Windows, a corresponding debug build "
"for ``lxml`` must be installed."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:337
msgid ""
"A pre-built Python wheel binary for ``lxml`` debug is provided, to install:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:339
msgid ""
"> pip install https://github.com/ros2/ros2/releases/download/lxml-archives/"
"lxml-4.3.2-cp37-cp37dm-win_amd64.whl"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:343
msgid "To verify installation"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:345
msgid ""
"> python_d\n"
"> from lxml import etree"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:350
msgid "No import errors should appear."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:352
msgid ""
"Note, in order to switch back to release, reinstall the release wheel of "
"lxml via pip:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:354
msgid "> pip install lxml"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:359
msgid "Stay up to date"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:361
msgid ""
"See :ref:`MaintainingSource` to periodically refresh your source "
"installation."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:364
msgid "Troubleshooting"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:366
msgid ""
"Troubleshooting techniques can be found :ref:`here <windows-"
"troubleshooting>`."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:369
msgid "Uninstall"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:371
msgid ""
"If you installed your workspace with colcon as instructed above, "
"\"uninstalling\" could be just a matter of opening a new terminal and not "
"sourcing the workspace's ``setup`` file. This way, your environment will "
"behave as though there is no Crystal install on your system."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:374
msgid ""
"If you're also trying to free up space, you can delete the entire workspace "
"directory with:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:376
msgid "rmdir /s /q \\ros2_crystal"
msgstr ""
