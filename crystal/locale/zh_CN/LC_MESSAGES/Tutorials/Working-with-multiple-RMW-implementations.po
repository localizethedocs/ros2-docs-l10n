# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Open Robotics
# This file is distributed under the same license as the ros2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ros2 documentation crystal\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 06:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:6
msgid "Working with multiple ROS 2 middleware implementations"
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:10
msgid "Table of Contents"
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:12
msgid ""
"This page explains the default RMW implementation and how to specify an "
"alternative."
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:15
msgid "Prerequisites"
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:17
msgid ""
"You should have already read the `DDS and ROS middleware implementations "
"page <../Concepts/About-Different-Middleware-Vendors>`."
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:20
msgid "Multiple RMW implementations"
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:22
msgid ""
"The ROS 2 binary releases for currently active distros have built-in support "
"for several RMW implementations out of the box (Fast RTPS, RTI Connext Pro, "
"ADLINK OpenSplice and Eclipse Cyclone DDS). The default is Fast RTPS, which "
"works without any additional installation steps, because we distribute it "
"with our binary packages. Cyclone DDS is also distributed with binary "
"packages since Eloquent."
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:26
msgid ""
"Others like OpenSplice or Connext can be enabled by `installing additional "
"packages <../Installation/DDS-Implementations>`, but without having to "
"rebuild anything or replace any existing packages."
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:28
msgid ""
"A ROS 2 workspace that has been built from source may build and install "
"multiple RMW implementations simultaneously. While the core ROS 2 code is "
"being compiled, any RMW implementation that is found will be built if the "
"relevant DDS/RTPS implementation has been installed properly and the "
"relevant environment variables have been configured. For example, if the "
"code for the `RMW package for RTI Connext <https://github.com/ros2/"
"rmw_connext/tree/dashing/rmw_connext_cpp>`__ is in the workspace, it will be "
"built if an installation of RTI's Connext Pro can also be found."
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:32
msgid ""
"For many cases you will find that nodes using different RMW implementations "
"are able to communicate, however this is not true under all circumstances. "
"Here is a list of inter-vendor communication configurations that are not "
"supported:"
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:35
msgid "Fast-DDS <-> Connext"
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:36
msgid "does not support communication over pub/sub"
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:37
msgid ""
"``WString`` published by Fast-DDS can't be received correctly by Connext on "
"macOS"
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:38
msgid "OpenSplice <-> OpenSplice"
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:39
msgid "does not support ``WString``"
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:40
msgid ""
"``WString`` is mapped to ``String`` which has a different wire representation"
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:41
msgid "Connext <-> CycloneDDS"
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:42
msgid "does not support pub/sub communication for ``WString``"
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:43
msgid "Connext Dynamic <-> Connext Dynamic"
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:44
msgid "does not support C services"
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:47
msgid "Default RMW implementation"
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:49
msgid ""
"If a ROS 2 workspace has multiple RMW implementations, the default RMW "
"implementation is currently selected as Fast RTPS if it's available. If the "
"Fast RTPS RMW implementation is not installed, the RMW implementation with "
"the first RMW implementation identifier in alphabetical order will be used. "
"The implementation identifier is the name of the ROS package that provides "
"the RMW implementation, e.g. ``rmw_fastrtps_cpp``. For example, if both "
"``rmw_opensplice_cpp`` and ``rmw_connext_cpp`` ROS packages are installed, "
"``rmw_connext_cpp`` would be the default. If ``rmw_fastrtps_cpp`` is ever "
"installed, it would be the default. See below for how to specify which RMW "
"implementation is to be used when running the ROS 2 examples."
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:57
msgid "Specifying RMW implementations"
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:59
msgid ""
"To have multiple RMW implementations available for use you must have "
"installed our binaries and any additional dependencies for specific RMW "
"implementations, or built ROS 2 from source with multiple RMW "
"implementations in the workspace (they are included by default and their "
"dependencies are met). See `Install DDS implementations <../Installation/DDS-"
"Implementations>`."
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:63
msgid ""
"Starting in Beta 2 and above both C++ and Python nodes support an "
"environment variable ``RMW_IMPLEMENTATION``. To choose a different RMW "
"implemenation you can set the environment variable ``RMW_IMPLEMENTATION`` to "
"a specific implementation identifier."
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:66
msgid ""
"To run the talker demo using the C++ and listener using Python with the RMW "
"implementation for Connext:"
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:70
msgid "Linux"
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:72
#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:81
msgid ""
"RMW_IMPLEMENTATION=rmw_connext_cpp ros2 run demo_nodes_cpp talker\n"
"\n"
"# Run in another terminal\n"
"RMW_IMPLEMENTATION=rmw_connext_cpp ros2 run demo_nodes_py listener"
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:79
msgid "macOS"
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:88
msgid "Windows"
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:90
msgid ""
"set RMW_IMPLEMENTATION=rmw_connext_cpp\n"
"ros2 run demo_nodes_cpp talker\n"
"\n"
"REM run in another terminal\n"
"set RMW_IMPLEMENTATION=rmw_connext_cpp\n"
"ros2 run demo_nodes_py listener"
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:100
msgid "Adding RMW implementations to your workspace"
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:102
msgid ""
"Suppose that you have built your ROS 2 workspace with only Fast RTPS "
"installed and therefore only the Fast RTPS RMW implementation built. The "
"last time your workspace was built, any other RMW implementation packages, "
"``rmw_connext_cpp`` for example, were probably unable to find installations "
"of the relevant DDS implementations. If you then install an additional DDS "
"implementation, Connext for example, you will need to re-trigger the check "
"for a Connext installation that occurs when the Connext RMW implementation "
"is being built. You can do this by specifying the ``--cmake-force-"
"configure`` flag on your next workspace build, and you should see that the "
"RMW implementation package then gets built for the newly installed DDS "
"implementation."
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:107
msgid ""
"It is possible to run into a problem when \"rebuilding\" the workspace with "
"an additional RMW implementation using the ``--cmake-force-configure`` "
"option where the build complains about the default RMW implementation "
"changing. To resolve this, you can either set the default implementation to "
"what is was before with the ``RMW_IMPLEMENTATION`` CMake argument or you can "
"delete the build folder for packages that complain and continue the build "
"with ``--start-with <package name>``."
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:111
msgid "Troubleshooting"
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:114
msgid "Ensuring use of a particular RMW implementation"
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:116
msgid ""
"If the ``RMW_IMPLEMENTATION`` environment variable is set to an RMW "
"implementation for which support is not installed, you will see an error "
"message similar to the following if you have only one implementation "
"installed:"
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:118
msgid ""
"Expected RMW implementation identifier of 'rmw_connext_cpp' but instead "
"found 'rmw_fastrtps_cpp', exiting with 102."
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:122
msgid ""
"If you have support for multiple RMW implementations installed and you "
"request use of one that is not installed, you will see something similar to:"
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:124
msgid ""
"Error getting RMW implementation identifier / RMW implementation not "
"installed (expected identifier of 'rmw_connext_cpp'), exiting with 1."
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:128
msgid ""
"If this occurs, double check that your ROS 2 installation includes support "
"for the RMW implementation that you have specified in the "
"``RMW_IMPLEMENTATION`` environment variable."
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:130
msgid ""
"If you want to switch between RMW implementations, verify that the ROS 2 "
"daemon process is not running with the previous RMW implementation to avoid "
"any issues between nodes and command line tools such as ``ros2 node``. For "
"example, if you run:"
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:133
msgid "RMW_IMPLEMENTATION=rmw_connext_cpp ros2 run demo_nodes_cpp talker"
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:137
msgid "and"
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:139
msgid "ros2 node list"
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:143
msgid "it will generate a daemon with a Fast RTPS implementation:"
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:145
msgid ""
"21318 22.0  0.6 535896 55044 pts/8    Sl   16:14   0:00 /usr/bin/python3 /"
"opt/ros/dashing/bin/_ros2_daemon --rmw-implementation rmw_fastrtps_cpp --ros-"
"domain-id 22"
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:149
msgid ""
"Even if you run the command line tool again with the correct RMW "
"implementation, the daemon's RMW implementation will not change and the ROS "
"2 command line tools will fail."
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:151
msgid "To solve this, simply stop the daemon process:"
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:153
msgid "ros2 daemon stop"
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:157
msgid ""
"and rerun the ROS 2 command line tool with the correct RMW implementation."
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:160
msgid ""
"RTI Connext on OSX: Failure due to insufficient shared memory kernel settings"
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:162
msgid ""
"If you receive an error message similar to below when running RTI Connext on "
"OSX:"
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:164
msgid ""
"[D0062|"
"ENABLE]DDS_DomainParticipantPresentation_reserve_participant_index_entryports:!"
"enable reserve participant index\n"
"[D0062|ENABLE]DDS_DomainParticipant_reserve_participant_index_entryports:"
"Unusable shared memory transport. For a more in-   depth explanation of the "
"possible problem and solution, please visit https://community.rti.com/kb/"
"osx510."
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:169
msgid ""
"This error is caused by an insufficient number or size of shared memory "
"segments allowed by the operating system. As a result, the "
"``DomainParticipant`` is unable to allocate enough resources and calculate "
"its participant index which causes the error."
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:171
msgid ""
"You can increase the shared memory resources of your machine either "
"temporarily or permanently."
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:173
msgid ""
"To increase the settings temporarily, you can run the following commands as "
"user root:"
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:175
msgid ""
"/usr/sbin/sysctl -w kern.sysv.shmmax=419430400\n"
"/usr/sbin/sysctl -w kern.sysv.shmmin=1\n"
"/usr/sbin/sysctl -w kern.sysv.shmmni=128\n"
"/usr/sbin/sysctl -w kern.sysv.shmseg=1024\n"
"/usr/sbin/sysctl -w kern.sysv.shmall=262144"
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:183
msgid ""
"To increase the settings permanently, you will need to edit or create the "
"file ``/etc/sysctl.conf``. Creating or editing this file will require root "
"permissions. Either add to your existing ``etc/sysctl.conf`` file or create "
"``/etc/sysctl.conf`` with the following lines:"
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:185
msgid ""
"kern.sysv.shmmax=419430400\n"
"kern.sysv.shmmin=1\n"
"kern.sysv.shmmni=128\n"
"kern.sysv.shmseg=1024\n"
"kern.sysv.shmall=262144"
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:193
msgid ""
"You will need to reboot the machine after modifying this file to have the "
"changes take effect."
msgstr ""

#: ../../../source/Tutorials/Working-with-multiple-RMW-implementations.rst:195
msgid ""
"This solution is edited from the RTI Connext community forum. See the "
"`original post <https://community.rti.com/kb/osx510>`__ for more detailed "
"explanation."
msgstr ""
