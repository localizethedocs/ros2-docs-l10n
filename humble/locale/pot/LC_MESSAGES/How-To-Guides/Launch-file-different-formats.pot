# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation humble\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-01 08:39+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:6
msgid "Using XML, YAML, and Python for ROS 2 Launch Files"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:10
msgid "Table of Contents"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:12
msgid ""
"ROS 2 launch files can be written in XML, YAML, and Python. This guide shows "
"how to use these different formats to accomplish the same task, as well as "
"has some discussion on when to use each format."
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:16
msgid "Launch file examples"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:18
msgid ""
"Below is a launch file implemented in XML, YAML, and Python. Each launch "
"file performs the following actions:"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:21
msgid "Setup command line arguments with defaults"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:22
msgid "Include another launch file"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:23
msgid "Include another launch file in another namespace"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:24
msgid "Start a node and setting its namespace"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:25
msgid ""
"Start a node, setting its namespace, and setting parameters in that node "
"(using the args)"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:26
msgid "Create a node to remap messages from one topic to another"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:30
msgid "XML"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:32
msgid ""
"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
"<launch>\n"
"  <!-- args that can be set from the command line or a default will be used "
"-->\n"
"  <arg name=\"background_r\" default=\"0\" />\n"
"  <arg name=\"background_g\" default=\"255\" />\n"
"  <arg name=\"background_b\" default=\"0\" />\n"
"  <arg name=\"chatter_ns\" default=\"my/chatter/ns\" />\n"
"\n"
"  <!-- include another launch file -->\n"
"  <include file=\"$(find-pkg-share demo_nodes_cpp)/launch/topics/"
"talker_listener.launch.py\" />\n"
"\n"
"  <!-- include another launch file in the chatter_ns namespace-->\n"
"  <group>\n"
"    <!-- push_ros_namespace to set namespace of included nodes -->\n"
"    <push_ros_namespace namespace=\"$(var chatter_ns)\" />\n"
"    <include file=\"$(find-pkg-share demo_nodes_cpp)/launch/topics/"
"talker_listener.launch.py\" />\n"
"  </group>\n"
"\n"
"  <!-- start a turtlesim_node in the turtlesim1 namespace -->\n"
"  <node pkg=\"turtlesim\" exec=\"turtlesim_node\" name=\"sim\" "
"namespace=\"turtlesim1\" />\n"
"\n"
"  <!-- start another turtlesim_node in the turtlesim2 namespace and use args "
"to set parameters -->\n"
"  <node pkg=\"turtlesim\" exec=\"turtlesim_node\" name=\"sim\" "
"namespace=\"turtlesim2\">\n"
"    <param name=\"background_r\" value=\"$(var background_r)\" />\n"
"    <param name=\"background_g\" value=\"$(var background_g)\" />\n"
"    <param name=\"background_b\" value=\"$(var background_b)\" />\n"
"  </node>\n"
"\n"
"  <!-- perform remap so both turtles listen to the same command topic -->\n"
"  <node pkg=\"turtlesim\" exec=\"mimic\" name=\"mimic\">\n"
"    <remap from=\"/input/pose\" to=\"/turtlesim1/turtle1/pose\" />\n"
"    <remap from=\"/output/cmd_vel\" to=\"/turtlesim2/turtle1/cmd_vel\" />\n"
"  </node>\n"
"</launch>\n"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:35
msgid "YAML"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:37
msgid ""
"%YAML 1.2\n"
"---\n"
"launch:\n"
"# args that can be set from the command line or a default will be used\n"
"- arg:\n"
"    name: \"background_r\"\n"
"    default: \"0\"\n"
"- arg:\n"
"    name: \"background_g\"\n"
"    default: \"255\"\n"
"- arg:\n"
"    name: \"background_b\"\n"
"    default: \"0\"\n"
"- arg:\n"
"    name: \"chatter_ns\"\n"
"    default: \"my/chatter/ns\"\n"
"\n"
"# include another launch file\n"
"- include:\n"
"    file: \"$(find-pkg-share demo_nodes_cpp)/launch/topics/talker_listener."
"launch.py\"\n"
"\n"
"# include another launch file in the chatter_ns namespace\n"
"- group:\n"
"    - push_ros_namespace:\n"
"        namespace: \"$(var chatter_ns)\"\n"
"    - include:\n"
"        file: \"$(find-pkg-share demo_nodes_cpp)/launch/topics/"
"talker_listener.launch.py\"\n"
"\n"
"# start a turtlesim_node in the turtlesim1 namespace\n"
"- node:\n"
"    pkg: \"turtlesim\"\n"
"    exec: \"turtlesim_node\"\n"
"    name: \"sim\"\n"
"    namespace: \"turtlesim1\"\n"
"\n"
"# start another turtlesim_node in the turtlesim2 namespace and use args to "
"set parameters\n"
"- node:\n"
"    pkg: \"turtlesim\"\n"
"    exec: \"turtlesim_node\"\n"
"    name: \"sim\"\n"
"    namespace: \"turtlesim2\"\n"
"    param:\n"
"    - name: \"background_r\"\n"
"      value: \"$(var background_r)\"\n"
"    - name: \"background_g\"\n"
"      value: \"$(var background_g)\"\n"
"    - name: \"background_b\"\n"
"      value: \"$(var background_b)\"\n"
"\n"
"# perform remap so both turtles listen to the same command topic\n"
"- node:\n"
"    pkg: \"turtlesim\"\n"
"    exec: \"mimic\"\n"
"    name: \"mimic\"\n"
"    remap:\n"
"    - from: \"/input/pose\"\n"
"      to: \"/turtlesim1/turtle1/pose\"\n"
"    - from: \"/output/cmd_vel\"\n"
"      to: \"/turtlesim2/turtle1/cmd_vel\"\n"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:40
msgid "Python"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:42
msgid ""
"from launch import LaunchDescription\n"
"from launch.actions import DeclareLaunchArgument, GroupAction, "
"IncludeLaunchDescription\n"
"from launch.substitutions import LaunchConfiguration, PathJoinSubstitution\n"
"from launch_ros.actions import Node, PushRosNamespace\n"
"from launch_ros.substitutions import FindPackageShare\n"
"\n"
"\n"
"def generate_launch_description():\n"
"    launch_dir = PathJoinSubstitution([FindPackageShare('demo_nodes_cpp'), "
"'launch', 'topics'])\n"
"    return LaunchDescription([\n"
"        # args that can be set from the command line or a default will be "
"used\n"
"        DeclareLaunchArgument('background_r', default_value='0'),\n"
"        DeclareLaunchArgument('background_g', default_value='255'),\n"
"        DeclareLaunchArgument('background_b', default_value='0'),\n"
"        DeclareLaunchArgument('chatter_ns', default_value='my/chatter/ns'),\n"
"\n"
"        # include another launch file\n"
"        IncludeLaunchDescription(\n"
"            PathJoinSubstitution([launch_dir, 'talker_listener.launch.py'])\n"
"        ),\n"
"\n"
"        # include a Python launch file in the chatter_py_ns namespace\n"
"        GroupAction(\n"
"            actions=[\n"
"                # push_ros_namespace first to set namespace of included "
"nodes for following actions\n"
"                PushRosNamespace(LaunchConfiguration('chatter_ns')),\n"
"                IncludeLaunchDescription(\n"
"                    PathJoinSubstitution([launch_dir, 'talker_listener."
"launch.py'])),\n"
"            ]\n"
"        ),\n"
"\n"
"        # include a xml launch file in the chatter_xml_ns namespace\n"
"        GroupAction(\n"
"            actions=[\n"
"                # push_ros_namespace first to set namespace of included "
"nodes for following actions\n"
"                PushRosNamespace('chatter_xml_ns'),\n"
"                IncludeLaunchDescription(\n"
"                    PathJoinSubstitution([launch_dir, 'talker_listener."
"launch.xml'])),\n"
"            ]\n"
"        ),\n"
"\n"
"        # include a yaml launch file in the chatter_yaml_ns namespace\n"
"        GroupAction(\n"
"            actions=[\n"
"                # push_ros_namespace first to set namespace of included "
"nodes for following actions\n"
"                PushRosNamespace('chatter_yaml_ns'),\n"
"                IncludeLaunchDescription(\n"
"                    PathJoinSubstitution([launch_dir, 'talker_listener."
"launch.yaml'])),\n"
"            ]\n"
"        ),\n"
"\n"
"        # start a turtlesim_node in the turtlesim1 namespace\n"
"        Node(\n"
"            package='turtlesim',\n"
"            namespace='turtlesim1',\n"
"            executable='turtlesim_node',\n"
"            name='sim'\n"
"        ),\n"
"\n"
"        # start another turtlesim_node in the turtlesim2 namespace\n"
"        # and use args to set parameters\n"
"        Node(\n"
"            package='turtlesim',\n"
"            namespace='turtlesim2',\n"
"            executable='turtlesim_node',\n"
"            name='sim',\n"
"            parameters=[{\n"
"                'background_r': LaunchConfiguration('background_r'),\n"
"                'background_g': LaunchConfiguration('background_g'),\n"
"                'background_b': LaunchConfiguration('background_b'),\n"
"            }]\n"
"        ),\n"
"\n"
"        # perform remap so both turtles listen to the same command topic\n"
"        Node(\n"
"            package='turtlesim',\n"
"            executable='mimic',\n"
"            name='mimic',\n"
"            remappings=[\n"
"                ('/input/pose', '/turtlesim1/turtle1/pose'),\n"
"                ('/output/cmd_vel', '/turtlesim2/turtle1/cmd_vel'),\n"
"            ]\n"
"        ),\n"
"    ])\n"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:47
msgid "Using the Launch files from the command line"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:50
msgid "Launching"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:52
msgid ""
"Any of the launch files above can be run with ``ros2 launch``. To try them "
"locally, you can either create a new package and use"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:55
msgid "$ ros2 launch <package_name> <launch_file_name>"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:59
msgid "or run the file directly by specifying the path to the launch file"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:61
msgid "$ ros2 launch <path_to_launch_file>"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:66
msgid "Setting arguments"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:68
msgid ""
"To set the arguments that are passed to the launch file, you should use "
"``key:=value`` syntax. For example, you can set the value of "
"``background_r`` in the following way:"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:71
msgid "$ ros2 launch <package_name> <launch_file_name> background_r:=255"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:75
msgid "or"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:77
msgid "$ ros2 launch <path_to_launch_file> background_r:=255"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:82
msgid "Controlling the turtles"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:84
msgid ""
"To test that the remapping is working, you can control the turtles by "
"running the following command in another terminal:"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:86
msgid ""
"$ ros2 run turtlesim turtle_teleop_key --ros-args --remap __ns:=/turtlesim1"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:94
msgid "XML, YAML, or Python: Which should I use?"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:98
msgid ""
"Launch files in ROS 1 were written in XML, so XML may be the most familiar "
"to people coming from ROS 1. To see what's changed, you can visit :doc:"
"`Migrating-from-ROS1/Migrating-Launch-Files`."
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:101
msgid ""
"For most applications the choice of which ROS 2 launch format comes down to "
"developer preference. However, if your launch file requires flexibility that "
"you cannot achieve with XML or YAML, you can use Python to write your launch "
"file. Using Python for ROS 2 launch is more flexible because of following "
"two reasons:"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:105
msgid ""
"Python is a scripting language, and thus you can leverage the language and "
"its libraries in your launch files."
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:106
msgid ""
"`ros2/launch <https://github.com/ros2/launch>`_ (general launch features) "
"and `ros2/launch_ros <https://github.com/ros2/launch_ros>`_ (ROS 2 specific "
"launch features) are written in Python and thus you have lower level access "
"to launch features that may not be exposed by XML and YAML."
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:108
msgid ""
"That being said, a launch file written in Python may be more complex and "
"verbose than one in XML or YAML."
msgstr ""
