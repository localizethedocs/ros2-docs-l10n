# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation humble\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-01 08:39+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:6
msgid "Writing a listener (C++)"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:8
msgid "**Goal:** Learn how to use tf2 to get access to frame transformations."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:10
msgid "**Tutorial level:** Intermediate"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:12
msgid "**Time:** 10 minutes"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:16
msgid "Contents"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:19
msgid "Background"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:21
msgid ""
"In previous tutorials we created a tf2 broadcaster to publish the pose of a "
"turtle to tf2."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:23
msgid "In this tutorial we'll create a tf2 listener to start using tf2."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:26
msgid "Prerequisites"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:28
msgid ""
"This tutorial assumes you have completed the :doc:`tf2 static broadcaster "
"tutorial (C++) <./Writing-A-Tf2-Static-Broadcaster-Cpp>` and the :doc:`tf2 "
"broadcaster tutorial (C++) <./Writing-A-Tf2-Broadcaster-Cpp>`. In the "
"previous tutorial, we created a ``learning_tf2_cpp`` package, which is where "
"we will continue working from."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:32
msgid "Tasks"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:35
msgid "1 Write the listener node"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:37
msgid ""
"Let's first create the source files. Go to the ``learning_tf2_cpp`` package "
"we created in the previous tutorial. Inside the ``src`` directory download "
"the example listener code by entering the following command:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:43
#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:296
#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:314
#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:336
msgid "Linux"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:45
#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:51
msgid ""
"$ wget https://raw.githubusercontent.com/ros/geometry_tutorials/rolling/"
"turtle_tf2_cpp/src/turtle_tf2_listener.cpp"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:49
#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:302
#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:320
#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:342
msgid "macOS"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:55
#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:306
#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:326
#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:348
msgid "Windows"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:57
#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:350
msgid "In a Windows command line prompt:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:59
msgid ""
"$ curl -sk https://raw.githubusercontent.com/ros/geometry_tutorials/rolling/"
"turtle_tf2_cpp/src/turtle_tf2_listener.cpp -o turtle_tf2_listener.cpp"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:63
#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:356
msgid "Or in powershell:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:65
msgid ""
"$ curl https://raw.githubusercontent.com/ros/geometry_tutorials/rolling/"
"turtle_tf2_cpp/src/turtle_tf2_listener.cpp -o turtle_tf2_listener.cpp"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:69
msgid "Open the file using your preferred text editor."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:71
msgid ""
"#include <chrono>\n"
"#include <functional>\n"
"#include <memory>\n"
"#include <string>\n"
"\n"
"#include \"geometry_msgs/msg/transform_stamped.hpp\"\n"
"#include \"geometry_msgs/msg/twist.hpp\"\n"
"#include \"rclcpp/rclcpp.hpp\"\n"
"#include \"tf2/exceptions.h\"\n"
"#include \"tf2_ros/transform_listener.h\"\n"
"#include \"tf2_ros/buffer.h\"\n"
"#include \"turtlesim/srv/spawn.hpp\"\n"
"\n"
"using namespace std::chrono_literals;\n"
"\n"
"class FrameListener : public rclcpp::Node\n"
"{\n"
"public:\n"
"  FrameListener()\n"
"  : Node(\"turtle_tf2_frame_listener\"),\n"
"    turtle_spawning_service_ready_(false),\n"
"    turtle_spawned_(false)\n"
"  {\n"
"    // Declare and acquire `target_frame` parameter\n"
"    target_frame_ = this->declare_parameter<std::string>(\"target_frame\", "
"\"turtle1\");\n"
"\n"
"    tf_buffer_ =\n"
"      std::make_unique<tf2_ros::Buffer>(this->get_clock());\n"
"    tf_listener_ =\n"
"      std::make_shared<tf2_ros::TransformListener>(*tf_buffer_);\n"
"\n"
"    // Create a client to spawn a turtle\n"
"    spawner_ =\n"
"      this->create_client<turtlesim::srv::Spawn>(\"spawn\");\n"
"\n"
"    // Create turtle2 velocity publisher\n"
"    publisher_ =\n"
"      this->create_publisher<geometry_msgs::msg::Twist>(\"turtle2/cmd_vel\", "
"1);\n"
"\n"
"    // Call on_timer function every second\n"
"    timer_ = this->create_wall_timer(\n"
"      1s, std::bind(&FrameListener::on_timer, this));\n"
"  }\n"
"\n"
"private:\n"
"  void on_timer()\n"
"  {\n"
"    // Store frame names in variables that will be used to\n"
"    // compute transformations\n"
"    std::string fromFrameRel = target_frame_.c_str();\n"
"    std::string toFrameRel = \"turtle2\";\n"
"\n"
"    if (turtle_spawning_service_ready_) {\n"
"      if (turtle_spawned_) {\n"
"        geometry_msgs::msg::TransformStamped t;\n"
"\n"
"        // Look up for the transformation between target_frame and turtle2 "
"frames\n"
"        // and send velocity commands for turtle2 to reach target_frame\n"
"        try {\n"
"          t = tf_buffer_->lookupTransform(\n"
"            toFrameRel, fromFrameRel,\n"
"            tf2::TimePointZero);\n"
"        } catch (const tf2::TransformException & ex) {\n"
"          RCLCPP_INFO(\n"
"            this->get_logger(), \"Could not transform %s to %s: %s\",\n"
"            toFrameRel.c_str(), fromFrameRel.c_str(), ex.what());\n"
"          return;\n"
"        }\n"
"\n"
"        geometry_msgs::msg::Twist msg;\n"
"\n"
"        static const double scaleRotationRate = 1.0;\n"
"        msg.angular.z = scaleRotationRate * atan2(\n"
"          t.transform.translation.y,\n"
"          t.transform.translation.x);\n"
"\n"
"        static const double scaleForwardSpeed = 0.5;\n"
"        msg.linear.x = scaleForwardSpeed * sqrt(\n"
"          pow(t.transform.translation.x, 2) +\n"
"          pow(t.transform.translation.y, 2));\n"
"\n"
"        publisher_->publish(msg);\n"
"      } else {\n"
"        RCLCPP_INFO(this->get_logger(), \"Successfully spawned\");\n"
"        turtle_spawned_ = true;\n"
"      }\n"
"    } else {\n"
"      // Check if the service is ready\n"
"      if (spawner_->service_is_ready()) {\n"
"        // Initialize request with turtle name and coordinates\n"
"        // Note that x, y and theta are defined as floats in turtlesim/srv/"
"Spawn\n"
"        auto request = std::make_shared<turtlesim::srv::Spawn::Request>();\n"
"        request->x = 4.0;\n"
"        request->y = 2.0;\n"
"        request->theta = 0.0;\n"
"        request->name = \"turtle2\";\n"
"\n"
"        // Call request\n"
"        using ServiceResponseFuture =\n"
"          rclcpp::Client<turtlesim::srv::Spawn>::SharedFuture;\n"
"        auto response_received_callback = [this](ServiceResponseFuture "
"future) {\n"
"            auto result = future.get();\n"
"            if (strcmp(result->name.c_str(), \"turtle2\") == 0) {\n"
"              turtle_spawning_service_ready_ = true;\n"
"            } else {\n"
"              RCLCPP_ERROR(this->get_logger(), \"Service callback result "
"mismatch\");\n"
"            }\n"
"          };\n"
"        auto result = spawner_->async_send_request(request, "
"response_received_callback);\n"
"      } else {\n"
"        RCLCPP_INFO(this->get_logger(), \"Service is not ready\");\n"
"      }\n"
"    }\n"
"  }\n"
"\n"
"  // Boolean values to store the information\n"
"  // if the service for spawning turtle is available\n"
"  bool turtle_spawning_service_ready_;\n"
"  // if the turtle was successfully spawned\n"
"  bool turtle_spawned_;\n"
"  rclcpp::Client<turtlesim::srv::Spawn>::SharedPtr spawner_{nullptr};\n"
"  rclcpp::TimerBase::SharedPtr timer_{nullptr};\n"
"  rclcpp::Publisher<geometry_msgs::msg::Twist>::SharedPtr "
"publisher_{nullptr};\n"
"  std::shared_ptr<tf2_ros::TransformListener> tf_listener_{nullptr};\n"
"  std::unique_ptr<tf2_ros::Buffer> tf_buffer_;\n"
"  std::string target_frame_;\n"
"};\n"
"\n"
"int main(int argc, char * argv[])\n"
"{\n"
"  rclcpp::init(argc, argv);\n"
"  rclcpp::spin(std::make_shared<FrameListener>());\n"
"  rclcpp::shutdown();\n"
"  return 0;\n"
"}"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:210
msgid "1.1 Examine the code"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:212
msgid ""
"To understand how the service behind spawning turtle works, please refer to :"
"doc:`writing a simple service and client (C++) <../../Beginner-Client-"
"Libraries/Writing-A-Simple-Cpp-Service-And-Client>` tutorial."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:214
msgid ""
"Now, let's take a look at the code that is relevant to get access to frame "
"transformations. The ``tf2_ros`` contains a ``TransformListener`` class that "
"makes the task of receiving transforms easier."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:217
msgid "#include \"tf2_ros/transform_listener.h\""
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:221
msgid ""
"Here, we create a ``TransformListener`` object. Once the listener is "
"created, it starts receiving tf2 transformations over the wire, and buffers "
"them for up to 10 seconds."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:224
msgid ""
"tf_listener_ =\n"
"  std::make_shared<tf2_ros::TransformListener>(*tf_buffer_);"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:229
msgid ""
"Finally, we query the listener for a specific transformation. We call "
"``lookup_transform`` method with following arguments:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:232
msgid "Target frame"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:234
msgid "Source frame"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:236
msgid "The time at which we want to transform"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:238
msgid ""
"Providing ``tf2::TimePointZero`` will just get us the latest available "
"transform. All this is wrapped in a try-catch block to handle possible "
"exceptions."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:241
msgid ""
"t = tf_buffer_->lookupTransform(\n"
"  toFrameRel, fromFrameRel,\n"
"  tf2::TimePointZero);"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:247
msgid ""
"The resulting transformation represents the position and orientation of the "
"target turtle relative to ``turtle2``. The angle between the turtles is then "
"used to calculate a velocity command to follow the target turtle. For more "
"general information about tf2 see also the :doc:`tf2 page in the Concepts "
"section <../../../Concepts/Intermediate/About-Tf2>`."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:252
msgid "1.2 CMakeLists.txt"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:254
msgid ""
"Navigate one level back to the ``learning_tf2_cpp`` directory, where the "
"``CMakeLists.txt`` and ``package.xml`` files are located."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:256
msgid ""
"Now open the ``CMakeLists.txt`` add the executable and name it "
"``turtle_tf2_listener``, which you'll use later with ``ros2 run``."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:258
msgid ""
"add_executable(turtle_tf2_listener src/turtle_tf2_listener.cpp)\n"
"ament_target_dependencies(\n"
"    turtle_tf2_listener\n"
"    geometry_msgs\n"
"    rclcpp\n"
"    tf2\n"
"    tf2_ros\n"
"    turtlesim\n"
")"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:270
msgid ""
"Finally, add the ``install(TARGETS…)`` section so ``ros2 run`` can find your "
"executable:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:272
msgid ""
"install(TARGETS\n"
"    turtle_tf2_listener\n"
"    DESTINATION lib/${PROJECT_NAME})"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:279
msgid "2 Update the launch file"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:281
msgid ""
"Open the launch file called ``turtle_tf2_demo.launch.py`` in the ``src/"
"learning_tf2_cpp/launch`` directory with your text editor, add two new nodes "
"to the launch description, add a launch argument, and add the imports. The "
"resulting file should look like:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:284
msgid ""
"from launch import LaunchDescription\n"
"from launch.actions import DeclareLaunchArgument\n"
"from launch.substitutions import LaunchConfiguration\n"
"\n"
"from launch_ros.actions import Node\n"
"\n"
"\n"
"def generate_launch_description():\n"
"    return LaunchDescription([\n"
"        Node(\n"
"            package='turtlesim',\n"
"            executable='turtlesim_node',\n"
"            name='sim'\n"
"        ),\n"
"        Node(\n"
"            package='learning_tf2_cpp',\n"
"            executable='turtle_tf2_broadcaster',\n"
"            name='broadcaster1',\n"
"            parameters=[\n"
"                {'turtlename': 'turtle1'}\n"
"            ]\n"
"        ),\n"
"        DeclareLaunchArgument(\n"
"            'target_frame', default_value='turtle1',\n"
"            description='Target frame name.'\n"
"        ),\n"
"        Node(\n"
"            package='learning_tf2_cpp',\n"
"            executable='turtle_tf2_broadcaster',\n"
"            name='broadcaster2',\n"
"            parameters=[\n"
"                {'turtlename': 'turtle2'}\n"
"            ]\n"
"        ),\n"
"        Node(\n"
"            package='learning_tf2_cpp',\n"
"            executable='turtle_tf2_listener',\n"
"            name='listener',\n"
"            parameters=[\n"
"                {'target_frame': LaunchConfiguration('target_frame')}\n"
"            ]\n"
"        ),\n"
"    ])\n"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:287
msgid ""
"This will declare a ``target_frame`` launch argument, start a broadcaster "
"for the second turtle that we will spawn and a listener that will subscribe "
"to those transformations."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:290
msgid "3 Build"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:292
msgid ""
"Run ``rosdep`` in the root of your workspace to check for missing "
"dependencies."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:298
msgid "$ rosdep install -i --from-path src --rosdistro rolling -y"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:304
#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:308
msgid ""
"rosdep only runs on Linux, so you will need to install ``geometry_msgs`` and "
"``turtlesim`` dependencies yourself"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:310
msgid "Still in the root of your workspace, build your package:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:316
#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:322
msgid "$ colcon build --packages-select learning_tf2_cpp"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:328
msgid "$ colcon build --merge-install --packages-select learning_tf2_cpp"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:332
msgid ""
"Open a new terminal, navigate to the root of your workspace, and source the "
"setup files:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:338
#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:344
msgid "$ . install/setup.bash"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:352
msgid "$ call install\\setup.bat"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:358
msgid "$ .\\install\\setup.ps1"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:363
msgid "4 Run"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:365
msgid "Now you're ready to start your full turtle demo:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:367
msgid "$ ros2 launch learning_tf2_cpp turtle_tf2_demo.launch.py"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:371
msgid ""
"You should see the turtle sim with two turtles. In the second terminal "
"window type the following command:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:374
msgid "$ ros2 run turtlesim turtle_teleop_key"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:378
msgid ""
"To see if things work, simply drive around the first turtle using the arrow "
"keys (make sure your terminal window is active, not your simulator window), "
"and you'll see the second turtle following the first one!"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:381
msgid "Summary"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst:383
msgid ""
"In this tutorial you learned how to use tf2 to get access to frame "
"transformations. You also have finished writing your own turtlesim demo that "
"you first tried in :doc:`Introduction to tf2 <./Introduction-To-Tf2>` "
"tutorial."
msgstr ""
