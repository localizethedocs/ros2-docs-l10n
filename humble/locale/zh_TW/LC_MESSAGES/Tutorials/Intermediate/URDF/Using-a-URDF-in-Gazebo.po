# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation humble\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 06:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:2
msgid "Using a URDF in Gazebo"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:4
msgid "**Goal:** Simulate your URDF in the Gazebo simulator"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:6
msgid "**Tutorial level:** Intermediate"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:8
msgid "**Time:** 30 minutes"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:13
msgid "Contents"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:15
msgid ""
"Based on `this ROS 1 tutorial <http://wiki.ros.org/urdf/Tutorials/"
"Using%20a%20URDF%20in%20Gazebo>`_."
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:17
msgid "Let's start by installing the demo package and its dependencies."
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:21
msgid "Ubuntu Packages"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:23
msgid "sudo apt install ros-rolling-urdf-sim-tutorial"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:27
msgid "RHEL Packages"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:29
msgid "sudo dnf install ros-rolling-urdf-sim-tutorial"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:33
msgid "From Source"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:35
msgid "git clone https://github.com/ros/urdf_sim_tutorial.git -b ros2"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:40
msgid "Nonfunctional Gazebo Interface"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:41
msgid ""
"We can spawn the model we already created into Gazebo using ``gazebo.launch."
"py``"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:43
msgid "ros2 launch urdf_sim_tutorial gazebo.launch.py"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:47
msgid "This launch file"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:49
msgid ""
"Loads the urdf from :doc:`the macro tutorial <Using-Xacro-to-Clean-Up-a-URDF-"
"File>` and publishes it as a topic (``/robot_description``)"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:50
msgid "Launches an empty Gazebo world"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:51
msgid "Runs the script to read the urdf from the topic and spawn it in Gazebo."
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:52
msgid "By default, the Gazebo GUI will also be displayed, and look like this:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:-1
msgid "Nonfunctional robot in Gazebo"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:58
msgid ""
"However, it doesn't do anything, and is missing lots of key information that "
"ROS would need to use this robot. In :doc:`other <Building-a-Visual-Robot-"
"Model-with-URDF-from-Scratch>` :doc:`tutorials <Building-a-Movable-Robot-"
"Model-with-URDF>` we used `joint_state_publisher <https://index.ros.org/p/"
"joint_state_publisher/github-ros-joint_state_publisher/>`_ to specify the "
"pose of each joint. However, the robot itself should provide that "
"information in the real world or in Gazebo. Yet without specifying that, "
"Gazebo doesn't know to publish that information."
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:63
msgid ""
"To get the robot to be interactive (with you and ROS), we need to specify "
"two things: Plugins and Controllers."
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:66
msgid "Side note: Configuring Meshes"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:-1
msgid "Robot with missing meshes"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:72
msgid ""
"If you are following along at home with your own robot, or something else is "
"amiss, the meshes may be missing from your model in the Gazebo GUI (i.e. the "
"gripper meshes are not there). This may also cause Gazebo to take several "
"seconds to start up after the splash screen appears because it is checking "
"the internet for missing models."
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:75
msgid ""
"This is because your URDF package needs to explicitly tell Gazebo where to "
"load the meshes from. We do this by modifying the ``package.xml`` of the "
"package where our URDF meshes live to include a new export."
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:78
msgid ""
"<export>\n"
"  <build_type>ament_cmake</build_type>\n"
"  <gazebo_ros gazebo_model_path=\"${prefix}/..\"/>\n"
"</export>"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:85
msgid ""
"The reasoning behind the exact value of the ``gazebo_model_path`` attribute "
"is `a separate issue <https://github.com/ros-simulation/gazebo_ros_pkgs/"
"issues/1500>`_, but suffice to say, setting it to this value will work "
"assuming:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:87
msgid ""
"Your mesh filenames are specified in the URDF using the ``package://"
"package_name/possible_folder/filename.ext`` syntax."
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:88
msgid "The meshes are installed (via CMake) into the proper share folder."
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:91
msgid "Gazebo Plugin"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:92
msgid ""
"To get ROS 2 to interact with Gazebo, we have to dynamically link to the ROS "
"library that will tell Gazebo what to do. Theoretically, this allows for "
"other Robot Operating Systems to interact with Gazebo in a generic way. In "
"practice, its just ROS."
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:96
msgid ""
"Specifically, Gazebo / ROS 2 interaction all happens by linking to a ROS 2 "
"Control library, with new URDF tags."
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:98
msgid ""
"We specify the following in the URDF, right before the closing ``</robot>`` "
"tag:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:100
msgid ""
"<ros2_control name=\"GazeboSystem\" type=\"system\">\n"
"  <hardware>\n"
"    <plugin>gazebo_ros2_control/GazeboSystem</plugin>\n"
"  </hardware>\n"
"  <joint name=\"head_swivel\" />\n"
"</ros2_control>\n"
"\n"
"<gazebo>\n"
"  <plugin filename=\"libgazebo_ros2_control.so\" "
"name=\"gazebo_ros2_control\">\n"
"    <parameters>$(find urdf_sim_tutorial)/config/09a-minimal.yaml</"
"parameters>\n"
"  </plugin>\n"
"</gazebo>"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:117
msgid ""
"The ``<gazebo>`` and ``<plugin>`` tags work the same way they did in ROS 1."
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:118
msgid ""
"We must specify at least one joint for the minimal example to work, but "
"we'll add more later."
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:120
msgid "The minimal configuration file is:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:122
msgid ""
"controller_manager:\n"
"  ros__parameters:\n"
"    update_rate: 100"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:129
msgid ""
"You can see this in `09a-minimal.urdf.xacro <https://github.com/ros/"
"urdf_sim_tutorial/blob/ros2/urdf/09a-minimal.urdf.xacro>`_ and by running"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:131
msgid "ros2 launch urdf_sim_tutorial 09a-minimal.launch.py"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:135
msgid ""
"This starts up a ``/controller_manager`` node and with the "
"``load_controller`` service, but doesn't add any immediately useful "
"interaction with the robot. For that we need to specify more information in "
"the controller yaml."
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:139
msgid "Spawning Controllers"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:140
msgid ""
"Now that we've linked ROS and Gazebo, we need to specify some bits of ROS "
"code that we want to run within Gazebo, which we generically call "
"controllers. Now we can look at a larger example based on `this yaml file "
"<https://github.com/ros/urdf_sim_tutorial/blob/ros2/config/joints.yaml>`_ "
"that specifies our first controller."
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:143
msgid ""
"controller_manager:\n"
"  ros__parameters:\n"
"    update_rate: 100\n"
"    use_sim_time: true\n"
"\n"
"    joint_state_broadcaster:\n"
"      type: joint_state_broadcaster/JointStateBroadcaster"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:153
msgid ""
"This controller is found in the ``joint_state_broadcaster`` package and "
"publishes the state of the robot's joints into ROS directly from Gazebo."
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:155
msgid ""
"In `09-joints.launch.py <https://github.com/ros/urdf_sim_tutorial/blob/ros2/"
"launch/09-joints.launch.py>`_ we also add a ``ros2_control`` command via "
"``ExecuteProcess`` to start this specific controller."
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:157
msgid "You can launch this, but its still not quite there."
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:159
msgid "ros2 launch urdf_sim_tutorial 09-joints.launch.py"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:163
msgid ""
"This will run the controller and in fact publish on the ``/joint_states`` "
"topic, but with nothing in them."
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:165
msgid ""
"header:\n"
"  stamp:\n"
"    sec: 13\n"
"    nanosec: 331000000\n"
"  frame_id: ''\n"
"name: []\n"
"position: []\n"
"velocity: []\n"
"effort: []"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:177
msgid ""
"What else do you want Gazebo‽ Well, it wants to know more information about "
"the joints."
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:181
msgid "ROS 2 Control Joint Definitions"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:182
msgid ""
"For every non-fixed joint, we need to add information about the joint in the "
"``ros2_control`` tag which tells it what interfaces are supported. Let's "
"start with the head joint. Modify the joint tag in your `URDF <https://"
"github.com/ros/urdf_sim_tutorial/blob/ros2/urdf/10-firsttransmission.urdf."
"xacro#L241>`_ to be the following:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:186
msgid ""
"   <joint name=\"head_swivel\">\n"
"     <command_interface name=\"position\" />\n"
"     <command_interface name=\"velocity\" />\n"
"     <state_interface name=\"position\"/>\n"
"     <state_interface name=\"velocity\"/>\n"
"   </joint>\n"
"\n"
"* Note that the joint name here matches the joint name from the standard "
"URDF ``<joint>`` tag.\n"
"* For the moment, let us focus on the ``state_interface``s, in which we "
"specify that we want to publish both position and velocity of this joint."
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:198
msgid "You can run this URDF with our previous launch configuration."
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:200
msgid ""
"ros2 launch urdf_sim_tutorial 09-joints.launch.py urdf_package_path:=urdf/10-"
"firsttransmission.urdf.xacro"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:204
msgid ""
"Now, the head is displayed properly in RViz because the head joint is listed "
"in the ``joint_states`` messages."
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:206
msgid ""
"header:\n"
"  stamp:\n"
"    sec: 4\n"
"    nanosec: 707000000\n"
"  frame_id: ''\n"
"name:\n"
"- head_swivel\n"
"position:\n"
"- -2.9051283156888985e-08\n"
"velocity:\n"
"- 7.575990694887896e-06\n"
"effort:\n"
"- .nan"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:223
msgid ""
"We could continue adding joint definitions for all the non-fixed joints (and "
"we will) so that all the joints are properly published. But, there's more to "
"life than just looking at robots. We want to control them. So, let's get "
"another controller in here."
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:229
msgid "Joint Control"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:230
msgid ""
"`Here's <https://github.com/ros/urdf_sim_tutorial/blob/ros2/config/head."
"yaml>`_ the next controller config we're adding."
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:232
msgid ""
"controller_manager:\n"
"  ros__parameters:\n"
"    # ... snip ...\n"
"\n"
"    head_controller:\n"
"      type: position_controllers/JointGroupPositionController\n"
"\n"
"head_controller:\n"
"  ros__parameters:\n"
"    joints:\n"
"      - head_swivel\n"
"    interface_name: position"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:248
msgid ""
"In English, this is saying to add a new ``JointGroupPositionController`` "
"called ``head_controller``, and then, in a new parameter namespace, specify "
"which joints are included and that we are publishing positions. We can do "
"this because we specified ``<command_interface name=\"position\" />`` in the "
"joint tag."
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:251
msgid ""
"Now we can launch this with the added config and another ``ros2 control`` "
"command as before"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:253
msgid "ros2 launch urdf_sim_tutorial 10-head.launch.py"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:257
msgid ""
"Now Gazebo is subscribed to a new topic, and you can then control the "
"position of the head by publishing a value in ROS."
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:259
msgid ""
"ros2 topic pub /head_controller/commands std_msgs/msg/Float64MultiArray "
"\"data: [-0.707]\""
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:263
msgid ""
"When this command is published, the position will immediately change to the "
"specified value."
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:266
msgid "Controlling Multiple Joints and Mimicking"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:267
msgid ""
"We can change the URDF for the Gripper joints in a similar way, but in this "
"case, we'll associate multiple joints with one controller. The updated `ROS "
"parameters are here <https://github.com/ros/urdf_sim_tutorial/blob/ros2/"
"config/gripper.yaml>`_. We also must update `the URDF to include three "
"additional joint interfaces <https://github.com/ros/urdf_sim_tutorial/blob/"
"ros2/urdf/12-gripper.urdf.xacro>`_."
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:271
msgid "To launch this,"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:273
msgid "ros2 launch urdf_sim_tutorial 12-gripper.launch.py"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:277
msgid ""
"We can now move the gripper with an array of three floats. Open and out:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:280
msgid ""
"ros2 topic pub /gripper_controller/commands std_msgs/msg/Float64MultiArray "
"\"data: [0.0, 0.5, 0.5]\""
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:284
msgid "Closed and retracted:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:286
msgid ""
"ros2 topic pub /gripper_controller/commands std_msgs/msg/Float64MultiArray "
"\"data: [-0.4, 0.0, 0.0]\""
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:290
msgid ""
"This gripper is actually set up in a way that we ALWAYS want the left "
"gripper joint to have the same value as the right gripper joint. We can code "
"this into the URDF and controllers with a few steps."
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:293
msgid ""
"Insert ``<mimic joint=\"left_gripper_joint\"/>`` into the URDF definition of "
"the ``right_gripper_joint`` (which is done a bit hackily in `the xacro here "
"<https://github.com/ros/urdf_sim_tutorial/blob/ros2/urdf/12a-mimic-gripper."
"urdf.xacro>`_"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:294
msgid ""
"Insert ``<param name=\"mimic\">left_gripper_joint</param>`` into the "
"``ros2_control`` joint interface for ``right_gripper_joint``."
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:295
msgid ""
"In our new `control parameters <https://github.com/ros/urdf_sim_tutorial/"
"blob/ros2/config/mimic-gripper.urdf>`_, we only list the two joints for the "
"gripper controller, leaving out ``right_gripper_joint``."
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:297
msgid "We can launch this with"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:299
msgid ""
"ros2 launch urdf_sim_tutorial 12-gripper.launch.py urdf_package_path:"
"=urdf/12a-mimic-gripper.urdf.xacro"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:303
msgid "and now we can control it with just two values, e.g."
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:305
msgid ""
"ros2 topic pub /gripper_controller/commands std_msgs/msg/Float64MultiArray "
"\"data: [0.0, 0.5]\""
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:310
msgid "The Wheels on the Droid Go Round and Round"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:311
msgid ""
"To drive the robot around, we first must specify more interfaces in the "
"``ros2_control`` tag of `the URDF for each of the four wheels <https://"
"github.com/ros/urdf_sim_tutorial/blob/ros2/urdf/13-diffdrive.urdf.xacro>`_, "
"however, now only the velocity command interface is required."
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:313
msgid ""
"We could specify controllers for each of the individual wheels, but where's "
"the fun in that? Instead we want to control all the wheels together. For "
"that, we're going to need `a lot more ROS parameters <https://github.com/ros/"
"urdf_sim_tutorial/blob/ros2/config/diffdrive.yaml>`_ to make use of the "
"``DiffDriveController`` which subscribes to a standard Twist ``cmd_vel`` "
"message and moves the robot accordingly."
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:317
msgid "ros2 launch urdf_sim_tutorial 13-diffdrive.launch.py"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:321
msgid ""
"In addition to loading the above configuration, this also opens the "
"``RobotSteering`` panel, allowing you to drive the R2D2 robot around, while "
"also observing its actual behavior (in Gazebo) and it's visualized behavior "
"(in RViz):"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:-1
msgid "Gazebo with Driving Interface"
msgstr ""

#: ../../../source/Tutorials/Intermediate/URDF/Using-a-URDF-in-Gazebo.rst:327
msgid "Congrats! Now you're simulating robots with URDF."
msgstr ""
