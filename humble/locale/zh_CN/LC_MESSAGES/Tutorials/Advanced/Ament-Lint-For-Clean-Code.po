# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation humble\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-01 08:39+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:2
msgid "Ament Lint CLI Utilities"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:4
msgid ""
"**Goal:** Learn how to use ``ament_lint`` and related tools to identify and "
"fix code quality issues."
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:6
msgid "**Tutorial level:** Advanced"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:8
msgid "**Time:** 10 minutes"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:12
msgid "Table of Contents"
msgstr "目录"

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:15
msgid "Background"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:17
msgid ""
"The ``ament`` family of CLI tools are Python tools used for software "
"development with ROS 2. Ament tools can be used from any build system, but a "
"subset of these tools, the ``ament_cmake`` tools, are designed specifically "
"to CMake-based development easier. Ament ships with a collection of CLI "
"programs that can help users write code that meet the ROS 2 coding "
"standards. Using these tools can greatly increase development velocity and "
"help users write ROS applications and core code that meet `the ROS project's "
"coding standards <../../The-ROS2-Project/Contributing/Code-Style-Language-"
"Versions>`. We recommend that ROS developers familiarize themselves with "
"these tools and use them before submitting their pull requests."
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:24
msgid "Prerequisites"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:26
msgid ""
"You should have the ``ament`` packages installed as part of your regular ROS "
"2 setup."
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:28
msgid ""
"If you need to install ROS 2, see the :doc:`Installation instructions <../../"
"Installation>`."
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:32
msgid "Ament Lint CLI Tools"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:34
msgid ""
"All ament linting tools use a similar CLI pattern. They take in a directory, "
"a list of directories, file, or list of files, analyze the input files, and "
"generate a report. All ament linting tools have the following built-in "
"options. **The most up to date and accurate documentation for a given ament "
"tool can be found by using the tools built in** ``--help`` **functionality.**"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:39
msgid ""
"``-h, --help`` - shows a help message and exit. The built-in help messages "
"usually have the most accurate and up-to-date documentation of the tool."
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:41
msgid ""
"``--exclude [filename ...]`` - The filenames to exclude from analysis, "
"including wildcards."
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:42
msgid ""
"``--xunit-file XUNIT_FILE`` - Generate a `xunit <https://xunit.net/>`_ "
"compliant XML file. These files are most commonly used by IDEs and CI to "
"automate the ingestion of test results."
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:48
msgid "1 ``ament_copyright``"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:50
msgid ""
"The ``ament_copyright`` CLI can be used to check and update the copyright "
"declaration in ROS source code. This tool can also be used to check for the "
"presence of an appropriate software license, copyright year, and copyright "
"holders in your source code. The ``ament_copyright`` tool works relative to "
"the directory in which it is called, and walks the subdirectories and checks "
"each source file within the directory. You can use ``ament_copyright`` to "
"check your ROS package, ROS workspace, directory, or a single source file by "
"simply moving to the appropriate root directory and calling the command. "
"``ament_copyright`` can also be used to used to automatically apply a "
"copyright and license to source code files that are missing them."
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:58
msgid "1.1 ``ament_copyright`` Arguments"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:60
msgid ""
"By default ``ament_copyright`` walks the directory in which it is called, "
"including subdirectories and returns a report that lists all files that are "
"missing a copyright notice. The program takes a single optional argument "
"which is a list of directories that should be scanned for the report. For "
"example, if you wish to scan just source and header files for copyright "
"notices you can call: ``ament_copyright ./src ./include``."
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:65
msgid "1.2 ``ament_copyright`` Options"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:67
msgid "``ament_copyright`` supports the following options:"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:69
msgid ""
"``--add-missing COPYRIGHT_NAME LICENSE`` - Add missing copyright notice and "
"license information using the passed copyright holder and license. "
"``LICENSE`` passed to this option is the name of the license to be used. A "
"full list of available licenses can be found by calling ``ament_copyright --"
"list-licenses``"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:72
msgid ""
"``--add-copyright-year`` - Add the current year to existing copyright "
"notices."
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:73
msgid "``--list-copyright-names`` - List names of known copyright holders."
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:74
msgid "``--list-licenses`` - List names of known licenses."
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:75
msgid ""
"``--verbose`` - Show all files instead of only the ones with errors / "
"modifications."
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:78
msgid "1.3 ``ament_copyright`` Example"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:80
msgid ""
"To check if your ROS package has an appropriate copyright and license file "
"simply call ``ament_copyright`` with no arguments. Using the ``--verbose`` "
"option will list all checked files."
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:83
msgid ""
"$ ament_copyright --verbose\n"
"my_package/src/new_file.cpp: could not find copyright notice\n"
"my_package/src/old_file.cpp: copyright=Open Source Robotics Foundation, Inc. "
"(2023), license=apache2\n"
"my_package/include/new_file.h: could not find copyright notice\n"
"my_package/include/old_file.h: copyright=Open Source Robotics Foundation, "
"Inc. (2023), license=apache2"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:93
msgid "2 ``ament_cppcheck``"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:95
msgid ""
"The ``ament_cppcheck`` command line tool can be used to perform static "
"analysis of C++ source code files. `Static analysis <https://en.wikipedia."
"org/wiki/Static_program_analysis>`_ is the process of automatically "
"reviewing source code files for patterns that can often cause issues after "
"compilation. Some versions of `cppcheck <https://github.com/danmar/"
"cppcheck>`__, the underlying utility used by ``ament_cppcheck``, can be "
"rather slow. For this reason ``ament_cppcheck`` may be disabled on some "
"systems. To enable it, you simply need to set the "
"``AMENT_CPPCHECK_ALLOW_SLOW_VERSIONS`` environment variable."
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:103
msgid "2.1 ``ament_cppcheck`` Arguments"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:105
msgid ""
"By default ``ament_cppcheck`` walks the directory in which it is called, "
"including subdirectories and returns a report that lists all of the "
"potential issues in a source code file. The program takes a single optional "
"argument which is a list of directories that should be scanned for the "
"report. For example, if you wish to scan just a recently modified file you "
"can call ``ament_cppcheck ./src/my_cpp_file.cpp``."
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:110
msgid "2.2 ``ament_cppcheck`` Options"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:112
msgid "``ament_cppcheck`` supports the following options:"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:114
msgid ""
"``--libraries [LIBRARIES ...]`` - Library configurations to load in addition "
"to the standard libraries of C and C++. Each library is passed to cppcheck "
"as '--library=<library_name>'"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:116
msgid ""
"``--include_dirs [INCLUDE_DIRS ...]`` - Include directories for C/C++ files "
"being checked. Each directory is passed to cppcheck as '-I "
"<include_dir>' (default: None)"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:118
msgid ""
"``--cppcheck-version`` - Get the cppcheck version, print it, and then exit."
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:121
msgid "2.3 ``ament_cppcheck`` Example"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:123
msgid ""
"Create the following simple C++ program in a file named ``example.cpp``."
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:125
msgid ""
"int main()\n"
"{\n"
"    char a[10];\n"
"    a[10] = 0;\n"
"    return 0;\n"
"}"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:135
msgid ""
"This simple program accesses a part of memory out of bounds of the allocated "
"array. Running ``ament_cppcheck`` in the directory with the file will yield "
"the following results:"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:138
msgid ""
"$ ament_cppcheck\n"
"[example.cpp:4]: (error: arrayIndexOutOfBounds) Array 'a[10]' accessed at "
"index 10, which is out of bounds."
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:145
msgid "3 ``ament_cpplint``"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:147
msgid ""
"``ament_cpplint`` can be used to check your C++ code against the `Google "
"style conventions <https://google.github.io/styleguide/cppguide.html>`_ "
"using `cpplint <https://github.com/cpplint/cpplint?tab=readme-ov-file>`_. "
"``ament_cpplint`` will scan the current directory and subdirectories for all "
"C++ header and source files and apply the CppLint application to the file "
"and return the results. At this time ``ament_cpplint`` is unable to address "
"issues it finds automatically, if you would like to fix the formatting "
"issues automatically please see ``ament_uncrustify``."
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:153
msgid "3.1 ``ament_cpplint`` Arguments"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:154
msgid ""
"The program takes a single optional argument which is a list of directories "
"that should be scanned for the report. For example, if you wish to scan just "
"source and header files for copyright notices you can call: "
"``ament_copyright ./src ./include``."
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:159
msgid "3.2 ``ament_cpplint`` Options"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:161
msgid ""
"``--filters FILTER,FILTER,...`` - A comma separated list of category filters "
"to apply."
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:162
msgid "``--linelength N`` - The maximum line length (default: 100)."
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:163
msgid "``--root ROOT`` - The --root option for cpplint."
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:167
msgid "3.3 ``ament_cpplint`` Example"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:169
msgid ""
"Let's create a simple C++ program named ``example.cpp``. We will add a few "
"lines of code that violate coding standards:"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:172
msgid ""
"int main()\n"
"{\n"
"  int a = 10;\n"
"  int b = 10;\n"
"  int c = 0;/*<trailing whitespace>*/\n"
"  if( a == b)  {/*<tab>*/      c=a;}/*<trailing whitespace>*/\n"
"  return 0;\n"
"}"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:184
msgid ""
"Applying ``ament_cpplint`` to this file will yield the following errors:"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:186
msgid ""
"example.cpp:0:  No copyright message found.  You should have a line: "
"\"Copyright [year] <Copyright Owner>\"  [legal/copyright] [5]\n"
"example.cpp:6:  Line ends in whitespace.  Consider deleting these extra "
"spaces.  [whitespace/end_of_line] [4]\n"
"example.cpp:6:  Tab found; better to use spaces  [whitespace/tab] [1]\n"
"example.cpp:6:  Line ends in whitespace.  Consider deleting these extra "
"spaces.  [whitespace/end_of_line] [4]\n"
"example.cpp:6:  Missing spaces around =  [whitespace/operators] [4]"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:196
msgid "4 ``ament_flake8``"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:198
msgid ""
"`Flake8 <https://pypi.org/project/flake8/>`_ is a Python tool for linting "
"and style enforcement. The ``ament_flake8`` command line tool can be used to "
"quickly perform linting of Python source code files using `Flake8 <https://"
"pypi.org/project/flake8/>`_. This tool will help you locate minor errors and "
"style problems with your ROS Python programs such as trailing whitespace, "
"overly long lines of code, poorly spaced function arguments, and much more! "
"Note, however, that ``flake8`` and ``ament_flake8`` cannot automatically "
"reformat code to fix these issues."
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:204
msgid "4.1 ``ament_flake8`` Arguments"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:206
msgid ""
"The program takes a single optional argument which is a list of directories "
"that should be scanned for the report. For example, if you wish to scan just "
"one package in your workspace you can call ``ament_flake8`` directly in the "
"package's working directory or pass it a path to the directory."
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:211
msgid "4.2 ``ament_flake8`` Options"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:213
msgid ""
"``--config path`` - The config file used. The default config file can be "
"found in your installation's site packages directory. We do not recommend "
"changing the default settings."
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:216
msgid "``--linelength N`` - Manually set the maximum line length."
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:219
msgid "4.3 ``ament_flake8`` Example"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:221
msgid ""
"Create the following simple Python program in a file named ``example.py``."
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:223
msgid ""
"def uglyPythonFunction(a,b,  c):\n"
"    if a != b:\n"
"        print(\"A does not match b\")\n"
"    thisIsAVariableNameThatIsWayTooLongLongLong = 2\n"
"    extra_long "
"=(thisIsAVariableNameThatIsWayTooLongLongLong*thisIsAVariableNameThatIsWayTooLongLongLong )\n"
"    return(c)"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:232
msgid ""
"Applying ``ament_flake8`` to this file will result in the following errors."
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:234
msgid ""
"example.py:1:25: E231 missing whitespace after ','\n"
"def uglyPythonFunction(a,b,  c):\n"
"\n"
"example.py:5:5: F841 local variable 'extra_long' is assigned to but never "
"used\n"
"    extra_long "
"=(thisIsAVariableNameThatIsWayTooLongLongLong*thisIsAVariableNameThatIsWayTooLongLongLong )\n"
"    ^\n"
"\n"
"example.py:5:17: E225 missing whitespace around operator\n"
"    extra_long "
"=(thisIsAVariableNameThatIsWayTooLongLongLong*thisIsAVariableNameThatIsWayTooLongLongLong )\n"
"                ^\n"
"\n"
"example.py:5:100: E501 line too long (106 > 99 characters)\n"
"    extra_long "
"=(thisIsAVariableNameThatIsWayTooLongLongLong*thisIsAVariableNameThatIsWayTooLongLongLong )\n"
"                                                                                                   ^\n"
"\n"
"example.py:5:105: E202 whitespace before ')'\n"
"    extra_long "
"=(thisIsAVariableNameThatIsWayTooLongLongLong*thisIsAVariableNameThatIsWayTooLongLongLong )\n"
"                                                                                                        ^\n"
"\n"
"1     E202 whitespace before ')'\n"
"1     E225 missing whitespace around operator\n"
"1     E231 missing whitespace after ','\n"
"1     E501 line too long (106 > 99 characters)\n"
"1     F841 local variable 'extra_long' is assigned to but never used\n"
"\n"
"1 files checked\n"
"5 errors\n"
"\n"
"'E'-type errors: 4\n"
"'F'-type errors: 1\n"
"\n"
"Checked files:\n"
"\n"
"* example.py"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:273
msgid "5 ``ament_uncrustify``"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:275
msgid ""
"`Uncrustify <https://github.com/uncrustify/uncrustify>`_ is a C++ linting "
"tool, similar to ``ament_cpplint``, that has the advantage that it can "
"**automatically fix** the issues it finds! This tool will help you locate "
"and fix minor errors and style problems with your C++ ROS programs such as "
"trailing whitespace, overly long lines of code, poorly spaced function "
"arguments, and much more!"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:280
msgid "5.1 ``ament_uncrustify`` Arguments"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:282
msgid ""
"The program takes a single optional argument which is a list of directories "
"that should be scanned for the report. For example, if you wish to scan just "
"one package in your workspace you can call ``ament_uncrustify`` directly in "
"the package's working directory or pass it a path to the directory."
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:287
msgid "5.2 ``ament_uncrustify`` Options"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:289
msgid ""
"``-c CFG`` - The config file that Uncrustify should use if you would prefer "
"to use your own settings. We recommend you stick to the defaults"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:291
msgid "``--linelength N`` - The maximum line length."
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:292
msgid ""
"``--language`` - One of {C,C++,CPP}, passed to uncrustify as ``-l "
"<language>`` to force a specific language rather then choosing one based on "
"file extension."
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:293
msgid ""
"``--reformat`` - Reformat the files in place, i.e. fix the formatting errors "
"encountered. **We recommend you use this option when running** "
"``ament_uncrustify`` **as it will save you quite a bit of time!**"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:297
msgid "5.3 ``ament_uncrustify`` Example"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:300
msgid "Let's return to the simple C++ program named ``example.cpp``."
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:302
msgid ""
"int main()\n"
"{\n"
"     int a = 10;\n"
"     int b = 10;\n"
"     int c = 0;<trailing whitespace>\n"
"     if( a == b)<trailing whitespace>{\n"
"  <tab>      c=a;}<trailing whitespace>\n"
"     return 0;\n"
" }"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:315
msgid ""
"Applying ``ament_uncrustify example.cpp`` to this file will yield the "
"following output."
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:317
msgid ""
"--- example.cpp\n"
"+++ example.cpp.uncrustify\n"
"@@ -1,9 +1,10 @@\n"
"-  int main()\n"
"-  {\n"
"-       int a = 10;\n"
"-       int b = 10;\n"
"-       int c = 0;<trailing whitespace>\n"
"-       if( a == b)<trailing whitespace>{\n"
"- <tab>       c=a;}<trailing whitespace>\n"
"-       return 0;\n"
"-   }\n"
"+int main()\n"
"+{\n"
"+  int a = 10;\n"
"+  int b = 10;\n"
"+  int c = 0;\n"
"+  if (a == b) {\n"
"+    c = a;\n"
"+  }\n"
"+  return 0;\n"
"+}\n"
"1 files with code style divergence"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:343
msgid ""
"To apply these changes to the file we can run ``ament_uncrustify`` with the "
"``--reformat`` flag. **With this option specified uncrustify will apply the "
"necessary changes in place, saving us a lot of time, especially when working "
"with a larger codebase!**"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:347
msgid "6 Other Ament Tools Of Note"
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:349
msgid ""
"ROS Desktop Full ships with a handful of ament development tools that are "
"worth noting. A few of these tools are listed below."
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:352
msgid "``ament_lint_cmake`` - Check CMake files against the style conventions."
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:353
msgid ""
"``ament_xmllint`` - Check XML markup, such as XML launch files, using "
"xmllint."
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:354
msgid ""
"``ament_pep257`` - Check Python docstrings against the style conventions in "
"`PEP 257 <https://peps.python.org/pep-0257/>`_."
msgstr ""

#: ../../../source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst:356
msgid ""
"Ament is highly extensible and ROS users are encouraged to build and use "
"ament tools that make them more productive. You can search for other "
"community contributed ament lint tools by using the ``apt search`` or by "
"`searching for ament on ROS Index <https://index.ros.org/?"
"pkgs=ament&search_packages=true>`_."
msgstr ""
