# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation humble\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-01 08:39+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:6
msgid "Writing a listener (Python)"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:8
msgid "**Goal:** Learn how to use tf2 to get access to frame transformations."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:10
msgid "**Tutorial level:** Intermediate"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:12
msgid "**Time:** 10 minutes"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:16
msgid "Contents"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:19
msgid "Background"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:21
msgid ""
"In previous tutorials we created a tf2 broadcaster to publish the pose of a "
"turtle to tf2."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:23
msgid "In this tutorial we'll create a tf2 listener to start using tf2."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:26
msgid "Prerequisites"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:28
msgid ""
"This tutorial assumes you have completed the :doc:`tf2 static broadcaster "
"tutorial (Python) <./Writing-A-Tf2-Static-Broadcaster-Py>` and :doc:`tf2 "
"broadcaster tutorial (Python) <./Writing-A-Tf2-Broadcaster-Py>`. In the "
"previous tutorial, we created a ``learning_tf2_py`` package, which is where "
"we will continue working from."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:32
msgid "Tasks"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:35
msgid "1 Write the listener node"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:37
msgid ""
"Let's first create the source files. Go to the ``learning_tf2_py`` package "
"we created in the previous tutorial. Inside the ``src/learning_tf2_py/"
"learning_tf2_py`` directory download the example listener code by entering "
"the following command:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:43
#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:247
#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:265
#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:287
msgid "Linux"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:45
#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:51
msgid ""
"$ wget https://raw.githubusercontent.com/ros/geometry_tutorials/rolling/"
"turtle_tf2_py/turtle_tf2_py/turtle_tf2_listener.py"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:49
#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:253
#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:271
#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:293
msgid "macOS"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:55
#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:257
#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:277
#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:299
msgid "Windows"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:57
#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:301
msgid "In a Windows command line prompt:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:59
msgid ""
"$ curl -sk https://raw.githubusercontent.com/ros/geometry_tutorials/rolling/"
"turtle_tf2_py/turtle_tf2_py/turtle_tf2_listener.py -o turtle_tf2_listener.py"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:63
#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:307
msgid "Or in powershell:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:65
msgid ""
"$ curl https://raw.githubusercontent.com/ros/geometry_tutorials/rolling/"
"turtle_tf2_py/turtle_tf2_py/turtle_tf2_listener.py -o turtle_tf2_listener.py"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:69
msgid ""
"Now open the file called ``turtle_tf2_listener.py`` using your preferred "
"text editor."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:71
msgid ""
"import math\n"
"\n"
"from geometry_msgs.msg import Twist\n"
"\n"
"import rclpy\n"
"from rclpy.node import Node\n"
"\n"
"from tf2_ros import TransformException\n"
"from tf2_ros.buffer import Buffer\n"
"from tf2_ros.transform_listener import TransformListener\n"
"\n"
"from turtlesim.srv import Spawn\n"
"\n"
"\n"
"class FrameListener(Node):\n"
"\n"
"    def __init__(self):\n"
"        super().__init__('turtle_tf2_frame_listener')\n"
"\n"
"        # Declare and acquire `target_frame` parameter\n"
"        self.target_frame = self.declare_parameter(\n"
"          'target_frame', 'turtle1').get_parameter_value().string_value\n"
"\n"
"        self.tf_buffer = Buffer()\n"
"        self.tf_listener = TransformListener(self.tf_buffer, self)\n"
"\n"
"        # Create a client to spawn a turtle\n"
"        self.spawner = self.create_client(Spawn, 'spawn')\n"
"        # Boolean values to store the information\n"
"        # if the service for spawning turtle is available\n"
"        self.turtle_spawning_service_ready = False\n"
"        # if the turtle was successfully spawned\n"
"        self.turtle_spawned = False\n"
"\n"
"        # Create turtle2 velocity publisher\n"
"        self.publisher = self.create_publisher(Twist, 'turtle2/cmd_vel', 1)\n"
"\n"
"        # Call on_timer function every second\n"
"        self.timer = self.create_timer(1.0, self.on_timer)\n"
"\n"
"    def on_timer(self):\n"
"        # Store frame names in variables that will be used to\n"
"        # compute transformations\n"
"        from_frame_rel = self.target_frame\n"
"        to_frame_rel = 'turtle2'\n"
"\n"
"        if self.turtle_spawning_service_ready:\n"
"            if self.turtle_spawned:\n"
"                # Look up for the transformation between target_frame and "
"turtle2 frames\n"
"                # and send velocity commands for turtle2 to reach "
"target_frame\n"
"                try:\n"
"                    t = self.tf_buffer.lookup_transform(\n"
"                        to_frame_rel,\n"
"                        from_frame_rel,\n"
"                        rclpy.time.Time())\n"
"                except TransformException as ex:\n"
"                    self.get_logger().info(\n"
"                        f'Could not transform {to_frame_rel} to "
"{from_frame_rel}: {ex}')\n"
"                    return\n"
"\n"
"                msg = Twist()\n"
"                scale_rotation_rate = 1.0\n"
"                msg.angular.z = scale_rotation_rate * math.atan2(\n"
"                    t.transform.translation.y,\n"
"                    t.transform.translation.x)\n"
"\n"
"                scale_forward_speed = 0.5\n"
"                msg.linear.x = scale_forward_speed * math.sqrt(\n"
"                    t.transform.translation.x ** 2 +\n"
"                    t.transform.translation.y ** 2)\n"
"\n"
"                self.publisher.publish(msg)\n"
"            else:\n"
"                if self.result.done():\n"
"                    self.get_logger().info(\n"
"                        f'Successfully spawned {self.result.result()."
"name}')\n"
"                    self.turtle_spawned = True\n"
"                else:\n"
"                    self.get_logger().info('Spawn is not finished')\n"
"        else:\n"
"            if self.spawner.service_is_ready():\n"
"                # Initialize request with turtle name and coordinates\n"
"                # Note that x, y and theta are defined as floats in "
"turtlesim/srv/Spawn\n"
"                request = Spawn.Request()\n"
"                request.name = 'turtle2'\n"
"                request.x = float(4)\n"
"                request.y = float(2)\n"
"                request.theta = float(0)\n"
"                # Call request\n"
"                self.result = self.spawner.call_async(request)\n"
"                self.turtle_spawning_service_ready = True\n"
"            else:\n"
"                # Check if the service is ready\n"
"                self.get_logger().info('Service is not ready')\n"
"\n"
"\n"
"def main():\n"
"    rclpy.init()\n"
"    node = FrameListener()\n"
"    try:\n"
"        rclpy.spin(node)\n"
"    except KeyboardInterrupt:\n"
"        pass\n"
"\n"
"    rclpy.shutdown()"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:180
msgid "1.1 Examine the code"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:182
msgid ""
"To understand how the service behind spawning turtle works, please refer to :"
"doc:`writing a simple service and client (Python) <../../Beginner-Client-"
"Libraries/Writing-A-Simple-Py-Service-And-Client>` tutorial."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:184
msgid ""
"Now, let's take a look at the code that is relevant to get access to frame "
"transformations. The ``tf2_ros`` package provides an implementation of a "
"``TransformListener`` to help make the task of receiving transforms easier."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:187
msgid "from tf2_ros.transform_listener import TransformListener"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:191
msgid ""
"Here, we create a ``TransformListener`` object. Once the listener is "
"created, it starts receiving tf2 transformations over the wire, and buffers "
"them for up to 10 seconds."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:194
msgid "self.tf_listener = TransformListener(self.tf_buffer, self)"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:198
msgid ""
"Finally, we query the listener for a specific transformation. We call "
"``lookup_transform`` method with following arguments:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:201
msgid "Target frame"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:203
msgid "Source frame"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:205
msgid "The time at which we want to transform"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:207
msgid ""
"Providing ``rclpy.time.Time()`` will just get us the latest available "
"transform. All this is wrapped in a try-except block to handle possible "
"exceptions."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:210
msgid ""
"t = self.tf_buffer.lookup_transform(\n"
"    to_frame_rel,\n"
"    from_frame_rel,\n"
"    rclpy.time.Time())"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:218
msgid "1.2 Add an entry point"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:220
msgid ""
"To allow the ``ros2 run`` command to run your node, you must add the entry "
"point to ``setup.py`` (located in the ``src/learning_tf2_py`` directory)."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:222
msgid "Add the following line between the ``'console_scripts':`` brackets:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:224
msgid "'turtle_tf2_listener = learning_tf2_py.turtle_tf2_listener:main',"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:229
msgid "2 Update the launch file"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:231
msgid ""
"Open the launch file called ``turtle_tf2_demo.launch.py`` in the ``src/"
"learning_tf2_py/launch`` directory with your text editor, add two new nodes "
"to the launch description, add a launch argument, and add the imports. The "
"resulting file should look like:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:234
msgid ""
"from launch import LaunchDescription\n"
"from launch.actions import DeclareLaunchArgument\n"
"from launch.substitutions import LaunchConfiguration\n"
"\n"
"from launch_ros.actions import Node\n"
"\n"
"\n"
"def generate_launch_description():\n"
"    return LaunchDescription([\n"
"        Node(\n"
"            package='turtlesim',\n"
"            executable='turtlesim_node',\n"
"            name='sim'\n"
"        ),\n"
"        Node(\n"
"            package='learning_tf2_py',\n"
"            executable='turtle_tf2_broadcaster',\n"
"            name='broadcaster1',\n"
"            parameters=[\n"
"                {'turtlename': 'turtle1'}\n"
"            ]\n"
"        ),\n"
"        DeclareLaunchArgument(\n"
"            'target_frame', default_value='turtle1',\n"
"            description='Target frame name.'\n"
"        ),\n"
"        Node(\n"
"            package='learning_tf2_py',\n"
"            executable='turtle_tf2_broadcaster',\n"
"            name='broadcaster2',\n"
"            parameters=[\n"
"                {'turtlename': 'turtle2'}\n"
"            ]\n"
"        ),\n"
"        Node(\n"
"            package='learning_tf2_py',\n"
"            executable='turtle_tf2_listener',\n"
"            name='listener',\n"
"            parameters=[\n"
"                {'target_frame': LaunchConfiguration('target_frame')}\n"
"            ]\n"
"        ),\n"
"    ])\n"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:238
msgid ""
"This will declare a ``target_frame`` launch argument, start a broadcaster "
"for second turtle that we will spawn and listener that will subscribe to "
"those transformations."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:241
msgid "3 Build"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:243
msgid ""
"Run ``rosdep`` in the root of your workspace to check for missing "
"dependencies."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:249
msgid "$ rosdep install -i --from-path src --rosdistro rolling -y"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:255
#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:259
msgid ""
"rosdep only runs on Linux, so you will need to install ``geometry_msgs`` and "
"``turtlesim`` dependencies yourself"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:261
msgid "Still in the root of your workspace, build your package:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:267
#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:273
msgid "$ colcon build --packages-select learning_tf2_py"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:279
msgid "$ colcon build --merge-install --packages-select learning_tf2_py"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:283
msgid ""
"Open a new terminal, navigate to the root of your workspace, and source the "
"setup files:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:289
#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:295
msgid "$ . install/setup.bash"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:303
msgid "$ call install\\setup.bat"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:309
msgid "$ .\\install\\setup.ps1"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:316
msgid "4 Run"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:318
msgid "Now you're ready to start your full turtle demo:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:320
msgid "$ ros2 launch learning_tf2_py turtle_tf2_demo.launch.py"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:324
msgid ""
"You should see the turtle sim with two turtles. In the second terminal "
"window type the following command:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:327
msgid "$ ros2 run turtlesim turtle_teleop_key"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:331
msgid ""
"To see if things work, simply drive around the first turtle using the arrow "
"keys (make sure your terminal window is active, not your simulator window), "
"and you'll see the second turtle following the first one!"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:334
msgid "Summary"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst:336
msgid ""
"In this tutorial you learned how to use tf2 to get access to frame "
"transformations. You also have finished writing your own turtlesim demo that "
"you first tried in :doc:`Introduction to tf2 <./Introduction-To-Tf2>` "
"tutorial."
msgstr ""
