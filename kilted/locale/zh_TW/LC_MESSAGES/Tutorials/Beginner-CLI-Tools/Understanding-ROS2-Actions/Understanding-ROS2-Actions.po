# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation kilted\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 06:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:8
msgid "Understanding actions"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:10
msgid "**Goal:** Introspect actions in ROS 2."
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:12
msgid "**Tutorial level:** Beginner"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:14
msgid "**Time:** 15 minutes"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:18
msgid "Contents"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:21
msgid "Background"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:23
msgid ""
"Actions are one of the communication types in ROS 2 and are intended for "
"long running tasks. They consist of three parts: a goal, feedback, and a "
"result."
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:26
msgid ""
"Actions are built on topics and services. Their functionality is similar to "
"services, except actions can be canceled. They also provide steady feedback, "
"as opposed to services which return a single response."
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:30
msgid ""
"Actions use a client-server model, similar to the publisher-subscriber model "
"(described in the :doc:`topics tutorial <../Understanding-ROS2-Topics/"
"Understanding-ROS2-Topics>`). An \"action client\" node sends a goal to an "
"\"action server\" node that acknowledges the goal and returns a stream of "
"feedback and a result."
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:36
msgid "Prerequisites"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:38
msgid ""
"This tutorial builds off concepts, like :doc:`nodes <../Understanding-ROS2-"
"Nodes/Understanding-ROS2-Nodes>` and :doc:`topics <../Understanding-ROS2-"
"Topics/Understanding-ROS2-Topics>`, covered in previous tutorials."
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:40
msgid ""
"This tutorial uses the :doc:`turtlesim package <../Introducing-Turtlesim/"
"Introducing-Turtlesim>`."
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:42
msgid ""
"As always, don't forget to source ROS 2 in :doc:`every new terminal you open "
"<../Configuring-ROS2-Environment>`."
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:45
msgid "Tasks"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:48
msgid "1 Setup"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:50
msgid ""
"Start up the two turtlesim nodes, ``/turtlesim`` and ``/teleop_turtle``."
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:52
msgid "Open a new terminal and run:"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:54
msgid "$ ros2 run turtlesim turtlesim_node"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:58
msgid "Open another terminal and run:"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:60
msgid "$ ros2 run turtlesim turtle_teleop_key"
msgstr "$ ros2 run turtlesim turtle_teleop_key"

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:66
msgid "2 Use actions"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:68
msgid ""
"When you launch the ``/teleop_turtle`` node, you will see the following "
"message in your terminal:"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:70
msgid ""
"Use arrow keys to move the turtle.\n"
"Use G|B|V|C|D|E|R|T keys to rotate to absolute orientations. 'F' to cancel a "
"rotation."
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:75
msgid ""
"Let's focus on the second line, which corresponds to an action. (The first "
"instruction corresponds to the \"cmd_vel\" topic, discussed previously in "
"the :doc:`topics tutorial <../Understanding-ROS2-Topics/Understanding-ROS2-"
"Topics>`.)"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:78
msgid ""
"Notice that the letter keys ``G|B|V|C|D|E|R|T`` form a \"box\" around the "
"``F`` key on a US QWERTY keyboard (if you are not using a QWERTY keyboard, "
"see `this link <https://upload.wikimedia.org/wikipedia/commons/d/da/"
"KB_United_States.svg>`__ to follow along). Each key's position around ``F`` "
"corresponds to that orientation in turtlesim. For example, the ``E`` will "
"rotate the turtle's orientation to the upper left corner."
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:82
msgid ""
"Pay attention to the terminal where the ``/turtlesim`` node is running. Each "
"time you press one of these keys, you are sending a goal to an action server "
"that is part of the ``/turtlesim`` node. The goal is to rotate the turtle to "
"face a particular direction. A message relaying the result of the goal "
"should display once the turtle completes its rotation:"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:87
msgid "[INFO] [turtlesim]: Rotation goal completed successfully"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:91
msgid "The ``F`` key will cancel a goal mid-execution."
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:93
msgid ""
"Try pressing the ``C`` key, and then pressing the ``F`` key before the "
"turtle can complete its rotation. In the terminal where the ``/turtlesim`` "
"node is running, you will see the message:"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:96
msgid "[INFO] [turtlesim]: Rotation goal canceled"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:100
msgid ""
"Not only can the client-side (your input in the teleop) stop a goal, but the "
"server-side (the ``/turtlesim`` node) can as well. When the server-side "
"chooses to stop processing a goal, it is said to \"abort\" the goal."
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:103
msgid ""
"Try hitting the ``D`` key, then the ``G`` key before the first rotation can "
"complete. In the terminal where the ``/turtlesim`` node is running, you will "
"see the message:"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:106
msgid ""
"[WARN] [turtlesim]: Rotation goal received before a previous goal finished. "
"Aborting previous goal"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:110
msgid ""
"This action server chose to abort the first goal because it got a new one. "
"It could have chosen something else, like reject the new goal or execute the "
"second goal after the first one finished. Don't assume every action server "
"will choose to abort the current goal when it gets a new one."
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:115
msgid "3 ros2 node info"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:117
msgid ""
"To see the list of actions a node provides, ``/turtlesim`` in this case, "
"open a new terminal and run the command:"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:119
msgid ""
"$ ros2 node info /turtlesim\n"
"/turtlesim\n"
"  Subscribers:\n"
"    /parameter_events: rcl_interfaces/msg/ParameterEvent\n"
"    /turtle1/cmd_vel: geometry_msgs/msg/Twist\n"
"  Publishers:\n"
"    /parameter_events: rcl_interfaces/msg/ParameterEvent\n"
"    /rosout: rcl_interfaces/msg/Log\n"
"    /turtle1/color_sensor: turtlesim_msgs/msg/Color\n"
"    /turtle1/pose: turtlesim_msgs/msg/Pose\n"
"  Service Servers:\n"
"    /clear: std_srvs/srv/Empty\n"
"    /kill: turtlesim_msgs/srv/Kill\n"
"    /reset: std_srvs/srv/Empty\n"
"    /spawn: turtlesim_msgs/srv/Spawn\n"
"    /turtle1/set_pen: turtlesim_msgs/srv/SetPen\n"
"    /turtle1/teleport_absolute: turtlesim_msgs/srv/TeleportAbsolute\n"
"    /turtle1/teleport_relative: turtlesim_msgs/srv/TeleportRelative\n"
"    /turtlesim/describe_parameters: rcl_interfaces/srv/DescribeParameters\n"
"    /turtlesim/get_parameter_types: rcl_interfaces/srv/GetParameterTypes\n"
"    /turtlesim/get_parameters: rcl_interfaces/srv/GetParameters\n"
"    /turtlesim/list_parameters: rcl_interfaces/srv/ListParameters\n"
"    /turtlesim/set_parameters: rcl_interfaces/srv/SetParameters\n"
"    /turtlesim/set_parameters_atomically: rcl_interfaces/srv/"
"SetParametersAtomically\n"
"  Service Clients:\n"
"\n"
"  Action Servers:\n"
"    /turtle1/rotate_absolute: turtlesim_msgs/action/RotateAbsolute\n"
"  Action Clients:"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:151
msgid ""
"The command returns a list of ``/turtlesim``'s subscribers, publishers, "
"services, action servers and action clients."
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:153
msgid ""
"Notice that the ``/turtle1/rotate_absolute`` action for ``/turtlesim`` is "
"under ``Action Servers``. This means ``/turtlesim`` responds to and provides "
"feedback for the ``/turtle1/rotate_absolute`` action."
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:156
msgid ""
"The ``/teleop_turtle`` node has the name ``/turtle1/rotate_absolute`` under "
"``Action Clients`` meaning that it sends goals for that action name. To see "
"that, run:"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:159
msgid ""
"$ ros2 node info /teleop_turtle\n"
"/teleop_turtle\n"
"  Subscribers:\n"
"    /parameter_events: rcl_interfaces/msg/ParameterEvent\n"
"  Publishers:\n"
"    /parameter_events: rcl_interfaces/msg/ParameterEvent\n"
"    /rosout: rcl_interfaces/msg/Log\n"
"    /turtle1/cmd_vel: geometry_msgs/msg/Twist\n"
"  Service Servers:\n"
"    /teleop_turtle/describe_parameters: rcl_interfaces/srv/"
"DescribeParameters\n"
"    /teleop_turtle/get_parameter_types: rcl_interfaces/srv/"
"GetParameterTypes\n"
"    /teleop_turtle/get_parameters: rcl_interfaces/srv/GetParameters\n"
"    /teleop_turtle/list_parameters: rcl_interfaces/srv/ListParameters\n"
"    /teleop_turtle/set_parameters: rcl_interfaces/srv/SetParameters\n"
"    /teleop_turtle/set_parameters_atomically: rcl_interfaces/srv/"
"SetParametersAtomically\n"
"  Service Clients:\n"
"\n"
"  Action Servers:\n"
"\n"
"  Action Clients:\n"
"    /turtle1/rotate_absolute: turtlesim_msgs/action/RotateAbsolute"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:184
msgid "4 ros2 action list"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:186
msgid "To identify all the actions in the ROS graph, run the command:"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:188
msgid ""
"$ ros2 action list\n"
"/turtle1/rotate_absolute"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:193
msgid ""
"This is the only action in the ROS graph right now. It controls the turtle's "
"rotation, as you saw earlier. You also already know that there is one action "
"client (part of ``/teleop_turtle``) and one action server (part of ``/"
"turtlesim``) for this action from using the ``ros2 node info <node_name>`` "
"command."
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:198
msgid "4.1 ros2 action list -t"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:200
msgid ""
"Actions have types, similar to topics and services. To find ``/turtle1/"
"rotate_absolute``'s type, run the command:"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:203
msgid ""
"$ ros2 action list -t\n"
"/turtle1/rotate_absolute [turtlesim_msgs/action/RotateAbsolute]"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:208
msgid ""
"In brackets to the right of each action name (in this case only ``/turtle1/"
"rotate_absolute``) is the action type, ``turtlesim_msgs/action/"
"RotateAbsolute``. You will need this when you want to execute an action from "
"the command line or from code."
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:212
msgid "5 ros2 action type"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:214
msgid "If you want to check the action type for the action, run the command:"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:216
msgid ""
"$ ros2 action type /turtle1/rotate_absolute\n"
"turtlesim_msgs/action/RotateAbsolute"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:222
msgid "6 ros2 action info"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:224
msgid ""
"You can further introspect the ``/turtle1/rotate_absolute`` action with the "
"command:"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:226
msgid ""
"$ ros2 action info /turtle1/rotate_absolute\n"
"Action: /turtle1/rotate_absolute\n"
"Action clients: 1\n"
"    /teleop_turtle\n"
"Action servers: 1\n"
"    /turtlesim"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:235
msgid ""
"This tells us what we learned earlier from running ``ros2 node info`` on "
"each node: The ``/teleop_turtle`` node has an action client and the ``/"
"turtlesim`` node has an action server for the ``/turtle1/rotate_absolute`` "
"action."
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:239
msgid "7 ros2 interface show"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:241
msgid ""
"One more piece of information you will need before sending or executing an "
"action goal yourself is the structure of the action type."
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:243
msgid ""
"Recall that you identified ``/turtle1/rotate_absolute``'s type when running "
"the command ``ros2 action list -t``. Enter the following command with the "
"action type in your terminal:"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:246
msgid "$ ros2 interface show turtlesim_msgs/action/RotateAbsolute"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:250
msgid "Which will return:"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:252
msgid ""
"# The desired heading in radians\n"
"float32 theta\n"
"---\n"
"# The angular displacement in radians to the starting position\n"
"float32 delta\n"
"---\n"
"# The remaining rotation in radians\n"
"float32 remaining"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:263
msgid ""
"The section of this message above the first ``---`` is the structure (data "
"type and name) of the goal request. The next section is the structure of the "
"result. The last section is the structure of the feedback."
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:268
msgid "8 ros2 action send_goal"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:270
msgid ""
"Now let's send an action goal from the command line with the following "
"syntax:"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:272
msgid "$ ros2 action send_goal <action_name> <action_type> <values>"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:276
msgid "``<values>`` need to be in YAML format."
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:278
msgid ""
"Keep an eye on the turtlesim window, and enter the following command into "
"your terminal:"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:280
msgid ""
"$ ros2 action send_goal /turtle1/rotate_absolute turtlesim_msgs/action/"
"RotateAbsolute \"{theta: 1.57}\"\n"
"Waiting for an action server to become available...\n"
"Sending goal:\n"
"   theta: 1.57\n"
"\n"
"Goal accepted with ID: f8db8f44410849eaa93d3feb747dd444\n"
"\n"
"Result:\n"
"  delta: -1.568000316619873\n"
"\n"
"Goal finished with status: SUCCEEDED"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:295
msgid "You should see the turtle rotating."
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:298
msgid ""
"All goals have a unique ID, shown in the return message. You can also see "
"the result, a field with the name ``delta``, which is the displacement to "
"the starting position."
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:301
msgid ""
"To see the feedback of this goal, add ``--feedback`` to the ``ros2 action "
"send_goal`` command:"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:303
msgid ""
"$ ros2 action send_goal /turtle1/rotate_absolute turtlesim_msgs/action/"
"RotateAbsolute \"{theta: -1.57}\" --feedback\n"
"Sending goal:\n"
"   theta: -1.57\n"
"\n"
"Goal accepted with ID: e6092c831f994afda92f0086f220da27\n"
"\n"
"Feedback:\n"
"  remaining: -3.1268222332000732\n"
"\n"
"Feedback:\n"
"  remaining: -3.1108222007751465\n"
"\n"
"…\n"
"\n"
"Result:\n"
"  delta: 3.1200008392333984\n"
"\n"
"Goal finished with status: SUCCEEDED"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:324
msgid ""
"You will continue to receive feedback, the remaining radians, until the goal "
"is complete."
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:329
msgid "9 ros2 action echo"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:331
msgid ""
"To see the data communication between an action client and an action server "
"you can ``echo`` the action data using:"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:333
msgid "$ ros2 action echo <action_name> <optional arguments/action_type>"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:337
msgid ""
"``ros2 action echo`` depends on action introspection of an action client and "
"server, that is disabled by default. To enable it, users must call "
"``configure_introspection`` after creating an action client or server."
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:340
msgid ""
"Start up the ``fibonacci_action_server`` and ``fibonacci_action_client``, "
"enabling ``action_server_configure_introspection`` parameter for "
"demonstration."
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:342
msgid ""
"$ ros2 run action_tutorials_cpp fibonacci_action_server --ros-args -p "
"action_server_configure_introspection:=contents"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:346
msgid ""
"$ ros2 run action_tutorials_py fibonacci_action_client --ros-args -p "
"action_client_configure_introspection:=contents"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:350
msgid ""
"Now we are able to see the action communication between "
"``fibonacci_action_server`` and ``fibonacci_action_client`` via ``ros2 "
"action echo``."
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:352
msgid ""
"$ ros2 action echo /fibonacci example_interfaces/action/Fibonacci --flow-"
"style\n"
"interface: GOAL_SERVICE\n"
"info:\n"
"  event_type: REQUEST_SENT\n"
"  stamp:\n"
"    sec: 1742070798\n"
"    nanosec: 400435819\n"
"  client_gid: [1, 15, 165, 231, 194, 197, 167, 157, 0, 0, 0, 0, 0, 0, 20, "
"4]\n"
"  sequence_number: 1\n"
"request: [{goal_id: {uuid: [230, 96, 12, 6, 100, 69, 69, 70, 220, 205, 135, "
"251, 210, 2, 231, 110]}, goal: {order: 10}}]\n"
"response: []\n"
"---\n"
"interface: GOAL_SERVICE\n"
"info:\n"
"  event_type: REQUEST_RECEIVED\n"
"  stamp:\n"
"    sec: 1742070798\n"
"    nanosec: 400706446\n"
"  client_gid: [1, 15, 165, 231, 194, 197, 167, 157, 0, 0, 0, 0, 0, 0, 20, "
"4]\n"
"  sequence_number: 1\n"
"request: [{goal_id: {uuid: [230, 96, 12, 6, 100, 69, 69, 70, 220, 205, 135, "
"251, 210, 2, 231, 110]}, goal: {order: 10}}]\n"
"response: []\n"
"---\n"
"interface: RESULT_SERVICE\n"
"info:\n"
"  event_type: REQUEST_SENT\n"
"  stamp:\n"
"    sec: 1742070798\n"
"    nanosec: 401486678\n"
"  client_gid: [1, 15, 165, 231, 194, 197, 167, 157, 0, 0, 0, 0, 0, 0, 24, "
"4]\n"
"  sequence_number: 1\n"
"request: [{goal_id: {uuid: [230, 96, 12, 6, 100, 69, 69, 70, 220, 205, 135, "
"251, 210, 2, 231, 110]}}]\n"
"response: []\n"
"---\n"
"interface: FEEDBACK_TOPIC\n"
"goal_id:\n"
"  uuid: [230, 96, 12, 6, 100, 69, 69, 70, 220, 205, 135, 251, 210, 2, 231, "
"110]\n"
"feedback:\n"
"  sequence: [0, 1, 1]\n"
"---\n"
"interface: STATUS_TOPIC\n"
"status_list: [{goal_info: {goal_id: {uuid: [230, 96, 12, 6, 100, 69, 69, 70, "
"220, 205, 135, 251, 210, 2, 231, 110]}, stamp: {sec: 1742070798, nanosec: "
"401146752}}, status: 2}]\n"
"---\n"
"..."
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:401
msgid "This feature is available on ``Kilted Kaiju`` or later."
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:404
msgid "Summary"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:406
msgid ""
"Actions are like services that allow you to execute long running tasks, "
"provide regular feedback, and are cancelable."
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:408
msgid ""
"A robot system would likely use actions for navigation. An action goal could "
"tell a robot to travel to a position. While the robot navigates to the "
"position, it can send updates along the way (i.e. feedback), and then a "
"final result message once it's reached its destination."
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:412
msgid ""
"Turtlesim has an action server that action clients can send goals to for "
"rotating turtles. In this tutorial, you introspected that action, ``/turtle1/"
"rotate_absolute``, to get a better idea of what actions are and how they "
"work."
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:416
msgid "Next steps"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:418
msgid ""
"Now you've covered all of the core ROS 2 concepts. The last few tutorials in "
"this set will introduce you to some tools and techniques that will make "
"using ROS 2 easier, starting with :doc:`../Using-Rqt-Console/Using-Rqt-"
"Console`."
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:422
msgid "Related content"
msgstr ""

#: ../../../source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst:424
msgid ""
"You can read more about the design decisions behind actions in ROS 2 `here "
"<https://design.ros2.org/articles/actions.html>`__."
msgstr ""
