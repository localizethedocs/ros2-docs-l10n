# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation kilted\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 06:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:7
msgid "Migrating Python Packages Reference"
msgstr ""

#: ../../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:9
msgid ""
"This page is a reference on how to migrate Python packages from ROS 1 to ROS "
"2. If this is your first time migrating a Python package, then follow :doc:"
"`this guide to migrate an example Python package <./Migrating-Python-Package-"
"Example>` first."
msgstr ""

#: ../../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:14
msgid "Table of Contents"
msgstr ""

#: ../../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:17
msgid "Build tool"
msgstr ""

#: ../../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:19
msgid ""
"Instead of using ``catkin_make``, ``catkin_make_isolated`` or ``catkin "
"build`` ROS 2 uses the command line tool `colcon <https://design.ros2.org/"
"articles/build_tool.html>`__ to build and install a set of packages. See "
"the :doc:`beginner tutorial <../../Tutorials/Beginner-Client-Libraries/"
"Colcon-Tutorial>` to get started with ``colcon``."
msgstr ""

#: ../../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:23
msgid "Build system"
msgstr ""

#: ../../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:25
msgid ""
"For pure Python packages, ROS 2 uses the standard ``setup.py`` installation "
"mechanism familiar to Python developers."
msgstr ""

#: ../../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:28
msgid "Update the files to use *setup.py*"
msgstr ""

#: ../../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:30
msgid ""
"If the ROS 1 package uses CMake only to invoke the ``setup.py`` file and "
"does not contain anything beside Python code (e.g. no messages, services, "
"etc.) it should be converted into a pure Python package in ROS 2:"
msgstr ""

#: ../../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:33
msgid "Update or add the build type in the ``package.xml`` file:"
msgstr ""

#: ../../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:35
msgid ""
"<export>\n"
"  <build_type>ament_python</build_type>\n"
"</export>"
msgstr ""

#: ../../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:42
msgid "Remove the ``CMakeLists.txt`` file"
msgstr ""

#: ../../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:45
msgid "Update the ``setup.py`` file to be a standard Python setup script"
msgstr ""

#: ../../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:47
msgid ""
"ROS 2 supports Python 3 only. While each package can choose to also support "
"Python 2 it must invoke executables with Python 3 if it uses any API "
"provided by other ROS 2 packages."
msgstr ""

#: ../../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:51
msgid "Update source code"
msgstr ""

#: ../../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:54
msgid "Node Initialization"
msgstr ""

#: ../../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:56
#: ../../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:76
#: ../../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:103
#: ../../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:122
#: ../../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:141
#: ../../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:156
msgid "In ROS 1:"
msgstr ""

#: ../../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:58
msgid ""
"rospy.init_node('asdf')\n"
"\n"
"rospy.loginfo('Created node')"
msgstr ""

#: ../../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:64
#: ../../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:88
#: ../../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:111
#: ../../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:130
#: ../../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:147
#: ../../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:164
msgid "In ROS 2:"
msgstr ""

#: ../../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:66
msgid ""
"with rclpy.init(args=sys.argv):\n"
"    node = rclpy.create_node('asdf')\n"
"\n"
"    node.get_logger().info('Created node')"
msgstr ""

#: ../../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:74
msgid "ROS Parameters"
msgstr ""

#: ../../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:78
msgid ""
" port = rospy.get_param('port', '/dev/ttyUSB0')\n"
" assert isinstance(port, str), 'port parameter must be a str'\n"
"\n"
" baudrate = rospy.get_param('baudrate', 115200)\n"
" assert isinstance(baudrate, int), 'baudrate parameter must be an integer'\n"
"\n"
"rospy.logwarn('port: ' + port)"
msgstr ""

#: ../../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:90
msgid ""
"port = node.declare_parameter('port', '/dev/ttyUSB0').value\n"
"assert isinstance(port, str), 'port parameter must be a str'\n"
"\n"
"baudrate = node.declare_parameter('baudrate', 115200).value\n"
"assert isinstance(baudrate, int), 'baudrate parameter must be an integer'\n"
"\n"
"node.get_logger().warn('port: ' + port)"
msgstr ""

#: ../../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:101
msgid "Creating a Publisher"
msgstr ""

#: ../../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:105
msgid ""
"pub = rospy.Publisher('chatter', String)\n"
"# or\n"
"pub = rospy.Publisher('chatter', String, queue_size=10)"
msgstr ""

#: ../../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:113
msgid ""
"pub = node.create_publisher(String, 'chatter', rclpy.qos.QoSProfile())\n"
"# or\n"
"pub = node.create_publisher(String, 'chatter', 10)"
msgstr ""

#: ../../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:120
msgid "Creating a Subscriber"
msgstr ""

#: ../../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:124
msgid ""
"sub = rospy.Subscriber('chatter', String, callback)\n"
"# or\n"
"sub = rospy.Subscriber('chatter', String, callback, queue_size=10)"
msgstr ""

#: ../../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:132
msgid ""
"sub = node.create_subscription(String, 'chatter', callback, rclpy.qos."
"QoSProfile())\n"
"# or\n"
"sub = node.create_subscription(String, 'chatter', callback, 10)"
msgstr ""

#: ../../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:139
msgid "Creating a Service"
msgstr ""

#: ../../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:143
msgid "srv = rospy.Service('add_two_ints', AddTwoInts, add_two_ints_callback)"
msgstr ""

#: ../../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:149
msgid ""
"srv = node.create_service(AddTwoInts, 'add_two_ints', add_two_ints_callback)"
msgstr ""

#: ../../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:154
msgid "Creating a Service Client"
msgstr ""

#: ../../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:158
msgid ""
"rospy.wait_for_service('add_two_ints')\n"
"add_two_ints = rospy.ServiceProxy('add_two_ints', AddTwoInts)\n"
"resp = add_two_ints(req)"
msgstr ""

#: ../../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:166
msgid ""
"add_two_ints = node.create_client(AddTwoInts, 'add_two_ints')\n"
"while not add_two_ints.wait_for_service(timeout_sec=1.0):\n"
"    node.get_logger().info('service not available, waiting again...')\n"
"resp = add_two_ints.call_async(req)\n"
"rclpy.spin_until_future_complete(node, resp)"
msgstr ""

#: ../../../source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst:176
msgid ""
"Do not use ``rclpy.spin_until_future_complete`` in a ROS 2 callback. For "
"more details see the :doc:`sync deadlock article <../Sync-Vs-Async>`."
msgstr ""
