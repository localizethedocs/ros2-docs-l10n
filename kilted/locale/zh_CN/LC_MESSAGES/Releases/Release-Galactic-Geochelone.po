# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation kilted\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-14 08:30+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:4
msgid "Galactic Geochelone (``galactic``)"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:13
msgid "Table of Contents"
msgstr "目录"

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:15
msgid ""
"*Galactic Geochelone* is the seventh release of ROS 2. What follows is "
"highlights of the important changes and features in Galactic Geochelone "
"since the last release. For a list of all of the changes since Foxy, see the "
"`long form changelog <Galactic-Geochelone-Complete-Changelog>`."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:20
msgid "Supported Platforms"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:22
msgid "Galactic Geochelone is primarily supported on the following platforms:"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:24
msgid "Tier 1 platforms:"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:26
msgid "Ubuntu 20.04 (Focal): ``amd64`` and ``arm64``"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:27
msgid "Windows 10 (Visual Studio 2019): ``amd64``"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:29
msgid "Tier 2 platforms:"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:31
msgid "RHEL 8: ``amd64``"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:33
msgid "Tier 3 platforms:"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:35
msgid "Ubuntu 20.04 (Focal): ``arm32``"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:36
msgid "Debian Bullseye (11): ``amd64``, ``arm64`` and ``arm32``"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:37
msgid "OpenEmbedded Thud (2.6) / webOS OSE: ``arm32`` and ``arm64``"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:38
msgid "Mac macOS 10.14 (Mojave): ``amd64``"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:40
msgid ""
"For more information about RMW implementations, compiler / interpreter "
"versions, and system dependency versions see `REP 2000 <https://www.ros.org/"
"reps/rep-2000.html>`__."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:43
msgid "Installation"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:45
msgid "`Install Galactic Geochelone <../../galactic/Installation.html>`__"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:48
msgid "New features in this ROS 2 release"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:51
msgid "Ability to specify per-logger log levels"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:53
msgid ""
"It is now possible to specify different logging levels for different loggers "
"on the command line:"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:55
msgid ""
"$ ros2 run demo_nodes_cpp talker --ros-args --log-level WARN --log-level "
"talker:=DEBUG"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:59
msgid ""
"The above command sets a global log level of WARN, but sets the log level of "
"the talker node messages to DEBUG. The ``--log-level`` command-line option "
"can be passed an arbitrary number of times to set different log levels for "
"each logger."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:63
msgid "Ability to configure logging directory through environment variables"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:65
msgid ""
"It is now possible to configure the logging directory through two "
"environment variables: ``ROS_LOG_DIR`` and ``ROS_HOME``. The logic is as "
"follows:"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:68
msgid "Use ``$ROS_LOG_DIR`` if ``ROS_LOG_DIR`` is set and not empty."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:69
msgid ""
"Otherwise, use ``$ROS_HOME/log``, using ``~/.ros`` for ``ROS_HOME`` if not "
"set or if empty."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:71
msgid "Thus the default value stays the same: ``~/.ros/log``."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:73
msgid ""
"Related PRs: `ros2/rcl_logging#53 <https://github.com/ros2/rcl_logging/"
"pull/53>`_ and `ros2/launch#460 <https://github.com/ros2/launch/pull/460>`_."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:75
#: ../../../source/Releases/Release-Galactic-Geochelone.rst:608
msgid "For example:"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:77
msgid "ROS_LOG_DIR=/tmp/foo ros2 run demo_nodes_cpp talker"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:81
msgid "Will place all logs in ``/tmp/foo``."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:83
msgid "ROS_HOME=/path/to/home ros2 run demo_nodes_cpp talker"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:87
msgid "Will place all logs in ``/path/to/home/log``."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:90
msgid "Ability to invoke ``rosidl`` pipeline outside CMake"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:92
msgid ""
"It is now straightforward to invoke the ``rosidl`` interface generation "
"pipeline outside CMake. Source code generators and interface definition "
"translators are accessible through a unified command line interface."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:95
msgid "For example, given a ``Demo`` message in some ``demo`` package like:"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:97
msgid ""
"$ mkdir -p demo/msg\n"
"$ cd demo\n"
"$ cat << EOF > msg/Demo.msg\n"
"std_msgs/Header header\n"
"geometry_msgs/Twist twist\n"
"geometry_msgs/Accel accel\n"
"EOF"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:107
msgid "it is easy to generate C, C++, and Python support source code:"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:109
msgid ""
"$ rosidl generate -o gen -t c -t cpp -t py -I$(ros2 pkg prefix --share "
"std_msgs)/.. \\\n"
"  -I$(ros2 pkg prefix --share geometry_msgs)/.. demo msg/Demo.msg"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:114
msgid "Generated source code will be put in the ``gen`` directory."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:116
msgid ""
"One may also translate the message definition to a different format for a "
"third-party code generation tool to consume:"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:118
msgid ""
"$ rosidl translate -o gen --to idl -I$(ros2 pkg prefix --share std_msgs)/.. "
"\\\n"
"  -I$(ros2 pkg prefix --share geometry_msgs)/.. demo msg/Demo.msg"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:123
msgid "The translated message definition will be put in the ``gen`` directory."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:125
msgid ""
"Note that these tools generate sources but do not build it -- that "
"responsibility is still on the caller. This is a first step towards enabling "
"``rosidl`` interface generation in build systems other than CMake. See the "
"`design document <https://github.com/ros2/design/pull/310>`_ for further "
"reference and next steps."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:130
msgid "Externally configure QoS at start-up"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:132
msgid ""
"It is now possible to externally configure the QoS settings for a node at "
"start-up time. QoS settings are **not** configurable during runtime; they "
"are only configurable at start-up. Node authors must opt-in to enable "
"changing QoS settings at start-up. If the feature is enabled on a node, then "
"QoS settings can be set with ROS parameters when a node first starts."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:137
msgid ""
"`Demos in C++ and Python can be found here. <https://github.com/ros2/demos/"
"tree/a66f0e894841a5d751bce6ded4983acb780448cf/quality_of_service_demo#qos-"
"overrides>`_"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:139
msgid ""
"See the `design document for more details <http://design.ros2.org/articles/"
"qos_configurability.html>`_."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:141
msgid ""
"Note, user code handling parameter changes with registered callbacks should "
"avoid rejecting updates for unknown parameters. It was considered bad "
"practice prior to Galactic, but with externally configurable QoS enabled it "
"will result in a hard failure."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:144
msgid ""
"Related PRs: `ros2/rclcpp#1408 <https://github.com/ros2/rclcpp/pull/1408>`_ "
"and `ros2/rclpy#635 <https://github.com/ros2/rclpy/pull/635>`_"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:147
msgid "Python point_cloud2 utilities available"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:149
msgid ""
"Several utilities for interacting with `PointCloud2 messages <https://github."
"com/ros2/common_interfaces/blob/galactic/sensor_msgs/msg/PointCloud2.msg>`__ "
"in Python were `ported to ROS 2 <https://github.com/ros2/common_interfaces/"
"pull/128>`__. These utilities allow one to get a list of points from a "
"PointCloud2 message (``read_points`` and ``read_points_list``), and to "
"create a PointCloud2 message from a list of points (``create_cloud`` and "
"``create_cloud_xyz32``)."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:152
msgid "An example of creating PointCloud 2 message, then reading it back:"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:154
msgid ""
"import sensor_msgs_py.point_cloud2\n"
"from std_msgs.msg import Header\n"
"\n"
"pointlist = [[0.0, 0.1, 0.2]]\n"
"\n"
"pointcloud = sensor_msgs_py.point_cloud2."
"create_cloud_xyz32(Header(frame_id='frame'), pointlist)\n"
"\n"
"for point in sensor_msgs_py.point_cloud2.read_points(pointcloud):\n"
"    print(point)"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:167
msgid "RViz2 Time Panel"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:169
msgid ""
"The Rviz2 Time Panel, which shows the current Wall and ROS time, along with "
"the elapsed Wall and ROS time, has been `ported to RViz2 <https://github.com/"
"ros2/rviz/pull/599>`__. To enable the Time Panel, click on Panels -> Add New "
"Panel, and select \"Time\". A panel that looks like the following will "
"appear:"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:176
msgid "ros2 topic echo can print serialized data"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:178
msgid ""
"When debugging middleware issues, it can be useful to see the raw serialized "
"data that the RMW is sending. The `--raw command-line flag <https://github."
"com/ros2/ros2cli/pull/470>`__ was added to ``ros2 topic echo`` to show this "
"data. To see this in action, run the following commands."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:182
#: ../../../source/Releases/Release-Galactic-Geochelone.rst:223
#: ../../../source/Releases/Release-Galactic-Geochelone.rst:245
#: ../../../source/Releases/Release-Galactic-Geochelone.rst:329
msgid "Terminal 1:"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:184
msgid "$ ros2 topic pub /chatter std_msgs/msg/String \"data: 'hello'\""
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:188
#: ../../../source/Releases/Release-Galactic-Geochelone.rst:229
#: ../../../source/Releases/Release-Galactic-Geochelone.rst:251
#: ../../../source/Releases/Release-Galactic-Geochelone.rst:336
msgid "Terminal 2:"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:190
msgid ""
"$ ros2 topic echo --raw /chatter\n"
"b'\\x00\\x01\\x00\\x00\\x06\\x00\\x00\\x00hello\\x00\\x00\\x00'\n"
"---"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:197
msgid "Get the YAML representation of messages"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:199
msgid ""
"It is now possible to get a YAML representation of all messages in C++ using "
"the `to_yaml <https://github.com/ros2/rosidl/issues/523>`__ function. An "
"example of code that prints out the YAML representation:"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:202
msgid ""
"#include <cstdio>\n"
"\n"
"#include <std_msgs/msg/string.hpp>\n"
"\n"
"int main()\n"
"{\n"
"  std_msgs::msg::String msg;\n"
"  msg.data = \"hello world\";\n"
"  printf(\"%s\", rosidl_generator_traits::to_yaml(msg).c_str());\n"
"  return 0;\n"
"}"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:217
msgid "Ability to load parameter files at runtime through the ros2 command"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:219
msgid ""
"ROS 2 has long had the ability to specify parameter values at startup "
"(through command-line arguments or a YAML file), and to dump current "
"parameters out to a file (through ``ros2 param dump``). Galactic adds the "
"ability to `load parameter values at runtime <https://github.com/ros2/"
"ros2cli/pull/590>`__ from a YAML file using the ``ros2 param load`` verb. "
"For example:"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:225
msgid "$ ros2 run demo_nodes_cpp parameter_blackboard"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:231
msgid ""
"$ ros2 param set /parameter_blackboard foo bar  # sets 'foo' parameter to "
"value 'bar'\n"
"$ ros2 param dump /parameter_blackboard  # dumps current value of parameters "
"to ./parameter_blackboard.yaml\n"
"$ ros2 param set /parameter_blackboard foo different  # sets 'foo' parameter "
"to value 'different'\n"
"$ ros2 param load /parameter_blackboard ./parameter_blackboard.yaml  # "
"reloads previous state of parameters, 'foo' is back to 'bar'"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:239
msgid "Tools to check for QoS incompatibilities"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:241
msgid ""
"Built on top of new QoS compatibility check APIs, ``ros2doctor`` and "
"``rqt_graph`` can now detect and report QoS incompatibilities between "
"publishers and subscriptions."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:243
msgid ""
"Given a publisher and a subscription with `incompatible QoS settings <../../"
"Concepts/Intermediate/About-Quality-of-Service-Settings>`:"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:247
msgid ""
"$ ros2 run demo_nodes_py talker_qos -n 1000  # i.e. best_effort publisher"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:253
msgid ""
"$ ros2 run demo_nodes_py listener_qos --reliable -n 1000  # i.e. reliable "
"subscription"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:257
msgid "``ros2doctor`` reports:"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:259
msgid ""
"$ ros2 doctor --report\n"
"~ ...\n"
"   QOS COMPATIBILITY LIST\n"
"topic [type]            : /chatter [std_msgs/msg/String]\n"
"publisher node          : talker_qos\n"
"subscriber node         : listener_qos\n"
"compatibility status    : ERROR: Best effort publisher and reliable "
"subscription;\n"
"~ ..."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:270
msgid "while ``rqt_graph`` shows:"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:274
msgid ""
"Related PRs: `ros2/ros2cli#621 <https://github.com/ros2/ros2cli/pull/621>`_, "
"`ros-visualization/rqt_graph#61 <https://github.com/ros-visualization/"
"rqt_graph/pull/61>`_"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:277
msgid "Use launch substitutions in parameter files"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:279
msgid ""
"Just like ``rosparam`` tags in ROS 1 ``roslaunch``, ``launch_ros`` can now "
"evaluate substitutions in parameter files."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:281
msgid ""
"For example, given some ``parameter_file_with_substitutions.yaml`` like the "
"following:"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:283
msgid ""
"/**:\n"
"  ros__parameters:\n"
"    launch_date: $(command date)"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:289
msgid ""
"Set ``allow_substs`` to ``True`` to get substitutions evaluated upon "
"``Node`` launch:"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:291
msgid ""
"import launch\n"
"import launch_ros.parameter_descriptions\n"
"import launch_ros.actions\n"
"\n"
"def generate_launch_description():\n"
"    return launch.LaunchDescription([\n"
"        launch_ros.actions.Node(\n"
"            package='demo_nodes_cpp',\n"
"            executable='parameter_blackboard',\n"
"            parameters=[\n"
"                launch_ros.parameter_descriptions.ParameterFile(\n"
"                    param_file='parameter_file_with_substitutions.yaml',\n"
"                    allow_substs=True)\n"
"            ]\n"
"        )\n"
"    ])"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:310
msgid "XML launch files also support this."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:312
msgid ""
"<launch>\n"
"  <node pkg=\"demo_nodes_cpp\" exec=\"parameter_blackboard\">\n"
"    <param from=\"parameter_file_with_substitutions.yaml\" "
"allow_substs=\"true\"/>\n"
"  </node>\n"
"</launch>"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:320
msgid ""
"Related PR: `ros2/launch_ros#168 <https://github.com/ros2/launch_ros/"
"pull/168>`_"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:323
msgid "Support for unique network flows"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:325
msgid ""
"Applications may now require UDP/TCP and IP-based RMW implementations to "
"provide unique *network flows* (i.e. unique `Differentiated Services Code "
"Points <https://tools.ietf.org/html/rfc2474>`_ and/or unique `IPv6 Flow "
"Labels <https://tools.ietf.org/html/rfc6437>`_ and/or unique ports in IP "
"packet headers) for publishers and subscriptions, enabling QoS "
"specifications for these IP streams in network architectures that support "
"such a feature, like 5G networks."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:327
msgid ""
"To see this in action, you may run these C++ examples (to be found in the "
"`ros2/examples <https://github.com/ros2/examples>`__ repository):"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:331
msgid ""
"$ ros2 run examples_rclcpp_minimal_publisher "
"publisher_member_function_with_unique_network_flow_endpoints"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:338
msgid ""
"$ ros2 run examples_rclcpp_minimal_subscriber "
"subscriber_member_function_with_unique_network_flow_endpoints"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:343
msgid ""
"See the `Unique Network Flows design document <https://github.com/ros2/"
"design/pull/304>`_ for further reference."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:346
msgid "Rosbag2 New Features"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:349
msgid "Split recording by time"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:351
msgid ""
"In Foxy, you could only split bags as they were recording by the size of the "
"bag, now you can also split by the elapsed time. The following command will "
"split bagfiles into 100-second chunks."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:354
msgid "$ ros2 bag record --all --max-bag-duration 100"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:359
msgid "ros2 bag list"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:361
msgid ""
"This new command lists installed plugins of various types that rosbag2 uses."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:363
msgid ""
"$ ros2 bag list storage\n"
"rosbag2_v2\n"
"sqlite3\n"
"\n"
"$ ros2 bag list converter\n"
"rosbag_v2_converter"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:374
msgid "Compression implementation is a plugin"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:376
msgid ""
"In Foxy, rosbag2 compression was hardcoded with a Zstd library "
"implementation. This has been rearchitected so that compression "
"implementations are a plugin, and can be swapped out without modifying the "
"core rosbag2 codebase. The default plugin that ships with ``ros-galactic-"
"rosbag2`` is still the Zstd plugin - but now more can be released and used, "
"and by selectively installing packages Zstd could be excluded from an "
"installation."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:382
msgid "Compress per-message"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:384
msgid ""
"In Foxy, you could automatically compress each rosbag file as it was split "
"(per-file compression), but now you can also specify per-message compression."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:386
msgid ""
"$ ros2 bag record --all --compression-format zstd --compression-mode message"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:392
msgid "Rosbag2 Python API"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:394
msgid ""
"A new package ``rosbag2_py`` has been released in Galactic, which provides a "
"Python API. This package is a ``pybind11`` binding around the C++ API. As of "
"the initial Galactic release, it does not yet expose all functionality "
"available via the ``rosbag2_cpp`` API, but it is the sole connection for the "
"``ros2 bag`` CLI tool, so a good deal of functionality is available."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:400
msgid "performance testing package and performance improvements"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:402
msgid ""
"A thorough performance analysis project was performed on rosbag2 since the "
"Foxy release. The full initial report is available at https://github.com/"
"ros2/rosbag2/blob/galactic/rosbag2_performance/"
"rosbag2_performance_benchmarking/docs/rosbag2_performance_improvements.pdf . "
"The package ``rosbag2_performance_benchmarking`` provides tools to run "
"performance analyses, especially on recording, which helps us maintain and "
"improve the performance of rosbag2."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:406
msgid ""
"Following this report, key work was done do improve the performance to a "
"much more usable state for actual robot workflows. To highlight a key metric "
"- in a high bandwidth stress test (200Mbps), the Foxy release dropped up to "
"70% of messages, whereas the Galactic version was approximately 100% "
"retention. Please see the linked report for more details."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:411
msgid "``--regex`` and ``--exclude`` options for topic selection"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:413
msgid ""
"The new recording options ``--regex`` and ``--exclude`` allow for fine-"
"tuning the topics recorded in a bag, without having to explicitly list all "
"topics. These options may be used together or separately, and in conjunction "
"with ``--all``"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:416
msgid ""
"The following command will record only topics with \"scan\" in the name."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:418
msgid "$ ros2 bag record --regex \"*scan*\""
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:422
msgid ""
"The following command will record all topics except for ones in ``/"
"my_namespace/``"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:424
msgid "$ ros2 bag record --all --exclude \"/my_namespace/*\""
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:430
msgid "``ros2 bag reindex``"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:432
msgid ""
"ROS 2 bags are represented by a directory, instead of a single file. This "
"directory contains a ``metadata.yaml`` file, and one or more bag files. When "
"the ``metadata.yaml`` file is lost or missing, ``ros2 bag reindex $bag_dir`` "
"will attempt to reconstruct it by reading all the bag files in the directory."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:437
msgid "Playback time control"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:439
msgid ""
"New controls have been added for rosbag2 playback - pause & resume, change "
"rate, and play-next. As of the Galactic release, these controls are exposed "
"only as services on the rosbag2 player node. Development is in progress to "
"expose them to keyboard controls as well in ``ros2 bag play``, but until "
"then a user application with buttons or keyboard controls may be trivially "
"implemented to call these services."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:443
msgid "In one shell:"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:445
msgid "$ ros2 bag play my_bag"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:449
msgid "In another shell:"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:451
msgid ""
"$ ros2 service list -t\n"
"/rosbag2_player/get_rate [rosbag2_interfaces/srv/GetRate]\n"
"/rosbag2_player/is_paused [rosbag2_interfaces/srv/IsPaused]\n"
"/rosbag2_player/pause [rosbag2_interfaces/srv/Pause]\n"
"/rosbag2_player/play_next [rosbag2_interfaces/srv/PlayNext]\n"
"/rosbag2_player/resume [rosbag2_interfaces/srv/Resume]\n"
"/rosbag2_player/set_rate [rosbag2_interfaces/srv/SetRate]\n"
"/rosbag2_player/toggle_paused [rosbag2_interfaces/srv/TogglePaused]\n"
"\n"
"$ ros2 service call /rosbag2_player/is_paused rosbag2_interfaces/IsPaused"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:464
msgid "To pause playback:"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:466
msgid "$ ros2 service call /rosbag2_player/pause rosbag2_interfaces/Pause"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:470
msgid "To resume playback:"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:472
msgid "$ ros2 service call /rosbag2_player/resume rosbag2_interfaces/Resume"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:476
msgid ""
"To change the paused state of playback to its opposite. If playing, pauses. "
"If paused, resumes."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:480
msgid ""
"$ ros2 service call /rosbag2_player/toggle_paused rosbag2_interfaces/"
"TogglePaused"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:484
msgid "To get the current playback rate:"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:486
msgid "$ ros2 service call /rosbag2_player/get_rate"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:490
msgid "To set the current playback rate (must be > 0):"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:492
msgid ""
"$ ros2 service call /rosbag2_player/set_rate rosbag2_interfaces/SetRate "
"\"rate: 0.1\""
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:496
msgid "To play a single next message (only works while paused):"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:498
msgid ""
"$ ros2 service call /rosbag2_player/play_next rosbag2_interfaces/PlayNext"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:504
msgid "Playback publishes /clock"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:506
msgid ""
"Rosbag2 can also dictate \"simulation time\" by publishing to the ``/clock`` "
"topic during playback. The following commands will publish the clock message "
"at a regular interval."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:509
msgid "To publish at the default rate of 40Hz:"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:511
msgid "$ ros2 bag play my_bag --clock"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:516
msgid "To publish at a specific rate, e.g., 100Hz:"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:518
msgid "$ ros2 bag play my_bag --clock 100"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:523
msgid "Changes since the Foxy release"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:526
msgid "Default RMW changed to Eclipse Cyclone DDS"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:528
msgid ""
"During the Galactic development process, the ROS 2 Technical Steering "
"Committee `voted <https://discourse.ros.org/t/ros-2-galactic-default-"
"middleware-announced/18064>`__ to change the default ROS middleware (RMW) to "
"`Eclipse Cyclone DDS <https://github.com/eclipse-cyclonedds/cyclonedds>`__ "
"project of `Eclipse Foundation <https://www.eclipse.org>`__. Without any "
"configuration changes, users will get Eclipse Cyclone DDS by default. Fast "
"DDS and Connext are still Tier-1 supported RMW vendors, and users can opt-in "
"to use one of these RMWs at their discretion by using the "
"``RMW_IMPLEMENTATION`` environment variable. See the `Working with multiple "
"RMW implementations guide <../../How-To-Guides/Working-with-multiple-RMW-"
"implementations>` for more information."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:534
msgid "Connext RMW changed to rmw_connextdds"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:536
msgid ""
"A new RMW for Connext called `rmw_connextdds <https://github.com/ros2/"
"rmw_connextdds>`_ was merged for Galactic. This RMW has better performance "
"and fixes many of the issues with the older RMW ``rmw_connext_cpp``."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:540
msgid "Large improvements in testing and overall quality"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:542
msgid ""
"Galactic contains many changes that fix race conditions, plug memory leaks, "
"and fix user reported problems. Besides these changes, there was a concerted "
"effort during Galactic development to improve overall quality of the system "
"by implementing `REP 2004 <https://www.ros.org/reps/rep-2004.html>`__. The "
"``rclcpp`` package and all of its dependencies (which include most of the "
"ROS 2 non-Python core packages) were brought up to `Quality Level 1 <https://"
"www.ros.org/reps/rep-2004.html#quality-level-1>`__ by:"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:546
msgid "Having a version policy (QL1 requirement 1)"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:547
msgid "Having a documented change control process (QL1 requirement 2)"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:548
msgid "Documenting all features and public APIs (QL1 requirement 3)"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:549
msgid "Adding many additional tests (QL1 requirement 4):"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:551
msgid "System tests for all features"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:552
msgid "Unit tests for all public APIs"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:553
msgid "Nightly performance tests"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:554
msgid "Code coverage at 95%"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:556
msgid ""
"Having all runtime dependencies of packages be at least as high as the "
"package (QL1 requirement 5)"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:557
msgid "Supporting all of the REP-2000 platforms (QL1 requirement 6)"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:558
msgid "Having a vulnerability disclosure policy (QL1 requirement 7)"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:561
msgid "rmw"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:564
#: ../../../source/Releases/Release-Galactic-Geochelone.rst:732
#: ../../../source/Releases/Release-Galactic-Geochelone.rst:808
msgid "New API for checking QoS profile compatibility"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:566
msgid ""
"``rmw_qos_profile_check_compatible`` is a new function for checking the "
"compatibility of two QoS profiles."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:568
msgid ""
"RMW vendors should implement this API for QoS debugging and introspection "
"features in tools such as ``rqt_graph`` to work correctly."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:570
msgid "Related PR: `ros2/rmw#299 <https://github.com/ros2/rmw/pull/299>`_"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:573
msgid "ament_cmake"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:576
msgid "``ament_install_python_package()`` now installs a Python egg"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:578
msgid ""
"By installing a flat Python egg, Python packages installed using "
"``ament_install_python_package()`` can be discovered using modules such as "
"``pkg_resources`` and ```importlib.metadata``. Also, additional metadata can "
"be provided in a ``setup.cfg`` file (including entry points)."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:580
msgid ""
"Related PR: `ament/ament_cmake#326 <https://github.com/ament/ament_cmake/"
"pull/326>`_"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:583
msgid "``ament_target_dependencies()`` handles SYSTEM dependencies"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:585
msgid ""
"Some package dependencies can now be marked as SYSTEM dependencies, helping "
"to cope with warnings in external code. Typically, SYSTEM dependencies are "
"also excluded from dependency calculations -- use them with care."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:587
msgid ""
"Related PR: `ament/ament_cmake#297 <https://github.com/ament/ament_cmake/"
"pull/297>`_"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:590
msgid "nav2"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:592
msgid ""
"Changes include, but are not limited to, a number of stability improvements, "
"new plugins, interface changes, costmap filters. See `Migration Guides "
"<https://navigation.ros.org/migration/Foxy.html>`_ for full list"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:596
msgid "tf2_ros Python split out of tf2_ros"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:598
msgid ""
"The Python code that used to live in tf2_ros has been moved into its own "
"package named tf2_ros_py. Any existing Python code that depends on tf2_ros "
"will continue to work, but the package.xml of those packages should be "
"amended to ``exec_depend`` on tf2_ros_py."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:602
msgid "tf2_ros Python TransformListener uses global namespace"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:604
msgid ""
"The Python ``TransformListener`` now subscribes to ``/tf`` and ``/"
"tf_static`` in the global namespace. Previously, it was susbcribing in the "
"node's namespace. This means that the node's namespace will no longer have "
"an effect on the ``/tf`` and ``/tf_static`` subscriptions."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:610
msgid "$ ros2 run tf2_ros tf2_echo --ros-args -r __ns:=/test -- odom base_link"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:614
msgid ""
"will subscribe to ``/tf`` and ``/tf_static``, as ``ros2 topic list`` will "
"show."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:616
msgid ""
"Related PR: `ros2/geometry2#390 <https://github.com/ros2/geometry2/"
"pull/390>`_"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:619
msgid "rclcpp"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:622
msgid "Change in spin_until_future_complete template parameters"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:624
msgid ""
"The first template parameter of ``Executor::spin_until_future_complete`` was "
"the future result type ``ResultT``, and the method only accepted a ``std::"
"shared_future<ResultT>``. In order to accept other types of futures (e.g.: "
"``std::future``), that parameter was changed to the future type itself."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:627
msgid ""
"In places where a ``spin_until_future_complete`` call was relying on "
"template argument deduction, no change is needed. If not, this is an example "
"diff:"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:630
msgid ""
"std::shared_future<MyResultT> future;\n"
"...\n"
"-executor.spin_until_future_complete<MyResultT>(future);\n"
"+executor.spin_until_future_complete<std::shared_future<MyResultT>>(future);"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:638
msgid ""
"For more details, see `ros2/rclcpp#1160 <https://github.com/ros2/rclcpp/"
"pull/1160>`_. For an example of the needed changes in user code, see `ros-"
"visualization/interactive_markers#72 <https://github.com/ros-visualization/"
"interactive_markers/pull/72>`_."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:642
msgid "Change in default ``/clock`` subscription QoS profile"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:644
msgid ""
"The default was changed from a reliable communication with history depth 10 "
"to a best effort communication with history depth 1. See `ros2/rclcpp#1312 "
"<https://github.com/ros2/rclcpp/pull/1312>`_."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:648
msgid "Waitable API"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:650
msgid ""
"Waitable API was modified to avoid issues with the "
"``MultiThreadedExecutor``. This only affects users implementing a custom "
"waitable. See `ros2/rclcpp#1241 <https://github.com/ros2/rclcpp/pull/1241>`_ "
"for more details."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:655
msgid "Change in ``rclcpp``'s logging macros"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:656
msgid ""
"Previously, the logging macros were vulnerable to a `format string attack "
"<https://owasp.org/www-community/attacks/Format_string_attack>`_, where the "
"format string is evaluated and can potentially execute code, read the stack, "
"or cause a segmentation fault in the running program. To address this "
"security issue, the logging macro now accepts only string literals for it's "
"format string argument."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:659
msgid "If you previously had code like:"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:661
msgid ""
"const char *my_const_char_string format = \"Foo\";\n"
"RCLCPP_DEBUG(get_logger(), my_const_char_string);"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:666
#: ../../../source/Releases/Release-Galactic-Geochelone.rst:690
msgid "you should now replace it with:"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:668
msgid ""
"const char *my_const_char_string format = \"Foo\";\n"
"RCLCPP_DEBUG(get_logger(), \"%s\", my_const_char_string);"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:673
msgid "or:"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:675
msgid "RCLCPP_DEBUG(get_logger(), \"Foo\");"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:680
msgid ""
"This change removes some convenience from the logging macros, as ``std::"
"string``\\s are no longer accepted as the format argument."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:683
msgid "If you previously had code with no format arguments like:"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:685
msgid ""
"std::string my_std_string = \"Foo\";\n"
"RCLCPP_DEBUG(get_logger(), my_std_string);"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:692
msgid ""
"std::string my_std_string = \"Foo\";\n"
"RCLCPP_DEBUG(get_logger(), \"%s\", my_std_string.c_str());"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:698
msgid ""
"If you are using a ``std::string`` as a format string with format arguments, "
"converting that string to a ``char *`` and using it as the format string "
"will yield a format security warning. That's because the compiler has no way "
"at compile to introspect into the ``std::string`` to verify the arguments.  "
"To avoid the security warning, we recommend you build the string manually "
"and pass it in with no format arguments like the previous example."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:700
msgid ""
"``std::stringstream`` types are still accepted as arguments to the stream "
"logging macros. See `ros2/rclcpp#1442 <https://github.com/ros2/rclcpp/"
"pull/1442>`_ for more details."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:704
#: ../../../source/Releases/Release-Galactic-Geochelone.rst:777
msgid "Parameter types are now static by default"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:706
msgid ""
"Previously, the type of a parameter could be changed when a parameter was "
"set. For example, if a parameter was declared as an integer, a later call to "
"set the parameter could change that type to a string. This behavior could "
"lead to bugs, and is rarely what the user wants. As of Galactic parameter "
"types are static by default, and attempts to change the type will fail. If "
"the previous dynamic behavior is desired, there is an mechanism to opt it in "
"(see the code below)."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:712
msgid ""
"// declare integer parameter with default value, trying to set it to a "
"different type will fail.\n"
"node->declare_parameter(\"my_int\", 5);\n"
"// declare string parameter with no default and mandatory user provided "
"override.\n"
"// i.e. the user must pass a parameter file setting it or a command line "
"rule -p <param_name>:=<value>\n"
"node->declare_parameter(\"string_mandatory_override\", rclcpp::"
"PARAMETER_STRING);\n"
"// Conditionally declare a floating point parameter with a mandatory "
"override.\n"
"// Useful when the parameter is only needed depending on other conditions "
"and no default is reasonable.\n"
"if (mode == \"modeA\") {\n"
"    node->declare_parameter(\"conditionally_declare_double_parameter\", "
"rclcpp::PARAMETER_DOUBLE);\n"
"}\n"
"// You can also get the old dynamic typing behavior if you want:\n"
"rcl_interfaces::msg::ParameterDescriptor descriptor;\n"
"descriptor.dynamic_typing = true;\n"
"node->declare_parameter(\"dynamically_typed_param\", rclcpp::"
"ParameterValue{}, descriptor);"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:729
#: ../../../source/Releases/Release-Galactic-Geochelone.rst:805
msgid ""
"For more details see https://github.com/ros2/rclcpp/blob/galactic/rclcpp/doc/"
"notes_on_statically_typed_parameters.md."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:734
msgid ""
"``qos_check_compatible`` is a new function for checking the compatibility of "
"two QoS profiles."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:736
msgid ""
"Related PR: `ros2/rclcpp#1554 <https://github.com/ros2/rclcpp/pull/1554>`_"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:739
msgid "rclpy"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:742
msgid "Removal of deprecated Node.set_parameters_callback"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:744
msgid ""
"The method ``Node.set_parameters_callback`` was `deprecated in ROS Foxy "
"<https://github.com/ros2/rclpy/pull/504>`_ and has been `removed in ROS "
"Galactic <https://github.com/ros2/rclpy/pull/633>`_. Use ``Node."
"add_on_set_parameters_callback()`` instead. Here is some example code using "
"it."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:748
msgid ""
"import rclpy\n"
"import rclpy.node\n"
"from rcl_interfaces.msg import ParameterType\n"
"from rcl_interfaces.msg import SetParametersResult\n"
"\n"
"\n"
"rclpy.init()\n"
"node = rclpy.node.Node('callback_example')\n"
"node.declare_parameter('my_param', 'initial value')\n"
"\n"
"\n"
"def on_parameter_event(parameter_list):\n"
"    for parameter in parameter_list:\n"
"        node.get_logger().info(f'Got {parameter.name}={parameter.value}')\n"
"    return SetParametersResult(successful=True)\n"
"\n"
"\n"
"node.add_on_set_parameters_callback(on_parameter_event)\n"
"rclpy.spin(node)"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:770
msgid "Run this command to see the parameter callback in action."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:772
msgid "ros2 param set /callback_example my_param \"Hello World\""
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:779
msgid ""
"In Foxy and earlier a call to set a parameter could change its type. As of "
"Galactic parameter types are static and cannot be changed by default. If the "
"previous behavior is desired, then set ``dynamic_typing`` to true in the "
"parameter descriptor. Here is an example."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:784
msgid ""
"import rclpy\n"
"import rclpy.node\n"
"from rcl_interfaces.msg import ParameterDescriptor\n"
"\n"
"rclpy.init()\n"
"node = rclpy.node.Node('static_param_example')\n"
"node.declare_parameter('static_param', 'initial value')\n"
"node.declare_parameter('dynamic_param', 'initial value', "
"descriptor=ParameterDescriptor(dynamic_typing=True))\n"
"rclpy.spin(node)"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:796
msgid ""
"Run these commands to see how statically and dynamically typed parameters "
"are different."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:798
msgid ""
"$ ros2 param set /static_param_example dynamic_param 42\n"
"Set parameter successful\n"
"$ ros2 param set /static_param_example static_param 42\n"
"Setting parameter failed: Wrong parameter type, expected 'Type.STRING' got "
"'Type.INTEGER'"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:810
msgid ""
"``rclpy.qos.qos_check_compatible`` is `a new function <https://github.com/"
"ros2/rclpy/pull/708>`_ for checking the compatibility of two QoS profiles. "
"If the profiles are compatible, then a publisher and subscriber using them "
"will be able to talk to each other."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:813
msgid ""
"import rclpy.qos\n"
"\n"
"publisher_profile = rclpy.qos.qos_profile_sensor_data\n"
"subscription_profile = rclpy.qos.qos_profile_parameter_events\n"
"\n"
"print(rclpy.qos.qos_check_compatible(publisher_profile, "
"subscription_profile))"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:822
msgid ""
"$ python3 qos_check_compatible_example.py\n"
"(QoSCompatibility.ERROR, 'ERROR: Best effort publisher and reliable "
"subscription;')"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:828
msgid "rclcpp_action"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:831
msgid "Action client goal response callback signature changed"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:833
msgid ""
"The goal response callback should now take a shared pointer to a goal "
"handle, instead of a future."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:835
msgid ""
"For `example <https://github.com/ros2/examples/pull/291>`_, old signature:"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:837
msgid ""
"void goal_response_callback(std::shared_future<GoalHandleFibonacci::"
"SharedPtr> future)"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:841
msgid "New signature:"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:843
msgid "void goal_response_callback(GoalHandleFibonacci::SharedPtr goal_handle)"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:847
msgid ""
"Related PR: `ros2/rclcpp#1311 <https://github.com/ros2/rclcpp/pull/1311>`_"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:850
msgid "rosidl_typesupport_introspection_c"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:853
msgid "API break in function that gets an element from an array"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:855
msgid ""
"The signature of the function was changed because it was semantically "
"different to all the other functions used to get an element from an array or "
"sequence. This only affects authors of rmw implementations using the "
"introspection typesupport."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:858
msgid ""
"For further details, see `ros2/rosidl#531 <https://github.com/ros2/rosidl/"
"pull/531>`_."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:861
#: ../../../source/Releases/Release-Galactic-Geochelone.rst:913
msgid "rcl_lifecycle and rclcpp_lifecycle"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:864
msgid "RCL's lifecycle state machine gets new init API"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:866
msgid ""
"The lifecycle state machine in rcl_lifecycle was modified to expect a newly "
"introduced options struct, combining general configurations for the state "
"machine. The option struct allows to indicate whether the state machine "
"shall be initialized with default values, whether its attached services are "
"active and which allocator to be used."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:869
msgid ""
"rcl_ret_t\n"
"rcl_lifecycle_state_machine_init(\n"
"  rcl_lifecycle_state_machine_t * state_machine,\n"
"  rcl_node_t * node_handle,\n"
"  const rosidl_message_type_support_t * ts_pub_notify,\n"
"  const rosidl_service_type_support_t * ts_srv_change_state,\n"
"  const rosidl_service_type_support_t * ts_srv_get_state,\n"
"  const rosidl_service_type_support_t * ts_srv_get_available_states,\n"
"  const rosidl_service_type_support_t * ts_srv_get_available_transitions,\n"
"  const rosidl_service_type_support_t * ts_srv_get_transition_graph,\n"
"  const rcl_lifecycle_state_machine_options_t * state_machine_options);"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:884
msgid "RCL's lifecycle state machine stores allocator instance"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:886
msgid ""
"The options struct (discussed above) entails an instance of the allocator "
"being used for initializing the state machine. This options struct and there "
"the embodied allocator are being stored within the lifecycle state machine. "
"As a direct consequence, the ``rcl_lifecycle_fini function`` no longer "
"expects an allocator in its fini function but rather uses the allocator set "
"in the options struct for deallocating its internal data structures."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:890
msgid ""
"rcl_ret_t\n"
"rcl_lifecycle_state_machine_fini(\n"
"  rcl_lifecycle_state_machine_t * state_machine,\n"
"  rcl_node_t * node_handle);"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:898
msgid "RCLCPP's lifecycle node exposes option to not instantiate services"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:900
msgid ""
"In order to use rclcpp's lifecycle nodes without exposing its internal "
"services such as ``change_state``, ``get_state`` et. al., the constructor of "
"a lifecycle node has a newly introduced parameter indicating whether or not "
"the services shall be available. This boolean flag is set to true by "
"default, not requiring any changes to existing API if not wished."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:903
msgid ""
"explicit LifecycleNode(\n"
"  const std::string & node_name,\n"
"  const rclcpp::NodeOptions & options = rclcpp::NodeOptions(),\n"
"  bool enable_communication_interface = true);"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:910
msgid ""
"Related PRs: `ros2/rcl#882 <https://github.com/ros2/rcl/pull/882>`_ and "
"`ros2/rclcpp#1507 <https://github.com/ros2/rclcpp/pull/1507>`_"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:916
msgid "Recording - Split by time"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:921
msgid "Known Issues"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:924
msgid "ros2cli"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:927
msgid "Daemon slows down CLI on Windows"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:929
msgid "As a workaround, CLI commands may be used without a daemon e.g.:"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:931
msgid "$ ros2 topic list --no-daemon"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:936
msgid ""
"Issue is tracked by `ros2/ros2cli#637 <https://github.com/ros2/ros2cli/"
"issues/637>`_."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:939
msgid "rqt"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:942
msgid "Some rqt_bag icons are missing"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:944
msgid ""
"The icons to \"Zoom In\", \"Zoom Out\", \"Zoom Home\", and \"Toggle "
"Thumbnails\" are missing in ``rqt_bag``. The issue is tracked in `ros-"
"visualization/rqt_bag#102 <https://github.com/ros-visualization/rqt_bag/"
"issues/102>`_"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:948
msgid "Most rqt utilities don't work standalone on Windows"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:950
msgid ""
"Launching the rqt utilities \"standalone\" on Windows (like ``ros2 run "
"rqt_graph rqt_graph``) generally doesn't work. The workaround is to launch "
"the rqt container process (``rqt``), and then insert the plugins to be used."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:954
msgid "rviz2"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:957
msgid "RViz2 panel close buttons are blank"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:959
msgid ""
"The upper right-hand corner of every RViz2 panel should contain an \"X\" to "
"allow one to close the panel. Those buttons are there, but the \"X\" inside "
"of them is missing on all platforms. The issue is being tracked in `ros2/"
"rviz2#692 <https://github.com/ros2/rviz/issues/692>`__."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:964
msgid "Timeline before the release"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:966
msgid "Mon. March 22, 2021 - Alpha"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:967
msgid "Preliminary testing and stabilization of ROS Core [1]_ packages."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:969
msgid "Mon. April 5, 2021 - Freeze"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:970
msgid ""
"API and feature freeze for ROS Core [1]_ packages in Rolling Ridley. Note "
"that this includes ``rmw``, which is a recursive dependency of ``ros_core``. "
"Only bug fix releases should be made after this point. New packages can be "
"released independently."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:975
msgid "Mon. April 19, 2021 - Branch"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:976
msgid ""
"Branch from Rolling Ridley. ``rosdistro`` is reopened for Rolling PRs for "
"ROS Core [1]_ packages. Galactic development shifts from ``ros-rolling-*`` "
"packages to ``ros-galactic-*`` packages."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:980
msgid "Mon. April 26, 2021 - Beta"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:981
msgid ""
"Updated releases of ROS Desktop [2]_ packages available. Call for general "
"testing."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:984
msgid "Mon. May 17, 2021 - RC"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:985
msgid "Release Candidate packages are built."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:986
msgid "Updated releases of ROS Desktop [2]_ packages available."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:988
msgid "Thu. May 20, 2021 - Distro Freeze"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:989
msgid ""
"Freeze rosdistro. No PRs for Galactic on the ``rosdistro`` repo will be "
"merged (reopens after the release announcement)."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:992
msgid "Sun. May 23, 2021 - General Availability"
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:993
msgid "Release announcement."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:994
msgid "``rosdistro`` is reopened for Galactic PRs."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:996
msgid ""
"The ``ros_core`` variant is described in `REP 2001 (ros-core) <https://www."
"ros.org/reps/rep-2001.html#ros-core>`_."
msgstr ""

#: ../../../source/Releases/Release-Galactic-Geochelone.rst:997
msgid ""
"The ``desktop`` variant is described in `REP 2001 (desktop-variants) "
"<https://www.ros.org/reps/rep-2001.html#desktop-variants>`_."
msgstr ""
