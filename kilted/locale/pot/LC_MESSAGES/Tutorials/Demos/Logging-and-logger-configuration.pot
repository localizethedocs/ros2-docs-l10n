# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation kilted\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-01 08:36+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:7
msgid "Logging"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:11
msgid "Table of Contents"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:13
msgid ""
"See `the logging page <../../Concepts/Intermediate/About-Logging>` for "
"details on available functionality."
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:16
msgid "Using log statements in code"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:19
msgid "Basic logging"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:21
msgid ""
"The following code will output a log message from a ROS 2 node at ``DEBUG`` "
"severity:"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:25
#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:50
#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:74
#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:100
#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:127
#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:241
msgid "C++"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:27
msgid ""
"// printf style\n"
"RCLCPP_DEBUG(node->get_logger(), \"My log message %d\", 4);\n"
"\n"
"// C++ stream style\n"
"RCLCPP_DEBUG_STREAM(node->get_logger(), \"My log message \" << 4);"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:35
#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:60
#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:84
#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:113
#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:136
#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:248
msgid "Python"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:37
msgid "node.get_logger().debug('My log message %d' % (4))"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:41
msgid ""
"Note that in both cases, no trailing newline is added, as the logging "
"infrastructure will automatically add one."
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:44
msgid "Logging only the first time"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:46
msgid ""
"The following code will output a log message from a ROS 2 node at ``INFO`` "
"severity, but only the first time it is hit:"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:52
msgid ""
"// printf style\n"
"RCLCPP_INFO_ONCE(node->get_logger(), \"My log message %d\", 4);\n"
"\n"
"// C++ stream style\n"
"RCLCPP_INFO_STREAM_ONCE(node->get_logger(), \"My log message \" << 4);"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:62
msgid ""
"num = 4\n"
"node.get_logger().info(f'My log message {num}', once=True)"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:68
msgid "Logging all but the first time"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:70
msgid ""
"The following code will output a log message from a ROS 2 node at ``WARN`` "
"severity, but not the very first time it is hit:"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:76
msgid ""
"// printf style\n"
"RCLCPP_WARN_SKIPFIRST(node->get_logger(), \"My log message %d\", 4);\n"
"\n"
"// C++ stream style\n"
"RCLCPP_WARN_STREAM_SKIPFIRST(node->get_logger(), \"My log message \" << 4);"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:86
msgid ""
"num = 4\n"
"node.get_logger().warning('My log message {0}'.format(num), skip_first=True)"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:92
msgid "Logging throttled"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:94
msgid ""
"The following code will output a log message from a ROS 2 node at ``ERROR`` "
"severity, but no more than once per second."
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:96
msgid ""
"The interval parameter specifying milliseconds between messages should have "
"an integer data type so it can be converted to a "
"``rcutils_duration_value_t`` (an ``int64_t``):"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:102
msgid ""
"// printf style\n"
"RCLCPP_ERROR_THROTTLE(node->get_logger(), *node->get_clock(), 1000, \"My log "
"message %d\", 4);\n"
"\n"
"// C++ stream style\n"
"RCLCPP_ERROR_STREAM_THROTTLE(node->get_logger(), *node->get_clock(), 1000, "
"\"My log message \" << 4);\n"
"\n"
"// For now, use the nanoseconds() method to use an existing rclcpp::Duration "
"value, see https://github.com/ros2/rclcpp/issues/1929\n"
"RCLCPP_ERROR_STREAM_THROTTLE(node->get_logger(), *node->get_clock(), "
"msg_interval.nanoseconds()/1000000, \"My log message \" << 4);"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:115
msgid ""
"num = 4\n"
"node.get_logger().error(f'My log message {num}', throttle_duration_sec=1)"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:121
msgid "Logging throttled all but the first time"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:123
msgid ""
"The following code will output a log message from a ROS 2 node at ``DEBUG`` "
"severity, no more than once per second, skipping the very first time it is "
"hit:"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:129
msgid ""
"// printf style\n"
"RCLCPP_DEBUG_SKIPFIRST_THROTTLE(node->get_logger(), *node->get_clock(), "
"1000, \"My log message %d\", 4);\n"
"\n"
"RCLCPP_DEBUG_SKIPFIRST_THROTTLE(node->get_logger(), *node->get_clock(), "
"1000, \"My log message \" << 4);"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:138
msgid ""
"num = 4\n"
"node.get_logger().debug(f'My log message {num}', skip_first=True, "
"throttle_duration_sec=1.0)"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:144
msgid "Logging demo"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:146
msgid ""
"In this `demo <https://github.com/ros2/demos/tree/rolling/logging_demo>`_, "
"different types of log calls are shown and the severity level of different "
"loggers is configured locally and externally."
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:148
msgid "Start the demo with:"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:150
#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:512
msgid "$ ros2 run logging_demo logging_demo_main"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:154
msgid ""
"Over time you will see output from various log calls with different "
"properties. To start with you will only see output from log calls with "
"severity ``INFO`` and above (``WARN``, ``ERROR``, ``FATAL``). Note that the "
"first message will only be logged once, though the line is reached on each "
"iteration, as that is a property of the log call used for that message."
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:159
msgid "Logging directory configuration"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:161
msgid ""
"The logging directory can be configured through two environment variables: "
"``ROS_LOG_DIR`` and ``ROS_HOME``. The logic is as follows:"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:164
msgid "Use ``$ROS_LOG_DIR`` if ``ROS_LOG_DIR`` is set and not empty."
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:165
msgid ""
"Otherwise, use ``$ROS_HOME/log``, using ``~/.ros`` for ``ROS_HOME`` if not "
"set or if empty."
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:167
msgid "For example, to set the logging directory to ``~/my_logs``:"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:171
#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:201
#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:385
#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:419
#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:463
#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:492
msgid "Linux"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:173
#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:180
msgid ""
"$ export ROS_LOG_DIR=~/my_logs\n"
"$ ros2 run logging_demo logging_demo_main"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:178
#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:208
#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:392
#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:426
#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:469
#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:498
msgid "macOS"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:185
#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:215
#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:399
#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:433
#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:475
#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:504
msgid "Windows"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:187
msgid ""
"$ set \"ROS_LOG_DIR=~/my_logs\"\n"
"$ ros2 run logging_demo logging_demo_main"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:192
msgid "You will then find the logs under ``~/my_logs/``."
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:194
msgid ""
"Alternatively, you can set ``ROS_HOME`` and the logging directory will be "
"relative to it (``$ROS_HOME/log``). ``ROS_HOME`` is intended to be used by "
"anything that needs a base directory. Note that ``ROS_LOG_DIR`` has to be "
"either unset or empty. For example, with ``ROS_HOME`` set to ``~/"
"my_ros_home``:"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:203
#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:210
msgid ""
"$ export ROS_HOME=~/my_ros_home\n"
"$ ros2 run logging_demo logging_demo_main"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:217
msgid ""
"$ set \"ROS_HOME=~/my_ros_home\"\n"
"$ ros2 run logging_demo logging_demo_main"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:222
msgid "You will then find the logs under ``~/my_ros_home/log/``."
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:225
msgid "Logger level configuration: programmatically"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:227
msgid ""
"After 10 iterations the level of the logger will be set to ``DEBUG``, which "
"will cause additional messages to be logged."
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:229
msgid ""
"Some of these debug messages cause additional functions/expressions to be "
"evaluated, which were previously skipped as ``DEBUG`` log calls were not "
"enabled. See `the source code <https://github.com/ros2/demos/blob/rolling/"
"logging_demo/src/logger_usage_component.cpp>`__ of the demo for further "
"explanation of the calls used, and see the rclcpp logging documentation for "
"a full list of supported logging calls."
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:233
msgid "Logger level configuration: externally"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:235
msgid ""
"ROS 2 nodes have services available to configure the logging level "
"externally at runtime. These services are disabled by default. The following "
"code shows how to enable the logger service while creating the node."
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:243
msgid ""
"// Create a node with logger service enabled\n"
"auto node = std::make_shared<rclcpp::Node>(\"NodeWithLoggerService\", "
"rclcpp::NodeOptions().enable_logger_service(true))"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:250
msgid ""
"# Create a node with logger service enabled\n"
"node = Node('NodeWithLoggerService', enable_logger_service=True)"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:255
msgid ""
"If you run one of the nodes as configured above, you will find 2 services "
"when running ``ros2 service list``:"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:257
msgid ""
"$ ros2 service list\n"
"...\n"
"/NodeWithLoggerService/get_logger_levels\n"
"/NodeWithLoggerService/set_logger_levels\n"
"..."
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:265
msgid "get_logger_levels"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:267
msgid "Use this service to get logger levels for specified logger names."
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:269
msgid ""
"Run ``ros2 service call`` to get logger levels for ``NodeWithLoggerService`` "
"and ``rcl``."
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:271
msgid ""
"$ ros2 service call /NodeWithLoggerService/get_logger_levels rcl_interfaces/"
"srv/GetLoggerLevels '{names: [\"NodeWithLoggerService\", \"rcl\"]}'\n"
"\n"
"requester: making request: rcl_interfaces.srv."
"GetLoggerLevels_Request(names=['NodeWithLoggerService', 'rcl'])\n"
"\n"
"response:\n"
"rcl_interfaces.srv.GetLoggerLevels_Response(levels=[rcl_interfaces.msg."
"LoggerLevel(name='NodeWithLoggerService', level=0), rcl_interfaces.msg."
"LoggerLevel(name='rcl', level=0)])"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:280
msgid "set_logger_levels"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:282
msgid "Use this service to set logger levels for specified logger names."
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:284
msgid ""
"Run ``ros2 service call`` to set logger levels for ``NodeWithLoggerService`` "
"and ``rcl``."
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:286
msgid ""
"$ ros2 service call /NodeWithLoggerService/set_logger_levels rcl_interfaces/"
"srv/SetLoggerLevels '{levels: [{name: \"NodeWithLoggerService\", level: 20}, "
"{name: \"rcl\", level: 10}]}'\n"
"\n"
"requester: making request: rcl_interfaces.srv."
"SetLoggerLevels_Request(levels=[rcl_interfaces.msg."
"LoggerLevel(name='NodeWithLoggerService', level=20), rcl_interfaces.msg."
"LoggerLevel(name='rcl', level=10)])\n"
"\n"
"response:\n"
"rcl_interfaces.srv.SetLoggerLevels_Response(results=[rcl_interfaces.msg."
"SetLoggerLevelsResult(successful=True, reason=''), rcl_interfaces.msg."
"SetLoggerLevelsResult(successful=True, reason='')])"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:296
msgid ""
"There is also demo code showing how to set or get the logger level via the "
"logger service."
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:298
msgid ""
"rclcpp: `demo code <https://github.com/ros2/demos/tree/rolling/"
"demo_nodes_cpp/src/logging/use_logger_service.cpp>`__"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:300
msgid "$ ros2 run demo_nodes_cpp use_logger_service"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:304
msgid ""
"rclpy: `demo code <https://github.com/ros2/demos/tree/rolling/demo_nodes_py/"
"demo_nodes_py/logging/use_logger_service.py>`__"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:306
msgid "$ ros2 run demo_nodes_py use_logger_service"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:312
msgid ""
"Currently, there is a limitation that ``get_logger_levels`` and "
"``set_logger_levels`` services are not thread-safe. This means that you need "
"to ensure that only one thread is calling the services at a time. Please see "
"the details in https://github.com/ros2/rcutils/issues/397"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:317
msgid "Using the logger config component"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:319
msgid ""
"The server that responds to the logger configuration requests has been "
"developed as a component so that it may be added to an existing composition-"
"based system. For example, if you are using `a container to run your nodes "
"<../Intermediate/Composition>`, to be able to configure your loggers you "
"only need to request that it additionally load the ``logging_demo::"
"LoggerConfig`` component into the container."
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:322
msgid ""
"As an example, if you want to debug the ``composition::Talker`` demo, you "
"can start the talker as normal with:"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:324
msgid "Shell 1:"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:326
msgid "$ ros2 run rclcpp_components component_container"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:330
#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:347
msgid "Shell 2:"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:332
msgid "$ ros2 component load /ComponentManager composition composition::Talker"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:336
msgid ""
"And then when you want to enable debug logging, load the ``LoggerConfig`` "
"component with:"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:338
msgid "Shell 2"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:340
msgid ""
"$ ros2 component load /ComponentManager logging_demo logging_demo::"
"LoggerConfig"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:344
msgid ""
"And finally, configure all unset loggers to the debug severity by addressing "
"the empty-named logger. Note that loggers that have been specifically "
"configured to use a particular severity will not be affected by this call."
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:349
msgid ""
"$ ros2 service call /config_logger logging_demo/srv/ConfigLogger "
"\"{logger_name: '', level: DEBUG}\""
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:353
msgid ""
"You should see debug output from any previously unset loggers in the process "
"start to appear, including from the ROS 2 core."
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:356
msgid "Logger level configuration: command line"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:358
msgid ""
"As of the Bouncy ROS 2 release, the severity level for loggers that have not "
"had their severity set explicitly can be configured from the command line. "
"Restart the demo including the following command line argument:"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:362
msgid "$ ros2 run logging_demo logging_demo_main --ros-args --log-level debug"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:366
msgid ""
"This configures the default severity for any unset logger to the debug "
"severity level. You should see debug output from loggers from the demo "
"itself and from the ROS 2 core."
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:369
msgid ""
"The severity level for individual loggers can be configured from the command-"
"line. Restart the demo including the following command line arguments:"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:372
msgid ""
"$ ros2 run logging_demo logging_demo_main --ros-args --log-level "
"logger_usage_demo:=debug"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:378
msgid "Console output formatting"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:380
msgid ""
"If you would like more or less verbose formatting, you can use the "
"``RCUTILS_CONSOLE_OUTPUT_FORMAT`` environment variable. For example, to "
"additionally get the timestamp and location of the log calls, stop the demo "
"and restart it with the environment variable set:"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:387
#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:394
msgid ""
"$ export RCUTILS_CONSOLE_OUTPUT_FORMAT=\"[{severity} {time}] [{name}]: "
"{message} ({function_name}() at {file_name}:{line_number})\"\n"
"$ ros2 run logging_demo logging_demo_main"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:401
msgid ""
"$ set \"RCUTILS_CONSOLE_OUTPUT_FORMAT=[{severity} {time}] [{name}]: "
"{message} ({function_name}() at {file_name}:{line_number})\"\n"
"$ ros2 run logging_demo logging_demo_main"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:406
msgid ""
"You should see the timestamp in seconds and the function name, filename and "
"line number additionally printed with each message."
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:408
msgid ""
"For more information on configuring the console logger formatting, see the :"
"ref:`logger console configuration <logging-configuration-environment-"
"variables>`"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:411
msgid "Console output colorizing"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:413
msgid ""
"By default, the output is colorized when it's targeting a terminal. If you "
"would like to force enabling or disabling it, you can use the "
"``RCUTILS_COLORIZED_OUTPUT`` environment variable. For example:"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:421
#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:428
msgid ""
"$ export RCUTILS_COLORIZED_OUTPUT=0  # 1 for forcing it\n"
"$ ros2 run logging_demo logging_demo_main"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:435
msgid ""
"$ set \"RCUTILS_COLORIZED_OUTPUT=0\" :: 1 for forcing it\n"
"$ ros2 run logging_demo logging_demo_main"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:440
msgid ""
"You should see that debug, warn, error and fatal logs aren't colorized now."
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:444
msgid ""
"In Linux and MacOS forcing colorized output means that if you redirect the "
"output to a file, the ansi escape color codes will appear on it. In windows "
"the colorization method relies on console APIs. If it is forced you will get "
"a new warning saying that colorization failed. The default behavior already "
"checks if the output is a console or not, so forcing colorization is not "
"recommended."
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:451
msgid ""
"If you start several nodes via ``ros2 launch``, no node has an active "
"terminal attached to it (unless you set ``emulate_tty=True``). This means "
"that to get colorized output for ``ros2 launch``, you need to set "
"``RCUTILS_COLORIZED_OUTPUT=1`` explicitly."
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:455
msgid "Default stream for console output"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:457
msgid ""
"In Foxy and later, the output from all debug levels goes to stderr by "
"default. It is possible to force all output to go to stdout by setting the "
"``RCUTILS_LOGGING_USE_STDOUT`` environment variable to ``1``. For example:"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:465
#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:471
msgid "$ export RCUTILS_LOGGING_USE_STDOUT=1"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:477
msgid "$ set \"RCUTILS_LOGGING_USE_STDOUT=1\""
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:483
msgid "Line buffered console output"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:486
msgid ""
"By default, all logging output is unbuffered. You can force it to be "
"buffered by setting the ``RCUTILS_LOGGING_BUFFERED_STREAM`` environment "
"variable to 1. For example:"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:494
#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:500
msgid "$ export RCUTILS_LOGGING_BUFFERED_STREAM=1"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:506
msgid "$ set \"RCUTILS_LOGGING_BUFFERED_STREAM=1\""
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:510
msgid "Then run:"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:517
msgid "Setting the log file name prefix"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:519
msgid ""
"By default, the log file name is based on the executable file name followed "
"by process ID and system timestamp on file creation. You can change the log "
"file name prefix to one of your choice using the ``--log-file-name`` command "
"line argument:"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:522
msgid "$ ros2 run demo_nodes_cpp talker --ros-args --log-file-name filename"
msgstr ""

#: ../../../source/Tutorials/Demos/Logging-and-logger-configuration.rst:526
msgid ""
"This configures the log file name prefix to ``filename``, instead of the "
"executable file name (which is ``talker`` in this case)."
msgstr ""
