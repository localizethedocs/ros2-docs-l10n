# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation jazzy\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 06:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:6
msgid "Adding a frame (C++)"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:8
msgid "**Goal:** Learn how to to add an extra frame to tf2."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:10
msgid "**Tutorial level:** Intermediate"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:12
msgid "**Time:** 15 minutes"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:16
msgid "Contents"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:19
msgid "Background"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:21
msgid ""
"In previous tutorials, we recreated the turtle demo by writing a :doc:`tf2 "
"broadcaster <./Writing-A-Tf2-Broadcaster-Cpp>` and a :doc:`tf2 listener "
"<Writing-A-Tf2-Listener-Cpp>`. This tutorial will teach you how to add extra "
"fixed and dynamic frames to the transformation tree. In fact, adding a frame "
"in tf2 is very similar to creating the tf2 broadcaster, but this example "
"will show you some additional features of tf2."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:25
msgid ""
"For many tasks related to transformations, it is easier to think inside a "
"local frame. For example, it is easiest to reason about laser scan "
"measurements in a frame at the center of the laser scanner. tf2 allows you "
"to define a local frame for each sensor, link, or joint in your system. When "
"transforming from one frame to another, tf2 will take care of all the hidden "
"intermediate frame transformations that are introduced."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:31
msgid "tf2 tree"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:33
msgid ""
"tf2 builds up a tree structure of frames and, thus, does not allow a closed "
"loop in the frame structure. This means that a frame only has one single "
"parent, but it can have multiple children. Currently, our tf2 tree contains "
"three frames: ``world``, ``turtle1`` and ``turtle2``. The two turtle frames "
"are children of the ``world`` frame. If we want to add a new frame to tf2, "
"one of the three existing frames needs to be the parent frame, and the new "
"one will become its child frame."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:42
msgid "Tasks"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:45
msgid "1 Write the fixed frame broadcaster"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:47
msgid ""
"In our turtle example, we'll add a new frame ``carrot1``, which will be the "
"child of the ``turtle1``. This frame will serve as the goal for the second "
"turtle."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:50
msgid ""
"Let's first create the source files. Go to the ``learning_tf2_cpp`` package "
"we created in the previous tutorials. Inside the ``src`` directory download "
"the fixed frame broadcaster code by entering the following command:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:56
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:205
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:223
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:245
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:321
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:458
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:476
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:498
msgid "Linux"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:58
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:64
msgid ""
"$ wget https://raw.githubusercontent.com/ros/geometry_tutorials/rolling/"
"turtle_tf2_cpp/src/fixed_frame_tf2_broadcaster.cpp"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:62
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:211
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:229
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:251
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:327
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:464
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:482
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:504
msgid "macOS"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:68
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:215
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:235
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:257
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:333
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:468
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:488
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:510
msgid "Windows"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:70
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:259
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:335
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:512
msgid "In a Windows command line prompt:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:72
msgid ""
"$ curl -sk https://raw.githubusercontent.com/ros/geometry_tutorials/rolling/"
"turtle_tf2_cpp/src/fixed_frame_tf2_broadcaster.cpp -o "
"fixed_frame_tf2_broadcaster.cpp"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:76
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:265
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:341
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:518
msgid "Or in powershell:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:78
msgid ""
"$ curl https://raw.githubusercontent.com/ros/geometry_tutorials/rolling/"
"turtle_tf2_cpp/src/fixed_frame_tf2_broadcaster.cpp -o "
"fixed_frame_tf2_broadcaster.cpp"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:82
msgid "Now open the file called ``fixed_frame_tf2_broadcaster.cpp``."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:84
msgid ""
"#include <chrono>\n"
"#include <functional>\n"
"#include <memory>\n"
"\n"
"#include \"geometry_msgs/msg/transform_stamped.hpp\"\n"
"#include \"rclcpp/rclcpp.hpp\"\n"
"#include \"tf2_ros/transform_broadcaster.h\"\n"
"\n"
"using namespace std::chrono_literals;\n"
"\n"
"class FixedFrameBroadcaster : public rclcpp::Node\n"
"{\n"
"public:\n"
"  FixedFrameBroadcaster()\n"
"  : Node(\"fixed_frame_tf2_broadcaster\")\n"
"  {\n"
"    tf_broadcaster_ = std::make_shared<tf2_ros::"
"TransformBroadcaster>(this);\n"
"\n"
"    auto broadcast_timer_callback = [this](){\n"
"        geometry_msgs::msg::TransformStamped t;\n"
"\n"
"        t.header.stamp = this->get_clock()->now();\n"
"        t.header.frame_id = \"turtle1\";\n"
"        t.child_frame_id = \"carrot1\";\n"
"        t.transform.translation.x = 0.0;\n"
"        t.transform.translation.y = 2.0;\n"
"        t.transform.translation.z = 0.0;\n"
"        t.transform.rotation.x = 0.0;\n"
"        t.transform.rotation.y = 0.0;\n"
"        t.transform.rotation.z = 0.0;\n"
"        t.transform.rotation.w = 1.0;\n"
"\n"
"        tf_broadcaster_->sendTransform(t);\n"
"    };\n"
"    timer_ = this->create_wall_timer(100ms, broadcast_timer_callback);\n"
"  }\n"
"\n"
"private:\n"
"  rclcpp::TimerBase::SharedPtr timer_;\n"
"  std::shared_ptr<tf2_ros::TransformBroadcaster> tf_broadcaster_;\n"
"};\n"
"\n"
"int main(int argc, char * argv[])\n"
"{\n"
"  rclcpp::init(argc, argv);\n"
"  rclcpp::spin(std::make_shared<FixedFrameBroadcaster>());\n"
"  rclcpp::shutdown();\n"
"  return 0;\n"
"}"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:136
msgid ""
"The code is very similar to the tf2 broadcaster tutorial example and the "
"only difference is that the transform here does not change over time."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:139
msgid "1.1 Examine the code"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:141
msgid ""
"Let's take a look at the key lines in this piece of code. Here we create a "
"new transform, from the parent ``turtle1`` to the new child ``carrot1``. The "
"``carrot1`` frame is 2 meters offset in y axis in terms of the ``turtle1`` "
"frame."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:145
msgid ""
"geometry_msgs::msg::TransformStamped t;\n"
"\n"
"t.header.stamp = this->get_clock()->now();\n"
"t.header.frame_id = \"turtle1\";\n"
"t.child_frame_id = \"carrot1\";\n"
"t.transform.translation.x = 0.0;\n"
"t.transform.translation.y = 2.0;\n"
"t.transform.translation.z = 0.0;"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:157
msgid "1.2 CMakeLists.txt"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:159
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:420
msgid ""
"Navigate one level back to the ``learning_tf2_cpp`` directory, where the "
"``CMakeLists.txt`` and ``package.xml`` files are located."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:161
msgid ""
"Now open the ``CMakeLists.txt`` add the executable and name it "
"``fixed_frame_tf2_broadcaster``."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:163
msgid ""
"add_executable(fixed_frame_tf2_broadcaster src/fixed_frame_tf2_broadcaster."
"cpp)\n"
"ament_target_dependencies(\n"
"    fixed_frame_tf2_broadcaster\n"
"    geometry_msgs\n"
"    rclcpp\n"
"    tf2_ros\n"
")"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:173
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:434
msgid ""
"Finally, add the ``install(TARGETS…)`` section so ``ros2 run`` can find your "
"executable:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:175
msgid ""
"install(TARGETS\n"
"    fixed_frame_tf2_broadcaster\n"
"    DESTINATION lib/${PROJECT_NAME})"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:182
msgid "1.3 Write the launch file"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:184
msgid ""
"Now let's create a launch file for this example. With your text editor, "
"create a new file called ``turtle_tf2_fixed_frame_demo_launch.py`` in the "
"``src/learning_tf2_cpp/launch`` directory, and add the following lines:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:187
msgid ""
"from launch import LaunchDescription\n"
"from launch.actions import IncludeLaunchDescription\n"
"from launch.substitutions import PathJoinSubstitution\n"
"from launch_ros.actions import Node\n"
"from launch_ros.substitutions import FindPackageShare\n"
"\n"
"\n"
"def generate_launch_description():\n"
"    return LaunchDescription([\n"
"        IncludeLaunchDescription(\n"
"            PathJoinSubstitution([\n"
"                FindPackageShare('learning_tf2_cpp'), 'launch', "
"'turtle_tf2_demo_launch.py'])\n"
"        ),\n"
"        Node(\n"
"            package='learning_tf2_cpp',\n"
"            executable='fixed_frame_tf2_broadcaster',\n"
"            name='fixed_broadcaster',\n"
"        ),\n"
"    ])\n"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:190
msgid ""
"This launch file imports the required packages and then creates a "
"``demo_nodes`` variable that will store nodes that we created in the "
"previous tutorial's launch file."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:192
msgid ""
"The last part of the code will add our fixed ``carrot1`` frame to the "
"turtlesim world using our ``fixed_frame_tf2_broadcaster`` node."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:194
msgid ""
"        Node(\n"
"            package='learning_tf2_cpp',\n"
"            executable='fixed_frame_tf2_broadcaster',\n"
"            name='fixed_broadcaster',\n"
"        ),\n"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:199
msgid "1.4 Build"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:201
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:454
msgid ""
"Run ``rosdep`` in the root of your workspace to check for missing "
"dependencies."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:207
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:460
msgid "$ rosdep install -i --from-path src --rosdistro rolling -y"
msgstr "$ rosdep install -i --from-path src --rosdistro rolling -y"

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:213
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:217
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:466
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:470
msgid ""
"rosdep only runs on Linux, so you will need to install ``geometry_msgs`` and "
"``turtlesim`` dependencies yourself"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:219
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:472
msgid "Still in the root of your workspace, build your package:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:225
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:231
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:478
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:484
msgid "$ colcon build --packages-select learning_tf2_cpp"
msgstr "$ colcon build --packages-select learning_tf2_cpp"

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:237
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:490
msgid "$ colcon build --merge-install --packages-select learning_tf2_cpp"
msgstr "$ colcon build --merge-install --packages-select learning_tf2_cpp"

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:241
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:494
msgid ""
"Open a new terminal, navigate to the root of your workspace, and source the "
"setup files:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:247
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:253
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:500
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:506
msgid "$ . install/setup.bash"
msgstr "$ . install/setup.bash"

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:261
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:514
msgid "$ call install\\setup.bat"
msgstr "$ call install\\setup.bat"

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:267
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:520
msgid "$ .\\install\\setup.ps1"
msgstr "$ .\\install\\setup.ps1"

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:272
msgid "1.5 Run"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:274
msgid "Now you can start the turtle broadcaster demo:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:276
msgid "$ ros2 launch learning_tf2_cpp turtle_tf2_fixed_frame_demo_launch.py"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:280
msgid ""
"You should notice that the new ``carrot1`` frame appeared in the "
"transformation tree."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:284
msgid ""
"If you drive the first turtle around, you should notice that the behavior "
"didn't change from the previous tutorial, even though we added a new frame. "
"That's because adding an extra frame does not affect the other frames and "
"our listener is still using the previously defined frames."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:287
msgid ""
"Therefore if we want our second turtle to follow the carrot instead of the "
"first turtle, we need to change value of the ``target_frame``. This can be "
"done two ways. One way is to pass the ``target_frame`` argument to the "
"launch file directly from the console:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:291
msgid ""
"$ ros2 launch learning_tf2_cpp turtle_tf2_fixed_frame_demo_launch.py "
"target_frame:=carrot1"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:295
msgid ""
"The second way is to update the launch file. To do so, open the "
"``turtle_tf2_fixed_frame_demo_launch.py`` file, and add the "
"``'target_frame': 'carrot1'`` parameter via ``launch_arguments`` argument."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:298
msgid ""
"def generate_launch_description():\n"
"    demo_nodes = IncludeLaunchDescription(\n"
"        ...,\n"
"        launch_arguments={'target_frame': 'carrot1'}.items(),\n"
"        )"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:306
msgid ""
"Now rebuild the package, restart the ``turtle_tf2_fixed_frame_demo_launch."
"py``, and you'll see the second turtle following the carrot instead of the "
"first turtle!"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:311
msgid "2 Write the dynamic frame broadcaster"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:313
msgid ""
"The extra frame we published in this tutorial is a fixed frame that doesn't "
"change over time in relation to the parent frame. However, if you want to "
"publish a moving frame you can code the broadcaster to change the frame over "
"time. Let's change our ``carrot1`` frame so that it changes relative to "
"``turtle1`` frame over time. Go to the ``learning_tf2_cpp`` package we "
"created in the previous tutorial. Inside the ``src`` directory download the "
"dynamic frame broadcaster code by entering the following command:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:323
#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:329
msgid ""
"$ wget https://raw.githubusercontent.com/ros/geometry_tutorials/rolling/"
"turtle_tf2_cpp/src/dynamic_frame_tf2_broadcaster.cpp"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:337
msgid ""
"$ curl -sk https://raw.githubusercontent.com/ros/geometry_tutorials/rolling/"
"turtle_tf2_cpp/src/dynamic_frame_tf2_broadcaster.cpp -o "
"dynamic_frame_tf2_broadcaster.cpp"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:343
msgid ""
"$ curl https://raw.githubusercontent.com/ros/geometry_tutorials/rolling/"
"turtle_tf2_cpp/src/dynamic_frame_tf2_broadcaster.cpp -o "
"dynamic_frame_tf2_broadcaster.cpp"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:347
msgid "Now open the file called ``dynamic_frame_tf2_broadcaster.cpp``:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:349
msgid ""
"#include <chrono>\n"
"#include <functional>\n"
"#include <memory>\n"
"\n"
"#include \"geometry_msgs/msg/transform_stamped.hpp\"\n"
"#include \"rclcpp/rclcpp.hpp\"\n"
"#include \"tf2_ros/transform_broadcaster.h\"\n"
"\n"
"using namespace std::chrono_literals;\n"
"\n"
"const double PI = 3.141592653589793238463;\n"
"\n"
"class DynamicFrameBroadcaster : public rclcpp::Node\n"
"{\n"
"public:\n"
"  DynamicFrameBroadcaster()\n"
"  : Node(\"dynamic_frame_tf2_broadcaster\")\n"
"  {\n"
"    tf_broadcaster_ = std::make_shared<tf2_ros::"
"TransformBroadcaster>(this);\n"
"\n"
"    auto broadcast_timer_callback = [this](){\n"
"        rclcpp::Time now = this->get_clock()->now();\n"
"        double x = now.seconds() * PI;\n"
"\n"
"        geometry_msgs::msg::TransformStamped t;\n"
"        t.header.stamp = now;\n"
"        t.header.frame_id = \"turtle1\";\n"
"        t.child_frame_id = \"carrot1\";\n"
"        t.transform.translation.x = 10 * sin(x);\n"
"        t.transform.translation.y = 10 * cos(x);\n"
"        t.transform.translation.z = 0.0;\n"
"        t.transform.rotation.x = 0.0;\n"
"        t.transform.rotation.y = 0.0;\n"
"        t.transform.rotation.z = 0.0;\n"
"        t.transform.rotation.w = 1.0;\n"
"\n"
"        tf_broadcaster_->sendTransform(t);\n"
"    };\n"
"    timer_ = this->create_wall_timer(100ms, broadcast_timer_callback);\n"
"  }\n"
"\n"
"private:\n"
"  rclcpp::TimerBase::SharedPtr timer_;\n"
"  std::shared_ptr<tf2_ros::TransformBroadcaster> tf_broadcaster_;\n"
"};\n"
"\n"
"int main(int argc, char * argv[])\n"
"{\n"
"  rclcpp::init(argc, argv);\n"
"  rclcpp::spin(std::make_shared<DynamicFrameBroadcaster>());\n"
"  rclcpp::shutdown();\n"
"  return 0;\n"
"}"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:406
msgid "2.1 Examine the code"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:408
msgid ""
"Instead of a fixed definition of our x and y offsets, we are using the "
"``sin()`` and ``cos()`` functions on the current time so that the offset of "
"``carrot1`` is constantly changing."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:410
msgid ""
"double x = now.seconds() * PI;\n"
"...\n"
"t.transform.translation.x = 10 * sin(x);\n"
"t.transform.translation.y = 10 * cos(x);"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:418
msgid "2.2 CMakeLists.txt"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:422
msgid ""
"Now open the ``CMakeLists.txt`` add the executable and name it "
"``dynamic_frame_tf2_broadcaster``."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:424
msgid ""
"add_executable(dynamic_frame_tf2_broadcaster src/"
"dynamic_frame_tf2_broadcaster.cpp)\n"
"ament_target_dependencies(\n"
"    dynamic_frame_tf2_broadcaster\n"
"    geometry_msgs\n"
"    rclcpp\n"
"    tf2_ros\n"
")"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:436
msgid ""
"install(TARGETS\n"
"    dynamic_frame_tf2_broadcaster\n"
"    DESTINATION lib/${PROJECT_NAME})"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:443
msgid "2.3 Write the launch file"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:445
msgid ""
"To test this code, create a new launch file "
"``turtle_tf2_dynamic_frame_demo_launch.py`` in the ``src/learning_tf2_cpp/"
"launch`` directory and paste the following code:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:447
msgid ""
"from launch import LaunchDescription\n"
"from launch.actions import IncludeLaunchDescription\n"
"from launch.substitutions import PathJoinSubstitution\n"
"from launch_ros.actions import Node\n"
"from launch_ros.substitutions import FindPackageShare\n"
"\n"
"\n"
"def generate_launch_description():\n"
"    return LaunchDescription([\n"
"        IncludeLaunchDescription(\n"
"            PathJoinSubstitution([\n"
"                FindPackageShare('learning_tf2_cpp'), 'launch', "
"'turtle_tf2_demo_launch.py']),\n"
"            launch_arguments={'target_frame': 'carrot1'}.items(),\n"
"        ),\n"
"        Node(\n"
"            package='learning_tf2_cpp',\n"
"            executable='dynamic_frame_tf2_broadcaster',\n"
"            name='dynamic_broadcaster',\n"
"        ),\n"
"    ])\n"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:452
msgid "2.4 Build"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:525
msgid "2.5 Run"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:527
msgid "Now you can start the dynamic frame demo:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:529
msgid "$ ros2 launch learning_tf2_cpp turtle_tf2_dynamic_frame_demo_launch.py"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:533
msgid ""
"You should see that the second turtle is following the carrot's position "
"that is constantly changing."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:539
msgid "Summary"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst:541
msgid ""
"In this tutorial, you learned about the tf2 transformation tree, its "
"structure, and its features. You also learned that it is easiest to think "
"inside a local frame, and learned to add extra fixed and dynamic frames for "
"that local frame."
msgstr ""
