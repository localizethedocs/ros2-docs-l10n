# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation jazzy\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 06:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:9
msgid "Managing large projects"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:11
msgid ""
"**Goal:** Learn best practices of managing large projects using ROS 2 launch "
"files."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:13
msgid "**Tutorial level:** Intermediate"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:15
msgid "**Time:** 20 minutes"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:19
msgid "Contents"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:22
msgid "Background"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:24
msgid ""
"This tutorial describes some tips for writing launch files for large "
"projects. The focus is on how to structure launch files so they may be "
"reused as much as possible in different situations. Additionally, it covers "
"usage examples of different ROS 2 launch tools, like parameters, YAML files, "
"remappings, namespaces, default arguments, and RViz configs."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:29
msgid "Prerequisites"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:31
msgid ""
"This tutorial uses the :doc:`turtlesim <../../Beginner-CLI-Tools/Introducing-"
"Turtlesim/Introducing-Turtlesim>` and :doc:`turtle_tf2_py <../Tf2/"
"Introduction-To-Tf2>` packages. This tutorial also assumes you have :doc:"
"`created a new package <../../Beginner-Client-Libraries/Creating-Your-First-"
"ROS2-Package>` of build type ``ament_python`` called ``launch_tutorial``."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:35
msgid "Introduction"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:37
msgid ""
"Large applications on a robot typically involve several interconnected "
"nodes, each of which can have many parameters. Simulation of multiple "
"turtles in the turtle simulator can serve as a good example. The turtle "
"simulation consists of multiple turtle nodes, the world configuration, and "
"the TF broadcaster and listener nodes. Between all of the nodes, there are a "
"large number of ROS parameters that affect the behavior and appearance of "
"these nodes. ROS 2 launch files allow us to start all nodes and set "
"corresponding parameters in one place. By the end of a tutorial, you will "
"build the ``launch_turtlesim_launch.py`` launch file in the "
"``launch_tutorial`` package. This launch file will bring up different nodes "
"responsible for the simulation of two turtlesim simulations, starting TF "
"broadcasters and listener, loading parameters, and launching an RViz "
"configuration. In this tutorial, we'll go over this launch file and all "
"related features used."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:47
msgid "Writing launch files"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:50
msgid "1 Top-level organization"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:52
msgid ""
"One of the aims in the process of writing launch files should be making them "
"as reusable as possible. This could be done by clustering related nodes and "
"configurations into separate launch files. Afterwards, a top-level launch "
"file dedicated to a specific configuration could be written. This would "
"allow moving between identical robots to be done without changing the launch "
"files at all. Even a change such as moving from a real robot to a simulated "
"one can be done with only a few changes."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:58
msgid ""
"We will now go over the top-level launch file structure that makes this "
"possible. Firstly, we will create a launch file that will call separate "
"launch files. To do this, let's create a ``launch_turtlesim_launch.py`` file "
"in the ``/launch`` folder of our ``launch_tutorial`` package."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:62
msgid ""
"from launch import LaunchDescription\n"
"from launch.actions import IncludeLaunchDescription\n"
"from launch.substitutions import PathJoinSubstitution\n"
"from launch_ros.substitutions import FindPackageShare\n"
"\n"
"\n"
"def generate_launch_description():\n"
"    launch_dir = PathJoinSubstitution([FindPackageShare('launch_tutorial'), "
"'launch'])\n"
"    return LaunchDescription([\n"
"        IncludeLaunchDescription(\n"
"            PathJoinSubstitution([launch_dir, 'turtlesim_world_1_launch."
"py'])\n"
"        ),\n"
"        IncludeLaunchDescription(\n"
"            PathJoinSubstitution([launch_dir, 'turtlesim_world_2_launch."
"py'])\n"
"        ),\n"
"        IncludeLaunchDescription(\n"
"            PathJoinSubstitution([launch_dir, 'broadcaster_listener_launch."
"py']),\n"
"            launch_arguments={'target_frame': 'carrot1'}.items()\n"
"        ),\n"
"        IncludeLaunchDescription(\n"
"            PathJoinSubstitution([launch_dir, 'mimic_launch.py'])\n"
"        ),\n"
"        IncludeLaunchDescription(\n"
"            PathJoinSubstitution([launch_dir, 'fixed_broadcaster_launch."
"py'])\n"
"        ),\n"
"        IncludeLaunchDescription(\n"
"            PathJoinSubstitution([launch_dir, 'turtlesim_rviz_launch.py'])\n"
"        ),\n"
"    ])\n"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:65
msgid ""
"This launch file includes a set of other launch files. Each of these "
"included launch files contains nodes, parameters, and possibly, nested "
"includes, which pertain to one part of the system. To be exact, we launch "
"two turtlesim simulation worlds, TF broadcaster, TF listener, mimic, fixed "
"frame broadcaster, and RViz nodes."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:69
msgid ""
"Design Tip: Top-level launch files should be short, consist of includes to "
"other files corresponding to subcomponents of the application, and commonly "
"changed parameters."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:71
msgid ""
"Writing launch files in the following manner makes it easy to swap out one "
"piece of the system, as we'll see later. However, there are cases when some "
"nodes or launch files have to be launched separately due to performance and "
"usage reasons."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:74
msgid ""
"Design tip: Be aware of the tradeoffs when deciding how many top-level "
"launch files your application requires."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:77
msgid "2 Parameters"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:80
msgid "2.1 Setting parameters in the launch file"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:82
msgid ""
"We will begin by writing a launch file that will start our first turtlesim "
"simulation. First, create a new file called ``turtlesim_world_1_launch.py``."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:85
msgid ""
"from launch import LaunchDescription\n"
"from launch.actions import DeclareLaunchArgument\n"
"from launch.substitutions import LaunchConfiguration\n"
"from launch_ros.actions import Node\n"
"\n"
"\n"
"def generate_launch_description():\n"
"    return LaunchDescription([\n"
"        DeclareLaunchArgument('background_r', default_value='0'),\n"
"        DeclareLaunchArgument('background_g', default_value='84'),\n"
"        DeclareLaunchArgument('background_b', default_value='122'),\n"
"        Node(\n"
"            package='turtlesim',\n"
"            executable='turtlesim_node',\n"
"            name='sim',\n"
"            parameters=[{\n"
"                'background_r': LaunchConfiguration('background_r'),\n"
"                'background_g': LaunchConfiguration('background_g'),\n"
"                'background_b': LaunchConfiguration('background_b'),\n"
"            }]\n"
"        ),\n"
"    ])\n"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:88
msgid ""
"This launch file starts the ``turtlesim_node`` node, which starts the "
"turtlesim simulation, with simulation configuration parameters that are "
"defined and passed to the nodes."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:91
msgid "2.2 Loading parameters from YAML file"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:93
msgid ""
"In the second launch, we will start a second turtlesim simulation with a "
"different configuration. Now create a ``turtlesim_world_2_launch.py`` file."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:96
msgid ""
"from launch import LaunchDescription\n"
"from launch.substitutions import PathJoinSubstitution\n"
"from launch_ros.actions import Node\n"
"from launch_ros.substitutions import FindPackageShare\n"
"\n"
"\n"
"def generate_launch_description():\n"
"    return LaunchDescription([\n"
"        Node(\n"
"            package='turtlesim',\n"
"            executable='turtlesim_node',\n"
"            namespace='turtlesim2',\n"
"            name='sim',\n"
"            parameters=[PathJoinSubstitution([\n"
"                FindPackageShare('launch_tutorial'), 'config', 'turtlesim."
"yaml'])\n"
"            ],\n"
"        ),\n"
"    ])\n"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:99
msgid ""
"This launch file will launch the same ``turtlesim_node`` with parameter "
"values that are loaded directly from the YAML configuration file. Defining "
"arguments and parameters in YAML files make it easy to store and load a "
"large number of variables. In addition, YAML files can be easily exported "
"from the current ``ros2 param`` list. To learn how to do that, refer to the :"
"doc:`Understand parameters <../../Beginner-CLI-Tools/Understanding-ROS2-"
"Parameters/Understanding-ROS2-Parameters>` tutorial."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:104
msgid ""
"Let's now create a configuration file, ``turtlesim.yaml``, in the ``/"
"config`` folder of our package, which will be loaded by our launch file."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:106
msgid ""
"/turtlesim2/sim:\n"
"   ros__parameters:\n"
"      background_b: 255\n"
"      background_g: 86\n"
"      background_r: 150"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:114
msgid ""
"To learn more about using parameters and using YAML files, take a look at "
"the :doc:`Understand parameters <../../Beginner-CLI-Tools/Understanding-ROS2-"
"Parameters/Understanding-ROS2-Parameters>` tutorial."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:117
msgid "2.3 Using wildcards in YAML files"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:119
msgid ""
"There are cases when we want to set the same parameters in more than one "
"node. These nodes could have different namespaces or names but still have "
"the same parameters. Defining separate YAML files that explicitly define "
"namespaces and node names is not efficient. A solution is to use wildcard "
"characters, which act as substitutions for unknown characters in a text "
"value, to apply parameters to several different nodes."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:124
msgid ""
"Now let's create a new ``turtlesim_world_3_launch.py`` file similar to "
"``turtlesim_world_2_launch.py`` to include one more ``turtlesim_node`` node "
"in a new namespace ``turtlesim3``:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:126
msgid ""
"from launch import LaunchDescription\n"
"from launch.substitutions import PathJoinSubstitution\n"
"from launch_ros.actions import Node\n"
"from launch_ros.substitutions import FindPackageShare\n"
"\n"
"\n"
"def generate_launch_description():\n"
"    return LaunchDescription([\n"
"        Node(\n"
"            package='turtlesim',\n"
"            executable='turtlesim_node',\n"
"            namespace='turtlesim3',\n"
"            name='sim',\n"
"            parameters=[\n"
"                PathJoinSubstitution([\n"
"                    FindPackageShare('launch_tutorial'), 'config', "
"'turtlesim.yaml']),\n"
"            ],\n"
"        ),\n"
"    ])\n"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:130
msgid ""
"Loading the same YAML file, however, will not affect the appearance of the "
"third turtlesim world. The reason is that its parameters are stored under "
"another namespace as shown below:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:133
msgid ""
"/turtlesim3/sim:\n"
"   background_b\n"
"   background_g\n"
"   background_r"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:140
msgid ""
"Therefore, instead of creating a new configuration for the same node that "
"use the same parameters, we can use wildcards syntax. ``/**`` will assign "
"all the parameters in every node, despite differences in node names and "
"namespaces."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:143
msgid ""
"We will now update the ``turtlesim.yaml``, in the ``/config`` folder in the "
"following manner:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:145
msgid ""
"/**:\n"
"   ros__parameters:\n"
"      background_b: 255\n"
"      background_g: 86\n"
"      background_r: 150"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:153
msgid ""
"Now include the ``turtlesim_world_3_launch.py`` launch description in our "
"main launch file. Using that configuration file in our launch descriptions "
"will assign ``background_b``, ``background_g``, and ``background_r`` "
"parameters to specified values in ``turtlesim3/sim`` and ``turtlesim2/sim`` "
"nodes."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:157
msgid "3 Namespaces"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:159
msgid ""
"As you may have noticed, we have defined the namespace for the turlesim "
"world in the ``turtlesim_world_2_launch.py`` file. Unique namespaces allow "
"the system to start two similar nodes without node name or topic name "
"conflicts."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:162
msgid "namespace='turtlesim2',"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:166
msgid ""
"However, if the launch file contains a large number of nodes, defining "
"namespaces for each of them can become tedious. To solve that issue, the "
"``PushROSNamespace`` action can be used to define the global namespace for "
"each launch file description. Every nested node will inherit that namespace "
"automatically."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:170
msgid ""
"``PushROSNamespace`` has to be the first action in the list for the "
"following actions to apply the namespace."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:172
msgid ""
"To do that, firstly, we need to remove the ``namespace='turtlesim2'`` line "
"from the ``turtlesim_world_2_launch.py`` file. Afterwards, we need to update "
"the ``launch_turtlesim_launch.py`` to change the "
"``IncludeLaunchDescription(... 'turtlesim_world_2_launch.py' ...)`` value to "
"the following:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:175
msgid ""
"from launch.actions import GroupAction\n"
"from launch_ros.actions import PushROSNamespace\n"
"\n"
"   ...\n"
"   GroupAction(\n"
"     actions=[\n"
"         PushROSNamespace('turtlesim2'),\n"
"         IncludeLaunchDescription(PathJoinSubstitution([launch_dir, "
"'turtlesim_world_2_launch.py'])),\n"
"      ]\n"
"   ),"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:188
msgid ""
"As a result, each node in the ``turtlesim_world_2_launch.py`` launch "
"description will have a ``turtlesim2`` namespace."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:191
msgid "4 Reusing nodes"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:193
msgid "Now create a ``broadcaster_listener_launch.py`` file."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:195
msgid ""
"from launch import LaunchDescription\n"
"from launch.actions import DeclareLaunchArgument\n"
"from launch.substitutions import LaunchConfiguration\n"
"\n"
"from launch_ros.actions import Node\n"
"\n"
"\n"
"def generate_launch_description():\n"
"    return LaunchDescription([\n"
"        DeclareLaunchArgument(\n"
"            'target_frame', default_value='turtle1',\n"
"            description='Target frame name.',\n"
"        ),\n"
"        Node(\n"
"            package='turtle_tf2_py',\n"
"            executable='turtle_tf2_broadcaster',\n"
"            name='broadcaster1',\n"
"            parameters=[\n"
"                {'turtlename': 'turtle1'}\n"
"            ],\n"
"        ),\n"
"        Node(\n"
"            package='turtle_tf2_py',\n"
"            executable='turtle_tf2_broadcaster',\n"
"            name='broadcaster2',\n"
"            parameters=[\n"
"                {'turtlename': 'turtle2'}\n"
"            ],\n"
"        ),\n"
"        Node(\n"
"            package='turtle_tf2_py',\n"
"            executable='turtle_tf2_listener',\n"
"            name='listener',\n"
"            parameters=[\n"
"                {'target_frame': LaunchConfiguration('target_frame')}\n"
"            ],\n"
"        ),\n"
"    ])\n"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:198
msgid ""
"In this file, we have declared the ``target_frame`` launch argument with a "
"default value of ``turtle1``. The default value means that the launch file "
"can receive an argument to forward to its nodes, or in case the argument is "
"not provided, it will pass the default value to its nodes."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:201
msgid ""
"Afterwards, we use the ``turtle_tf2_broadcaster`` node two times using "
"different names and parameters during launch. This allows us to duplicate "
"the same node without conflicts."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:204
msgid ""
"We also start a ``turtle_tf2_listener`` node and set its ``target_frame`` "
"parameter that we declared and acquired above."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:207
msgid "5 Parameter overrides"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:209
msgid ""
"Recall that we called the ``broadcaster_listener_launch.py`` file in our top-"
"level launch file. In addition to that, we have passed it ``target_frame`` "
"launch argument as shown below:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:212
msgid ""
"        IncludeLaunchDescription(\n"
"            PathJoinSubstitution([launch_dir, 'broadcaster_listener_launch."
"py']),\n"
"            launch_arguments={'target_frame': 'carrot1'}.items()\n"
"        ),\n"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:216
msgid ""
"This syntax allows us to change the default goal target frame to "
"``carrot1``. If you would like ``turtle2`` to follow ``turtle1`` instead of "
"the ``carrot1``, just remove the line that defines ``launch_arguments``. "
"This will assign ``target_frame`` its default value, which is ``turtle1``."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:221
msgid "6 Remapping"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:223
msgid "Now create a ``mimic_launch.py`` file."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:225
msgid ""
"from launch import LaunchDescription\n"
"from launch_ros.actions import Node\n"
"\n"
"\n"
"def generate_launch_description():\n"
"    return LaunchDescription([\n"
"        Node(\n"
"            package='turtlesim',\n"
"            executable='mimic',\n"
"            name='mimic',\n"
"            remappings=[\n"
"                ('/input/pose', '/turtle2/pose'),\n"
"                ('/output/cmd_vel', '/turtlesim2/turtle1/cmd_vel'),\n"
"            ]\n"
"        )\n"
"    ])\n"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:228
msgid ""
"This launch file will start the ``mimic`` node, which will give commands to "
"one turtlesim to follow the other. The node is designed to receive the "
"target pose on the topic ``/input/pose``. In our case, we want to remap the "
"target pose from ``/turtle2/pose`` topic. Finally, we remap the ``/output/"
"cmd_vel`` topic to ``/turtlesim2/turtle1/cmd_vel``. This way ``turtle1`` in "
"our ``turtlesim2`` simulation world will follow ``turtle2`` in our initial "
"turtlesim world."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:235
msgid "7 Config files"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:237
msgid "Let's now create a file called ``turtlesim_rviz_launch.py``."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:239
msgid ""
"from launch import LaunchDescription\n"
"from launch.substitutions import PathJoinSubstitution\n"
"from launch_ros.actions import Node\n"
"from launch_ros.substitutions import FindPackageShare\n"
"\n"
"\n"
"def generate_launch_description():\n"
"    return LaunchDescription([\n"
"        Node(\n"
"            package='rviz2',\n"
"            executable='rviz2',\n"
"            name='rviz2',\n"
"            arguments=['-d', PathJoinSubstitution([\n"
"                FindPackageShare('turtle_tf2_py'), 'rviz', 'turtle_rviz."
"rviz'])],\n"
"        ),\n"
"    ])\n"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:242
msgid ""
"This launch file will start the RViz with the configuration file defined in "
"the ``turtle_tf2_py`` package. This RViz configuration will set the world "
"frame, enable TF visualization, and start RViz with a top-down view."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:246
msgid "8 Environment Variables"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:248
msgid ""
"Let's now create the last launch file called ``fixed_broadcaster_launch.py`` "
"in our package."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:250
msgid ""
"from launch import LaunchDescription\n"
"from launch.actions import DeclareLaunchArgument\n"
"from launch.substitutions import EnvironmentVariable, LaunchConfiguration\n"
"from launch_ros.actions import Node\n"
"\n"
"\n"
"def generate_launch_description():\n"
"    return LaunchDescription([\n"
"        DeclareLaunchArgument(\n"
"            'node_prefix',\n"
"            default_value=[EnvironmentVariable('USER'), '_'],\n"
"            description='prefix for node name'\n"
"        ),\n"
"        Node(\n"
"            package='turtle_tf2_py',\n"
"            executable='fixed_frame_tf2_broadcaster',\n"
"            name=[LaunchConfiguration('node_prefix'), 'fixed_broadcaster'],\n"
"        ),\n"
"    ])\n"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:253
msgid ""
"This launch file shows the way environment variables can be called inside "
"the launch files. Environment variables can be used to define or push "
"namespaces for distinguishing nodes on different computers or robots."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:256
msgid ""
"If you are running the launch file where the ``USER`` environment variable "
"is not defined (like in the ROS docker file), then you can replace the "
"``EnvironmentVariable('USER')`` above with any other word of your liking."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:259
msgid "Running launch files"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:262
msgid "1 Update setup.py"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:264
msgid ""
"Open ``setup.py`` and add the following lines so that the launch files from "
"the ``launch/`` folder and configuration file from the ``config/`` would be "
"installed. The ``data_files`` field should now look like this:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:267
msgid ""
"import os\n"
"from glob import glob\n"
"from setuptools import setup\n"
"...\n"
"\n"
"data_files=[\n"
"      ...\n"
"      (os.path.join('share', package_name, 'launch'),\n"
"         glob('launch/*')),\n"
"      (os.path.join('share', package_name, 'config'),\n"
"         glob('config/*.yaml')),\n"
"      (os.path.join('share', package_name, 'rviz'),\n"
"         glob('config/*.rviz')),\n"
"   ],"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:285
msgid "2 Build and run"
msgstr "2 建置並執行"

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:287
msgid ""
"To finally see the result of our code, build the package and launch the top-"
"level launch file using the following command:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:289
msgid "$ ros2 launch launch_tutorial launch_turtlesim_launch.py"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:293
msgid ""
"You will now see the two turtlesim simulations started. There are two "
"turtles in the first one and one in the second one. In the first simulation, "
"``turtle2`` is spawned in the bottom-left part of the world. Its aim is to "
"reach the ``carrot1`` frame which is five meters away on the x-axis relative "
"to the ``turtle1`` frame."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:298
msgid ""
"The ``turtlesim2/turtle1`` in the second is designed to mimic the behavior "
"of the ``turtle2``."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:300
msgid "If you want to control the ``turtle1``, run the teleop node."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:302
msgid "$ ros2 run turtlesim turtle_teleop_key"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:306
msgid "As a result, you will see a similar picture:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:310
msgid ""
"In addition to that, the RViz should have started. It will show all turtle "
"frames relative to the ``world`` frame, whose origin is at the bottom-left "
"corner."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:316
msgid "Summary"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst:318
msgid ""
"In this tutorial, you learned about various tips and practices of managing "
"large projects using ROS 2 launch files."
msgstr ""
