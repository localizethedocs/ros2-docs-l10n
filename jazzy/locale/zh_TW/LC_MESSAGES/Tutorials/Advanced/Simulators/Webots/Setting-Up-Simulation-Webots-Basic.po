# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation jazzy\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-01 08:38+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:7
msgid "Setting up a robot simulation (Basic)"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:9
msgid "**Goal:** Setup a robot simulation and control it from ROS 2."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:11
msgid "**Tutorial level:** Advanced"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:13
msgid "**Time:** 30 minutes"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:17
msgid "Contents"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:20
msgid "Background"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:22
msgid ""
"In this tutorial, you are going to use the Webots robot simulator to set-up "
"and run a very simple ROS 2 simulation scenario."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:24
msgid ""
"The ``webots_ros2`` package provides an interface between ROS 2 and Webots. "
"It includes several sub-packages, but in this tutorial, you are going to use "
"only the ``webots_ros2_driver`` sub-package to implement a Python or C++ "
"plugin controlling a simulated robot. Some other sub-packages contain demos "
"with different robots such as the TurtleBot3. They are documented in the "
"`Webots ROS 2 examples <https://github.com/cyberbotics/webots_ros2/wiki/"
"Examples>`_ page."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:30
msgid "Prerequisites"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:32
msgid ""
"It is recommended to understand basic ROS principles covered in the "
"beginner :doc:`../../../../Tutorials`. In particular, :doc:`../../../"
"Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim`, :doc:"
"`../../../Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-"
"Topics`, :doc:`../../../Beginner-Client-Libraries/Creating-A-Workspace/"
"Creating-A-Workspace`, :doc:`../../../Beginner-Client-Libraries/Creating-"
"Your-First-ROS2-Package` and :doc:`../../../Intermediate/Launch/Creating-"
"Launch-Files` are useful prerequisites."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:37
#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:357
#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:442
msgid "Linux"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:39
msgid ""
"The Linux and ROS commands of this tutorial can be run in a standard Linux "
"terminal. The following page :doc:`./Installation-Ubuntu` explains how to "
"install the ``webots_ros2`` package on Linux."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:42
#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:361
#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:455
msgid "Windows"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:44
msgid ""
"The Linux and ROS commands of this tutorial must be run in a WSL (Windows "
"Subsystem for Linux) environment. The following page :doc:`./Installation-"
"Windows` explains how to install the ``webots_ros2`` package on Windows."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:47
#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:365
#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:471
msgid "macOS"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:49
msgid ""
"The Linux and ROS commands of this tutorial must be run in a pre-configured "
"Linux Virtual Machine (VM). The following page :doc:`./Installation-MacOS` "
"explains how to install the ``webots_ros2`` package on macOS."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:52
msgid ""
"This tutorial is compatible with version 2023.1.0 of ``webots_ros2`` and "
"Webots R2023b, as well as upcoming versions."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:55
msgid "Tasks"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:58
msgid "1 Create the package structure"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:60
msgid ""
"Let's organize the code in a custom ROS 2 package. Create a new package "
"named ``my_package`` from the ``src`` folder of your ROS 2 workspace. Change "
"the current directory of your terminal to ``ros2_ws/src`` and run:"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:66
#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:179
#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:289
#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:316
#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:404
msgid "Python"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:68
msgid ""
"$ ros2 pkg create --build-type ament_python --license Apache-2.0 --node-name "
"my_robot_driver my_package --dependencies rclpy geometry_msgs "
"webots_ros2_driver"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:72
msgid ""
"The ``--node-name my_robot_driver`` option will create a ``my_robot_driver."
"py`` template Python plugin in the ``my_package`` subfolder that you will "
"modify later. The ``--dependencies rclpy geometry_msgs webots_ros2_driver`` "
"option specifies the packages needed by the ``my_robot_driver.py`` plugin in "
"the ``package.xml`` file."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:75
msgid ""
"Let's add a ``launch`` and a ``worlds`` folder inside the ``my_package`` "
"folder."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:77
msgid ""
"$ cd my_package\n"
"$ mkdir launch\n"
"$ mkdir worlds"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:83
#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:130
msgid "You should end up with the following folder structure:"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:85
msgid ""
"src/\n"
"└── my_package/\n"
"    ├── launch/\n"
"    ├── my_package/\n"
"    │   ├── __init__.py\n"
"    │   └── my_robot_driver.py\n"
"    ├── resource/\n"
"    │   └── my_package\n"
"    ├── test/\n"
"    │   ├── test_copyright.py\n"
"    │   ├── test_flake8.py\n"
"    │   └── test_pep257.py\n"
"    ├── worlds/\n"
"    ├── package.xml\n"
"    ├── setup.cfg\n"
"    └── setup.py"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:104
#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:221
#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:297
#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:324
#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:414
msgid "C++"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:106
msgid ""
"$ ros2 pkg create --build-type ament_cmake --license Apache-2.0 --node-name "
"MyRobotDriver my_package --dependencies rclcpp geometry_msgs "
"webots_ros2_driver pluginlib"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:110
msgid ""
"The ``--node-name MyRobotDriver`` option will create a ``MyRobotDriver.cpp`` "
"template C++ plugin in the ``my_package/src`` subfolder that you will modify "
"later. The ``--dependencies rclcpp geometry_msgs webots_ros2_driver "
"pluginlib`` option specifies the packages needed by the ``MyRobotDriver`` "
"plugin in the ``package.xml`` file."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:114
msgid ""
"Let's add a ``launch``, a ``worlds`` and a ``resource`` folder inside the "
"``my_package`` folder."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:116
msgid ""
"$ cd my_package\n"
"$ mkdir launch\n"
"$ mkdir worlds\n"
"$ mkdir resource"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:123
msgid ""
"Two additional files must be created: the header file for ``MyRobotDriver`` "
"and the ``my_robot_driver.xml`` pluginlib description file."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:125
msgid ""
"$ touch my_robot_driver.xml\n"
"$ touch include/my_package/MyRobotDriver.hpp"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:132
msgid ""
"src/\n"
"└── my_package/\n"
"    ├── include/\n"
"    │   └── my_package/\n"
"    │       └── MyRobotDriver.hpp\n"
"    ├── launch/\n"
"    ├── resource/\n"
"    ├── src/\n"
"    │   └── MyRobotDriver.cpp\n"
"    ├── worlds/\n"
"    ├── CMakeList.txt\n"
"    ├── my_robot_driver.xml\n"
"    └── package.xml"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:149
msgid "2 Setup the simulation world"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:151
msgid ""
"You will need a world file containing a robot to launch your simulation. :"
"download:`Download this world file <Code/my_world.wbt>` and move it inside "
"``my_package/worlds/``."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:154
msgid ""
"This is actually a fairly simple text file you can visualize in a text "
"editor. A simple robot is already included in this ``my_world.wbt`` world "
"file."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:159
msgid ""
"In case you want to learn how to create your own robot model in Webots, you "
"can check this `tutorial <https://cyberbotics.com/doc/guide/tutorial-6-4-"
"wheels-robot>`_."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:162
msgid "3 Edit the ``my_robot_driver`` plugin"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:164
msgid ""
"The ``webots_ros2_driver`` sub-package automatically creates a ROS 2 "
"interface for most sensors. More details on existing device interfaces and "
"how to configure them is given in the second part of the tutorial: :doc:`./"
"Setting-Up-Simulation-Webots-Advanced`. In this task, you will extend this "
"interface by creating your own custom plugin. This custom plugin is a ROS "
"node equivalent to a robot controller. You can use it to access the `Webots "
"robot API  <https://cyberbotics.com/doc/reference/robot?tab-"
"language=python>`_ and create your own topics and services to control your "
"robot."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:172
msgid ""
"The purpose of this tutorial is to show a basic example with a minimum "
"number of dependencies. However, you could avoid the use of this plugin by "
"using another ``webots_ros2`` sub-package named ``webots_ros2_control``, "
"introducing a new dependency. This other sub-package creates an interface "
"with the ``ros2_control`` package that facilitates the control of a "
"differential wheeled robot."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:181
msgid ""
"Open ``my_package/my_package/my_robot_driver.py`` in your favorite editor "
"and replace its contents with the following:"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:183
msgid ""
"import rclpy\n"
"from geometry_msgs.msg import Twist\n"
"\n"
"HALF_DISTANCE_BETWEEN_WHEELS = 0.045\n"
"WHEEL_RADIUS = 0.025\n"
"\n"
"class MyRobotDriver:\n"
"    def init(self, webots_node, properties):\n"
"        self.__robot = webots_node.robot\n"
"\n"
"        self.__left_motor = self.__robot.getDevice('left wheel motor')\n"
"        self.__right_motor = self.__robot.getDevice('right wheel motor')\n"
"\n"
"        self.__left_motor.setPosition(float('inf'))\n"
"        self.__left_motor.setVelocity(0)\n"
"\n"
"        self.__right_motor.setPosition(float('inf'))\n"
"        self.__right_motor.setVelocity(0)\n"
"\n"
"        self.__target_twist = Twist()\n"
"\n"
"        rclpy.init(args=None)\n"
"        self.__node = rclpy.create_node('my_robot_driver')\n"
"        self.__node.create_subscription(Twist, 'cmd_vel', self."
"__cmd_vel_callback, 1)\n"
"\n"
"    def __cmd_vel_callback(self, twist):\n"
"        self.__target_twist = twist\n"
"\n"
"    def step(self):\n"
"        rclpy.spin_once(self.__node, timeout_sec=0)\n"
"\n"
"        forward_speed = self.__target_twist.linear.x\n"
"        angular_speed = self.__target_twist.angular.z\n"
"\n"
"        command_motor_left = (forward_speed - angular_speed * "
"HALF_DISTANCE_BETWEEN_WHEELS) / WHEEL_RADIUS\n"
"        command_motor_right = (forward_speed + angular_speed * "
"HALF_DISTANCE_BETWEEN_WHEELS) / WHEEL_RADIUS\n"
"\n"
"        self.__left_motor.setVelocity(command_motor_left)\n"
"        self.__right_motor.setVelocity(command_motor_right)\n"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:186
msgid "As you can see, the ``MyRobotDriver`` class implements three methods."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:188
msgid ""
"The first method, named ``init(self, ...)``, is actually the ROS node "
"counterpart of the Python ``__init__(self, ...)`` constructor. The ``init`` "
"method always takes two arguments:"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:191
msgid ""
"The ``webots_node`` argument contains a reference on the Webots instance."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:192
msgid ""
"The ``properties`` argument is a dictionary created from the XML tags given "
"in the URDF files (:ref:`4 Create the my_robot.urdf file`) and allows you to "
"pass parameters to the controller."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:194
msgid ""
"The robot instance from the simulation ``self.__robot`` can be used to "
"access the `Webots robot API <https://cyberbotics.com/doc/reference/robot?"
"tab-language=python>`_. Then, it gets the two motor instances and "
"initializes them with a target position and a target velocity. Finally a ROS "
"node is created and a callback method is registered for a ROS topic named ``/"
"cmd_vel`` that will handle ``Twist`` messages."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:198
msgid ""
"def init(self, webots_node, properties):\n"
"    self.__robot = webots_node.robot\n"
"\n"
"    self.__left_motor = self.__robot.getDevice('left wheel motor')\n"
"    self.__right_motor = self.__robot.getDevice('right wheel motor')\n"
"\n"
"    self.__left_motor.setPosition(float('inf'))\n"
"    self.__left_motor.setVelocity(0)\n"
"\n"
"    self.__right_motor.setPosition(float('inf'))\n"
"    self.__right_motor.setVelocity(0)\n"
"\n"
"    self.__target_twist = Twist()\n"
"\n"
"    rclpy.init(args=None)\n"
"    self.__node = rclpy.create_node('my_robot_driver')\n"
"    self.__node.create_subscription(Twist, 'cmd_vel', self."
"__cmd_vel_callback, 1)\n"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:203
msgid ""
"Then comes the implementation of the ``__cmd_vel_callback(self, twist)`` "
"callback private method that will be called for each ``Twist`` message "
"received on the ``/cmd_vel`` topic and will save it in the ``self."
"__target_twist`` member variable."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:205
msgid ""
"def __cmd_vel_callback(self, twist):\n"
"    self.__target_twist = twist\n"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:210
msgid ""
"Finally, the ``step(self)`` method is called at every time step of the "
"simulation. The call to ``rclpy.spin_once()`` is needed to keep the ROS node "
"running smoothly. At each time step, the method will retrieve the desired "
"``forward_speed`` and ``angular_speed`` from ``self.__target_twist``. As the "
"motors are controlled with angular velocities, the method will then convert "
"the ``forward_speed`` and ``angular_speed`` into individual commands for "
"each wheel. This conversion depends on the structure of the robot, more "
"specifically on the radius of the wheel and the distance between them."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:216
msgid ""
"def step(self):\n"
"    rclpy.spin_once(self.__node, timeout_sec=0)\n"
"\n"
"    forward_speed = self.__target_twist.linear.x\n"
"    angular_speed = self.__target_twist.angular.z\n"
"\n"
"    command_motor_left = (forward_speed - angular_speed * "
"HALF_DISTANCE_BETWEEN_WHEELS) / WHEEL_RADIUS\n"
"    command_motor_right = (forward_speed + angular_speed * "
"HALF_DISTANCE_BETWEEN_WHEELS) / WHEEL_RADIUS\n"
"\n"
"    self.__left_motor.setVelocity(command_motor_left)\n"
"    self.__right_motor.setVelocity(command_motor_right)\n"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:223
msgid ""
"Open ``my_package/include/my_package/MyRobotDriver.hpp`` in your favorite "
"editor and replace its contents with the following:"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:225
msgid ""
"#ifndef WEBOTS_ROS2_PLUGIN_EXAMPLE_HPP\n"
"#define WEBOTS_ROS2_PLUGIN_EXAMPLE_HPP\n"
"\n"
"#include \"rclcpp/macros.hpp\"\n"
"#include \"webots_ros2_driver/PluginInterface.hpp\"\n"
"#include \"webots_ros2_driver/WebotsNode.hpp\"\n"
"\n"
"#include \"geometry_msgs/msg/twist.hpp\"\n"
"#include \"rclcpp/rclcpp.hpp\"\n"
"\n"
"namespace my_robot_driver {\n"
"class MyRobotDriver : public webots_ros2_driver::PluginInterface {\n"
"public:\n"
"  void step() override;\n"
"  void init(webots_ros2_driver::WebotsNode *node,\n"
"            std::unordered_map<std::string, std::string> &parameters) "
"override;\n"
"\n"
"private:\n"
"\n"
"  rclcpp::Subscription<geometry_msgs::msg::Twist>::SharedPtr\n"
"      cmd_vel_subscription_;\n"
"  geometry_msgs::msg::Twist cmd_vel_msg;\n"
"\n"
"  WbDeviceTag right_motor;\n"
"  WbDeviceTag left_motor;\n"
"};\n"
"} // namespace my_robot_driver\n"
"#endif\n"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:228
msgid ""
"The class ``MyRobotDriver`` is defined, which inherits from the "
"``webots_ros2_driver::PluginInterface`` class. The plugin has to override "
"``step(...)`` and ``init(...)`` functions. More details are given in the "
"``MyRobotDriver.cpp`` file. Several helper methods, callbacks and member "
"variables that will be used internally by the plugin are declared privately."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:233
msgid ""
"Then, open ``my_package/src/MyRobotDriver.cpp`` in your favorite editor and "
"replace its contents with the following:"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:235
msgid ""
"#include \"my_package/MyRobotDriver.hpp\"\n"
"\n"
"#include \"rclcpp/rclcpp.hpp\"\n"
"#include <cstdio>\n"
"#include <functional>\n"
"#include <webots/motor.h>\n"
"#include <webots/robot.h>\n"
"\n"
"#define HALF_DISTANCE_BETWEEN_WHEELS 0.045\n"
"#define WHEEL_RADIUS 0.025\n"
"\n"
"namespace my_robot_driver {\n"
"void MyRobotDriver::init(\n"
"    webots_ros2_driver::WebotsNode *node,\n"
"    std::unordered_map<std::string, std::string> &parameters) {\n"
"\n"
"  right_motor = wb_robot_get_device(\"right wheel motor\");\n"
"  left_motor = wb_robot_get_device(\"left wheel motor\");\n"
"\n"
"  wb_motor_set_position(left_motor, INFINITY);\n"
"  wb_motor_set_velocity(left_motor, 0.0);\n"
"\n"
"  wb_motor_set_position(right_motor, INFINITY);\n"
"  wb_motor_set_velocity(right_motor, 0.0);\n"
"\n"
"  cmd_vel_subscription_ = node->create_subscription<geometry_msgs::msg::"
"Twist>(\n"
"      \"/cmd_vel\", rclcpp::SensorDataQoS().reliable(),\n"
"      [this](const geometry_msgs::msg::Twist::SharedPtr msg){\n"
"        this->cmd_vel_msg.linear = msg->linear;\n"
"        this->cmd_vel_msg.angular = msg->angular;\n"
"      }\n"
"  );\n"
"}\n"
"\n"
"void MyRobotDriver::step() {\n"
"  auto forward_speed = cmd_vel_msg.linear.x;\n"
"  auto angular_speed = cmd_vel_msg.angular.z;\n"
"\n"
"  auto command_motor_left =\n"
"      (forward_speed - angular_speed * HALF_DISTANCE_BETWEEN_WHEELS) /\n"
"      WHEEL_RADIUS;\n"
"  auto command_motor_right =\n"
"      (forward_speed + angular_speed * HALF_DISTANCE_BETWEEN_WHEELS) /\n"
"      WHEEL_RADIUS;\n"
"\n"
"  wb_motor_set_velocity(left_motor, command_motor_left);\n"
"  wb_motor_set_velocity(right_motor, command_motor_right);\n"
"}\n"
"} // namespace my_robot_driver\n"
"\n"
"#include \"pluginlib/class_list_macros.hpp\"\n"
"PLUGINLIB_EXPORT_CLASS(my_robot_driver::MyRobotDriver,\n"
"                       webots_ros2_driver::PluginInterface)\n"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:238
msgid ""
"The ``MyRobotDriver::init`` method is executed once the plugin is loaded by "
"the ``webots_ros2_driver`` package. It takes two arguments:"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:241
msgid ""
"A pointer to the ``WebotsNode`` defined by ``webots_ros2_driver``, which "
"allows to access the ROS 2 node functions."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:242
msgid ""
"The ``parameters`` argument is an unordered map of strings, created from the "
"XML tags given in the URDF files (:ref:`4 Create the my_robot.urdf file`) "
"and allows to pass parameters to the controller. It is not used in this "
"example."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:245
msgid ""
"It initializes the plugin by setting up the robot motors, setting their "
"positions and velocities, and subscribing to the ``/cmd_vel`` topic."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:247
msgid ""
"void MyRobotDriver::init(\n"
"    webots_ros2_driver::WebotsNode *node,\n"
"    std::unordered_map<std::string, std::string> &parameters) {\n"
"\n"
"  right_motor = wb_robot_get_device(\"right wheel motor\");\n"
"  left_motor = wb_robot_get_device(\"left wheel motor\");\n"
"\n"
"  wb_motor_set_position(left_motor, INFINITY);\n"
"  wb_motor_set_velocity(left_motor, 0.0);\n"
"\n"
"  wb_motor_set_position(right_motor, INFINITY);\n"
"  wb_motor_set_velocity(right_motor, 0.0);\n"
"\n"
"  cmd_vel_subscription_ = node->create_subscription<geometry_msgs::msg::"
"Twist>(\n"
"      \"/cmd_vel\", rclcpp::SensorDataQoS().reliable(),\n"
"      [this](const geometry_msgs::msg::Twist::SharedPtr msg){\n"
"        this->cmd_vel_msg.linear = msg->linear;\n"
"        this->cmd_vel_msg.angular = msg->angular;\n"
"      }\n"
"  );\n"
"}\n"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:251
msgid ""
"The subscription callback is declared as a lambda function, that will be "
"called for each Twist message received on the ``/cmd_vel`` topic and will "
"save it in the ``cmd_vel_msg`` member variable."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:253
msgid ""
"      [this](const geometry_msgs::msg::Twist::SharedPtr msg){\n"
"        this->cmd_vel_msg.linear = msg->linear;\n"
"        this->cmd_vel_msg.angular = msg->angular;\n"
"      }\n"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:257
msgid ""
"The ``step()`` method is called at every time step of the simulation. At "
"each time step, the method will retrieve the desired ``forward_speed`` and "
"``angular_speed`` from ``cmd_vel_msg``. As the motors are controlled with "
"angular velocities, the method will then convert the ``forward_speed`` and "
"``angular_speed`` into individual commands for each wheel. This conversion "
"depends on the structure of the robot, more specifically on the radius of "
"the wheel and the distance between them."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:262
msgid ""
"void MyRobotDriver::step() {\n"
"  auto forward_speed = cmd_vel_msg.linear.x;\n"
"  auto angular_speed = cmd_vel_msg.angular.z;\n"
"\n"
"  auto command_motor_left =\n"
"      (forward_speed - angular_speed * HALF_DISTANCE_BETWEEN_WHEELS) /\n"
"      WHEEL_RADIUS;\n"
"  auto command_motor_right =\n"
"      (forward_speed + angular_speed * HALF_DISTANCE_BETWEEN_WHEELS) /\n"
"      WHEEL_RADIUS;\n"
"\n"
"  wb_motor_set_velocity(left_motor, command_motor_left);\n"
"  wb_motor_set_velocity(right_motor, command_motor_right);\n"
"}\n"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:266
msgid ""
"The final lines of the file define the end of the ``my_robot_driver`` "
"namespace and include a macro to export the ``MyRobotDriver`` class as a "
"plugin using the ``PLUGINLIB_EXPORT_CLASS`` macro. This allows the plugin to "
"be loaded by the Webots ROS2 driver at runtime."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:269
msgid ""
"#include \"pluginlib/class_list_macros.hpp\"\n"
"PLUGINLIB_EXPORT_CLASS(my_robot_driver::MyRobotDriver,\n"
"                       webots_ros2_driver::PluginInterface)\n"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:275
msgid ""
"While the plugin is implemented in C++, the C API must be used to interact "
"with the Webots controller library."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:280
msgid "4 Create the ``my_robot.urdf`` file"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:282
msgid ""
"You now have to create a URDF file to declare the ``MyRobotDriver`` plugin. "
"This will allow the ``webots_ros2_driver`` ROS node to launch the plugin and "
"connect it to the target robot."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:285
msgid ""
"In the ``my_package/resource`` folder create a text file named ``my_robot."
"urdf`` with this content:"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:291
msgid ""
"<?xml version=\"1.0\" ?>\n"
"<robot name=\"My robot\">\n"
"    <webots>\n"
"        <plugin type=\"my_package.my_robot_driver.MyRobotDriver\" />\n"
"    </webots>\n"
"</robot>\n"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:294
msgid ""
"The ``type`` attribute specifies the path to the class given by the "
"hierarchical structure of files. ``webots_ros2_driver`` is responsible for "
"loading the class based on the specified package and modules."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:299
msgid ""
"<?xml version=\"1.0\" ?>\n"
"<robot name=\"My robot\">\n"
"    <webots>\n"
"        <plugin type=\"my_robot_driver::MyRobotDriver\" />\n"
"    </webots>\n"
"</robot>\n"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:302
msgid ""
"The ``type`` attribute specifies the namespace and class name to load. "
"``pluginlib`` is responsible for loading the class based on the specified "
"information."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:307
msgid ""
"This simple URDF file doesn't contain any link or joint information about "
"the robot as it is not needed in this tutorial. However, URDF files usually "
"contain much more information as explained in the :doc:`../../../"
"Intermediate/URDF/URDF-Main` tutorial."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:312
msgid ""
"Here the plugin does not take any input parameter, but this can be achieved "
"with a tag containing the parameter name."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:318
msgid ""
"<plugin type=\"my_package.my_robot_driver.MyRobotDriver\">\n"
"    <parameterName>someValue</parameterName>\n"
"</plugin>"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:326
msgid ""
"<plugin type=\"my_robot_driver::MyRobotDriver\">\n"
"    <parameterName>someValue</parameterName>\n"
"</plugin>"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:333
msgid ""
"This is namely used to pass parameters to existing Webots device plugins "
"(see :doc:`./Setting-Up-Simulation-Webots-Advanced`)."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:336
msgid "5 Create the launch file"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:338
msgid ""
"Let's create the launch file to easily launch the simulation and the ROS "
"controller with a single command. In the ``my_package/launch`` folder create "
"a new text file named ``robot_launch.py`` with this code:"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:341
msgid ""
"import os\n"
"import launch\n"
"from launch import LaunchDescription\n"
"from ament_index_python.packages import get_package_share_directory\n"
"from webots_ros2_driver.webots_launcher import WebotsLauncher\n"
"from webots_ros2_driver.webots_controller import WebotsController\n"
"\n"
"\n"
"def generate_launch_description():\n"
"    package_dir = get_package_share_directory('my_package')\n"
"    robot_description_path = os.path.join(package_dir, 'resource', 'my_robot."
"urdf')\n"
"\n"
"    webots = WebotsLauncher(\n"
"        world=os.path.join(package_dir, 'worlds', 'my_world.wbt')\n"
"    )\n"
"\n"
"    my_robot_driver = WebotsController(\n"
"        robot_name='my_robot',\n"
"        parameters=[\n"
"            {'robot_description': robot_description_path},\n"
"        ]\n"
"    )\n"
"\n"
"    return LaunchDescription([\n"
"        webots,\n"
"        my_robot_driver,\n"
"        launch.actions.RegisterEventHandler(\n"
"            event_handler=launch.event_handlers.OnProcessExit(\n"
"                target_action=webots,\n"
"                on_exit=[launch.actions.EmitEvent(event=launch.events."
"Shutdown())],\n"
"            )\n"
"        )\n"
"    ])\n"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:344
msgid ""
"The ``WebotsLauncher`` object is a custom action that allows you to start a "
"Webots simulation instance. You have to specify in the constructor which "
"world file the simulator will open."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:347
msgid ""
"webots = WebotsLauncher(\n"
"    world=os.path.join(package_dir, 'worlds', 'my_world.wbt')\n"
")\n"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:352
msgid ""
"Then, the ROS node interacting with the simulated robot is created. This "
"node, named ``WebotsController``, is located in the ``webots_ros2_driver`` "
"package."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:359
msgid ""
"The node will be able to communicate with the simulated robot by using a "
"custom protocol based on IPC and shared memory."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:363
msgid ""
"The node (in WSL) will be able to communicate with the simulated robot (in "
"Webots on native Windows) through a TCP connection."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:367
msgid ""
"The node (in the docker container) will be able to communicate with the "
"simulated robot (in Webots on native macOS) through a TCP connection."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:370
msgid ""
"In your case, you need to run a single instance of this node, because you "
"have a single robot in the simulation. But if you had more robots in the "
"simulation, you would have to run one instance of this node per robot. The "
"``robot_name`` parameter is used to define the name of the robot the driver "
"should connect to. The ``robot_description`` parameter holds the path to the "
"URDF file which refers to the ``MyRobotDriver`` plugin. You can see the "
"``WebotsController`` node as the interface that connects your controller "
"plugin to the target robot."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:376
msgid ""
"my_robot_driver = WebotsController(\n"
"    robot_name='my_robot',\n"
"    parameters=[\n"
"        {'robot_description': robot_description_path},\n"
"    ]\n"
")\n"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:381
msgid ""
"After that, the two nodes are set to be launched in the "
"``LaunchDescription`` constructor:"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:383
msgid ""
"return LaunchDescription([\n"
"    webots,\n"
"    my_robot_driver,\n"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:388
msgid ""
"Finally, an optional part is added in order to shutdown all the nodes once "
"Webots terminates (e.g. when it gets closed from the graphical user "
"interface)."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:390
msgid ""
"launch.actions.RegisterEventHandler(\n"
"    event_handler=launch.event_handlers.OnProcessExit(\n"
"        target_action=webots,\n"
"        on_exit=[launch.actions.EmitEvent(event=launch.events.Shutdown())],\n"
"    )\n"
")\n"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:397
msgid ""
"More details on ``WebotsController`` and ``WebotsLauncher`` arguments can be "
"found `on the nodes reference page <https://github.com/cyberbotics/"
"webots_ros2/wiki/References-Nodes>`_."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:400
msgid "6 Edit additional files"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:406
msgid ""
"Before you can start the launch file, you have to modify the ``setup.py`` "
"file to include the extra files you added. Open ``my_package/setup.py`` and "
"replace its contents with:"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:409
msgid ""
"from setuptools import find_packages, setup\n"
"\n"
"package_name = 'my_package'\n"
"data_files = []\n"
"data_files.append(('share/ament_index/resource_index/packages', ['resource/' "
"+ package_name]))\n"
"data_files.append(('share/' + package_name + '/launch', ['launch/"
"robot_launch.py']))\n"
"data_files.append(('share/' + package_name + '/worlds', ['worlds/my_world."
"wbt']))\n"
"data_files.append(('share/' + package_name + '/resource', ['resource/"
"my_robot.urdf']))\n"
"data_files.append(('share/' + package_name, ['package.xml']))\n"
"\n"
"setup(\n"
"    name=package_name,\n"
"    version='0.0.0',\n"
"    packages=find_packages(exclude=['test']),\n"
"    data_files=data_files,\n"
"    install_requires=['setuptools'],\n"
"    zip_safe=True,\n"
"    maintainer='user',\n"
"    maintainer_email='user.name@mail.com',\n"
"    description='TODO: Package description',\n"
"    license='TODO: License declaration',\n"
"    tests_require=['pytest'],\n"
"    entry_points={\n"
"        'console_scripts': [\n"
"            'my_robot_driver = my_package.my_robot_driver:main',\n"
"        ],\n"
"    },\n"
")\n"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:412
msgid ""
"This sets-up the package and adds in the ``data_files`` variable the newly "
"added files: ``my_world.wbt``, ``my_robot.urdf`` and ``robot_launch.py``."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:416
msgid ""
"Before you can start the launch file, you have to modify ``CMakeLists.txt`` "
"and ``my_robot_driver.xml`` files:"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:418
msgid "``CMakeLists.txt`` defines the compilation rules of your plugin."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:419
msgid ""
"``my_robot_driver.xml`` is necessary for the pluginlib to find your Webots "
"ROS 2 plugin."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:421
msgid "Open ``my_package/my_robot_driver.xml`` and replace its contents with:"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:423
msgid ""
"<library path=\"my_package\">\n"
"  <!-- The `type` attribute is a reference to the plugin class. -->\n"
"  <!-- The `base_class_type` attribute is always `webots_ros2_driver::"
"PluginInterface`. -->\n"
"  <class type=\"my_robot_driver::MyRobotDriver\" "
"base_class_type=\"webots_ros2_driver::PluginInterface\">\n"
"    <description>\n"
"      This is a Webots ROS 2 plugin example\n"
"    </description>\n"
"  </class>\n"
"</library>\n"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:426
msgid "Open ``my_package/CMakeLists.txt`` and replace its contents with:"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:428
msgid ""
"cmake_minimum_required(VERSION 3.5)\n"
"project(my_package)\n"
"\n"
"if(NOT CMAKE_CXX_STANDARD)\n"
"  set(CMAKE_CXX_STANDARD 14)\n"
"endif()\n"
"\n"
"# Besides the package specific dependencies we also need the `pluginlib` and "
"`webots_ros2_driver`\n"
"find_package(ament_cmake REQUIRED)\n"
"find_package(rclcpp REQUIRED)\n"
"find_package(std_msgs REQUIRED)\n"
"find_package(geometry_msgs REQUIRED)\n"
"find_package(pluginlib REQUIRED)\n"
"find_package(webots_ros2_driver REQUIRED)\n"
"\n"
"# Export the plugin configuration file\n"
"pluginlib_export_plugin_description_file(webots_ros2_driver my_robot_driver."
"xml)\n"
"\n"
"# MyRobotDriver library\n"
"add_library(\n"
"  ${PROJECT_NAME}\n"
"  SHARED\n"
"  src/MyRobotDriver.cpp\n"
")\n"
"target_include_directories(\n"
"  ${PROJECT_NAME}\n"
"  PRIVATE\n"
"  include\n"
")\n"
"ament_target_dependencies(\n"
"  ${PROJECT_NAME}\n"
"  pluginlib\n"
"  rclcpp\n"
"  webots_ros2_driver\n"
")\n"
"install(TARGETS\n"
"  ${PROJECT_NAME}\n"
"  ARCHIVE DESTINATION lib\n"
"  LIBRARY DESTINATION lib\n"
"  RUNTIME DESTINATION bin\n"
")\n"
"# Install additional directories.\n"
"install(DIRECTORY\n"
"  launch\n"
"  resource\n"
"  worlds\n"
"  DESTINATION share/${PROJECT_NAME}/\n"
")\n"
"ament_export_include_directories(\n"
"  include\n"
")\n"
"ament_export_libraries(\n"
"  ${PROJECT_NAME}\n"
")\n"
"ament_package()\n"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:431
msgid ""
"The CMakeLists.txt exports the plugin configuration file with the "
"``pluginlib_export_plugin_description_file()``, defines a shared library of "
"the C++ plugin ``src/MyRobotDriver.cpp``, and sets the include and library "
"dependencies using ``ament_target_dependencies()``."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:433
msgid ""
"The file then installs the library, the directories ``launch``, "
"``resource``, and ``worlds`` to the ``share/my_package`` directory. Finally, "
"it exports the include directories and libraries using "
"``ament_export_include_directories()`` and ``ament_export_libraries()``, "
"respectively, and declares the package using ``ament_package()``."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:438
msgid "7 Test the code"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:444
msgid "From a terminal in your ROS 2 workspace run:"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:446
#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:485
msgid ""
"$ colcon build\n"
"$ source install/local_setup.bash\n"
"$ ros2 launch my_package robot_launch.py"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:452
#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:468
msgid ""
"This will launch the simulation. Webots will be automatically installed on "
"the first run in case it was not already installed."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:457
msgid "From a terminal in your WSL ROS 2 workspace run:"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:459
msgid ""
"$ colcon build\n"
"$ export WEBOTS_HOME=/mnt/c/Program\\ Files/Webots\n"
"$ source install/local_setup.bash\n"
"$ ros2 launch my_package robot_launch.py"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:466
msgid ""
"Be sure to use the ``/mnt`` prefix in front of your path to the Webots "
"installation folder to access the Windows file system from WSL."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:473
msgid ""
"On macOS, a local server must be started on the host to start Webots from "
"the VM. The local server can be downloaded `on the webots-server repository "
"<https://github.com/cyberbotics/webots-server/blob/main/"
"local_simulation_server.py>`_."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:476
msgid ""
"In a terminal of the host machine (not in the VM), specify the Webots "
"installation folder (e.g. ``/Applications/Webots.app``) and start the server "
"using the following commands:"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:478
msgid ""
"$ export WEBOTS_HOME=/Applications/Webots.app\n"
"$ python3 local_simulation_server.py"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:483
msgid ""
"From a terminal in the Linux VM in your ROS 2 workspace, build and launch "
"your custom package with:"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:494
msgid ""
"If you want to install Webots manually, you can download it `here <https://"
"github.com/cyberbotics/webots/releases/latest>`_."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:497
msgid "Then, open a second terminal and send a command with:"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:499
msgid "$ ros2 topic pub /cmd_vel geometry_msgs/Twist  \"linear: { x: 0.1 }\""
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:503
msgid "The robot is now moving forward."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:507
msgid ""
"At this point, the robot is able to blindly follow your motor commands. But "
"it will eventually bump into the wall as you order it to move forwards."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:512
msgid ""
"Close the Webots window, this should also shutdown your ROS nodes started "
"from the launcher. Close also the topic command with ``Ctrl+C`` in the "
"second terminal."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:516
msgid "Summary"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:518
msgid ""
"In this tutorial, you set-up a realistic robot simulation with Webots and "
"implemented a custom plugin to control the motors of the robot."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:521
msgid "Next steps"
msgstr "下一步"

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:523
msgid ""
"To improve the simulation, the robot's sensors can be used to detect "
"obstacles and avoid them. The second part of the tutorial shows how to "
"implement such behaviour:"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst:526
msgid ":doc:`./Setting-Up-Simulation-Webots-Advanced`."
msgstr ""
