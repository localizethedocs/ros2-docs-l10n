# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Open Robotics
# This file is distributed under the same license as the ros2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ros2 documentation crystal\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 06:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/Tutorials/dummy-robot-demo.rst:6
msgid "Trying the dummy robot demo"
msgstr ""

#: ../../../source/Tutorials/dummy-robot-demo.rst:8
msgid ""
"In this demo, we present a simple demo robot with all components from "
"publishing joint states over publishing fake laser data until visualizing "
"the robot model on a map in RViz."
msgstr ""

#: ../../../source/Tutorials/dummy-robot-demo.rst:11
msgid "Launching the demo"
msgstr ""

#: ../../../source/Tutorials/dummy-robot-demo.rst:13
msgid ""
"We assume your ROS 2 installation dir as ``~/ros2_ws``. Please change the "
"directories according to your platform."
msgstr ""

#: ../../../source/Tutorials/dummy-robot-demo.rst:15
msgid ""
"To start the demo, we execute the demo bringup launch file, which we are "
"going to explain in more details in the next section."
msgstr ""

#: ../../../source/Tutorials/dummy-robot-demo.rst:17
msgid ""
"source ~/ros2_ws/install/setup.bash\n"
"ros2 launch dummy_robot_bringup dummy_robot_bringup.launch.py"
msgstr ""

#: ../../../source/Tutorials/dummy-robot-demo.rst:23
msgid ""
"You should see some prints inside your terminal along the lines of the "
"following:"
msgstr ""

#: ../../../source/Tutorials/dummy-robot-demo.rst:25
msgid ""
"[INFO] [launch]: process[dummy_map_server-1]: started with pid [25812]\n"
"[INFO] [launch]: process[robot_state_publisher-2]: started with pid [25813]\n"
"[INFO] [launch]: process[dummy_joint_states-3]: started with pid [25814]\n"
"[INFO] [launch]: process[dummy_laser-4]: started with pid [25815]\n"
"Initialize urdf model from file: /home/mikael/work/ros2/bouncy_ws/"
"install_debug_isolated/dummy_robot_bringup/share/dummy_robot_bringup/launch/"
"single_rrbot.urdf\n"
"Parsing robot urdf xml string.\n"
"Link single_rrbot_link1 had 1 children\n"
"Link single_rrbot_link2 had 1 children\n"
"Link single_rrbot_link3 had 2 children\n"
"Link single_rrbot_camera_link had 0 children\n"
"Link single_rrbot_hokuyo_link had 0 children\n"
"got segment single_rrbot_camera_link\n"
"got segment single_rrbot_hokuyo_link\n"
"got segment single_rrbot_link1\n"
"got segment single_rrbot_link2\n"
"got segment single_rrbot_link3\n"
"got segment world\n"
"Adding fixed segment from world to single_rrbot_link1\n"
"Adding moving segment from single_rrbot_link1 to single_rrbot_link2\n"
"[INFO] [dummy_laser]: angle inc:    0.004363\n"
"[INFO] [dummy_laser]: scan size:    1081\n"
"[INFO] [dummy_laser]: scan time increment:  0.000028\n"
"Adding moving segment from single_rrbot_link2 to single_rrbot_link3\n"
"Adding fixed segment from single_rrbot_link3 to single_rrbot_camera_link\n"
"Adding fixed segment from single_rrbot_link3 to single_rrbot_hokuyo_link"
msgstr ""

#: ../../../source/Tutorials/dummy-robot-demo.rst:53
msgid "If you now open in a next terminal your RViz, you'll see your robot. ðŸŽ‰"
msgstr ""

#: ../../../source/Tutorials/dummy-robot-demo.rst:55
msgid ""
"$ source <ROS2_INSTALL_FOLDER>/setup.bash\n"
"$ rviz2"
msgstr ""

#: ../../../source/Tutorials/dummy-robot-demo.rst:60
msgid ""
"This opens RViz2. Assuming you have your dummy_robot_bringup still launched, "
"you can now add the TF display plugin and configure your global frame to "
"``world``. Once you did that, you should see a similar picture:"
msgstr ""

#: ../../../source/Tutorials/dummy-robot-demo.rst:69
msgid "What's happening?"
msgstr ""

#: ../../../source/Tutorials/dummy-robot-demo.rst:71
msgid ""
"If you have a closer look at the launch file, we start a couple of nodes at "
"the same time."
msgstr ""

#: ../../../source/Tutorials/dummy-robot-demo.rst:74
msgid "dummy_map_server"
msgstr ""

#: ../../../source/Tutorials/dummy-robot-demo.rst:75
msgid "dummy_laser"
msgstr ""

#: ../../../source/Tutorials/dummy-robot-demo.rst:76
msgid "dummy_joint_states"
msgstr ""

#: ../../../source/Tutorials/dummy-robot-demo.rst:77
msgid "robot_state_publisher"
msgstr ""

#: ../../../source/Tutorials/dummy-robot-demo.rst:79
msgid ""
"The first two packages are relatively simple. The ``dummy_map_server`` "
"constantly publishes an empty map with a periodic update. The "
"``dummy_laser`` does basically the same; publishing dummy fake laser scans."
msgstr ""

#: ../../../source/Tutorials/dummy-robot-demo.rst:81
msgid ""
"The ``dummy_joint_states`` node is publishing fake joint state data. As we "
"are publishing a simple RRbot with only two joints, this node publishes "
"joint states values for these two joints."
msgstr ""

#: ../../../source/Tutorials/dummy-robot-demo.rst:83
msgid ""
"The ``robot_state_publisher`` is doing the actual interesting work. It "
"parses the given URDF file, extracts the robot model and listens to the "
"incoming joint states. With this information, it publishes TF values for our "
"robot which we visualize in RViz."
msgstr ""

#: ../../../source/Tutorials/dummy-robot-demo.rst:85
msgid "Hooray!"
msgstr ""
