# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation galactic\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 06:55+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:8
msgid "Writing a simple service and client (Python)"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:10
msgid "**Goal:** Create and run service and client nodes using Python."
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:12
msgid "**Tutorial level:** Beginner"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:14
msgid "**Time:** 20 minutes"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:18
msgid "Contents"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:21
msgid "Background"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:23
msgid ""
"When :doc:`nodes <../Beginner-CLI-Tools/Understanding-ROS2-Nodes/"
"Understanding-ROS2-Nodes>` communicate using :doc:`services <../Beginner-CLI-"
"Tools/Understanding-ROS2-Services/Understanding-ROS2-Services>`, the node "
"that sends a request for data is called the client node, and the one that "
"responds to the request is the service node. The structure of the request "
"and response is determined by a ``.srv`` file."
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:26
msgid ""
"The example used here is a simple integer addition system; one node requests "
"the sum of two integers, and the other responds with the result."
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:29
msgid "Prerequisites"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:31
msgid ""
"In previous tutorials, you learned how to :doc:`create a workspace <./"
"Creating-A-Workspace/Creating-A-Workspace>` and :doc:`create a package <./"
"Creating-Your-First-ROS2-Package>`."
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:34
msgid "Tasks"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:37
msgid "1 Create a package"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:39
msgid ""
"Open a new terminal and :doc:`source your ROS 2 installation <../Beginner-"
"CLI-Tools/Configuring-ROS2-Environment>` so that ``ros2`` commands will work."
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:41
msgid ""
"Navigate into the ``ros2_ws`` directory created in a :ref:`previous tutorial "
"<new-directory>`."
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:43
msgid ""
"Recall that packages should be created in the ``src`` directory, not the "
"root of the workspace. Navigate into ``ros2_ws/src`` and create a new "
"package:"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:46
msgid ""
"ros2 pkg create --build-type ament_python py_srvcli --dependencies rclpy "
"example_interfaces"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:50
msgid ""
"Your terminal will return a message verifying the creation of your package "
"``py_srvcli`` and all its necessary files and folders."
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:52
msgid ""
"The ``--dependencies`` argument will automatically add the necessary "
"dependency lines to ``package.xml``. ``example_interfaces`` is the package "
"that includes `the .srv file <https://github.com/ros2/example_interfaces/"
"blob/rolling/srv/AddTwoInts.srv>`__ you will need to structure your requests "
"and responses:"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:55
msgid ""
"int64 a\n"
"int64 b\n"
"---\n"
"int64 sum"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:62
msgid ""
"The first two lines are the parameters of the request, and below the dashes "
"is the response."
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:65
msgid "1.1 Update ``package.xml``"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:67
msgid ""
"Because you used the ``--dependencies`` option during package creation, you "
"donâ€™t have to manually add dependencies to ``package.xml``."
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:69
msgid ""
"As always, though, make sure to add the description, maintainer email and "
"name, and license information to ``package.xml``."
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:71
msgid ""
"<description>Python client server tutorial</description>\n"
"<maintainer email=\"you@email.com\">Your Name</maintainer>\n"
"<license>Apache License 2.0</license>"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:78
msgid "1.2 Update ``setup.py``"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:80
msgid ""
"Add the same information to the ``setup.py`` file for the ``maintainer``, "
"``maintainer_email``, ``description`` and ``license`` fields:"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:82
msgid ""
"maintainer='Your Name',\n"
"maintainer_email='you@email.com',\n"
"description='Python client server tutorial',\n"
"license='Apache License 2.0',"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:90
msgid "2 Write the service node"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:92
msgid ""
"Inside the ``ros2_ws/src/py_srvcli/py_srvcli`` directory, create a new file "
"called ``service_member_function.py`` and paste the following code within:"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:94
msgid ""
"from example_interfaces.srv import AddTwoInts\n"
"\n"
"import rclpy\n"
"from rclpy.node import Node\n"
"\n"
"\n"
"class MinimalService(Node):\n"
"\n"
"    def __init__(self):\n"
"        super().__init__('minimal_service')\n"
"        self.srv = self.create_service(AddTwoInts, 'add_two_ints', self."
"add_two_ints_callback)\n"
"\n"
"    def add_two_ints_callback(self, request, response):\n"
"        response.sum = request.a + request.b\n"
"        self.get_logger().info('Incoming request\\na: %d b: %d' % (request."
"a, request.b))\n"
"\n"
"        return response\n"
"\n"
"\n"
"def main():\n"
"    rclpy.init()\n"
"\n"
"    minimal_service = MinimalService()\n"
"\n"
"    rclpy.spin(minimal_service)\n"
"\n"
"    rclpy.shutdown()\n"
"\n"
"\n"
"if __name__ == '__main__':\n"
"    main()"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:129
msgid "2.1 Examine the code"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:131
msgid ""
"The first ``import`` statement imports the ``AddTwoInts`` service type from "
"the ``example_interfaces`` package. The following ``import`` statement "
"imports the ROS 2 Python client library, and specifically the ``Node`` class."
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:134
msgid ""
"from example_interfaces.srv import AddTwoInts\n"
"\n"
"import rclpy\n"
"from rclpy.node import Node"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:141
msgid ""
"The ``MinimalService`` class constructor initializes the node with the name "
"``minimal_service``. Then, it creates a service and defines the type, name, "
"and callback."
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:144
msgid ""
"def __init__(self):\n"
"    super().__init__('minimal_service')\n"
"    self.srv = self.create_service(AddTwoInts, 'add_two_ints', self."
"add_two_ints_callback)"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:150
msgid ""
"The definition of the service callback receives the request data, sums it, "
"and returns the sum as a response."
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:152
msgid ""
"def add_two_ints_callback(self, request, response):\n"
"    response.sum = request.a + request.b\n"
"    self.get_logger().info('Incoming request\\na: %d b: %d' % (request.a, "
"request.b))\n"
"\n"
"    return response"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:160
msgid ""
"Finally, the main class initializes the ROS 2 Python client library, "
"instantiates the ``MinimalService`` class to create the service node and "
"spins the node to handle callbacks."
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:163
msgid "2.2 Add an entry point"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:165
msgid ""
"To allow the ``ros2 run`` command to run your node, you must add the entry "
"point to ``setup.py`` (located in the ``ros2_ws/src/py_srvcli`` directory)."
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:167
msgid "Add the following line between the ``'console_scripts':`` brackets:"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:169
msgid "'service = py_srvcli.service_member_function:main',"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:174
msgid "3 Write the client node"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:176
msgid ""
"Inside the ``ros2_ws/src/py_srvcli/py_srvcli`` directory, create a new file "
"called ``client_member_function.py`` and paste the following code within:"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:178
msgid ""
"import sys\n"
"\n"
"from example_interfaces.srv import AddTwoInts\n"
"import rclpy\n"
"from rclpy.node import Node\n"
"\n"
"\n"
"class MinimalClientAsync(Node):\n"
"\n"
"    def __init__(self):\n"
"        super().__init__('minimal_client_async')\n"
"        self.cli = self.create_client(AddTwoInts, 'add_two_ints')\n"
"        while not self.cli.wait_for_service(timeout_sec=1.0):\n"
"            self.get_logger().info('service not available, waiting "
"again...')\n"
"        self.req = AddTwoInts.Request()\n"
"\n"
"    def send_request(self, a, b):\n"
"        self.req.a = a\n"
"        self.req.b = b\n"
"        self.future = self.cli.call_async(self.req)\n"
"        rclpy.spin_until_future_complete(self, self.future)\n"
"        return self.future.result()\n"
"\n"
"\n"
"def main():\n"
"    rclpy.init()\n"
"\n"
"    minimal_client = MinimalClientAsync()\n"
"    response = minimal_client.send_request(int(sys.argv[1]), int(sys."
"argv[2]))\n"
"    minimal_client.get_logger().info(\n"
"        'Result of add_two_ints: for %d + %d = %d' %\n"
"        (int(sys.argv[1]), int(sys.argv[2]), response.sum))\n"
"\n"
"    minimal_client.destroy_node()\n"
"    rclpy.shutdown()\n"
"\n"
"\n"
"if __name__ == '__main__':\n"
"    main()"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:222
msgid "3.1 Examine the code"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:224
msgid ""
"The only different ``import`` statement for the client is ``import sys``. "
"The client node code uses `sys.argv <https://docs.python.org/3/library/sys."
"html#sys.argv>`__ to get access to command line input arguments for the "
"request."
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:227
msgid ""
"The constructor definition creates a client with the same type and name as "
"the service node. The type and name must match for the client and service to "
"be able to communicate."
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:230
msgid ""
"The ``while`` loop in the constructor checks if a service matching the type "
"and name of the client is available once a second."
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:232
msgid "Below the constructor is the request definition, followed by ``main``."
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:234
msgid ""
"The only significant difference in the clientâ€™s ``main`` is the ``while`` "
"loop. The loop checks the ``future`` to see if there is a response from the "
"service, as long as the system is running. If the service has sent a "
"response, the result will be written in a log message."
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:240
msgid "3.2 Add an entry point"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:242
msgid ""
"Like the service node, you also have to add an entry point to be able to run "
"the client node."
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:244
msgid ""
"The ``entry_points`` field of your ``setup.py`` file should look like this:"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:246
msgid ""
"entry_points={\n"
"    'console_scripts': [\n"
"        'service = py_srvcli.service_member_function:main',\n"
"        'client = py_srvcli.client_member_function:main',\n"
"    ],\n"
"},"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:256
msgid "4 Build and run"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:258
msgid ""
"It's good practice to run ``rosdep`` in the root of your workspace "
"(``ros2_ws``) to check for missing dependencies before building:"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:262
#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:287
msgid "Linux"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:264
msgid "rosdep install -i --from-path src --rosdistro rolling -y"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:268
#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:293
msgid "macOS"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:270
#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:274
msgid "rosdep only runs on Linux, so you can skip ahead to next step."
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:272
#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:299
msgid "Windows"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:277
msgid ""
"Navigate back to the root of your workspace, ``ros2_ws``, and build your new "
"package:"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:279
msgid "colcon build --packages-select py_srvcli"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:283
msgid ""
"Open a new terminal, navigate to ``ros2_ws``, and source the setup files:"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:289
#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:295
msgid ". install/setup.bash"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:301
msgid "call install/setup.bat"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:305
msgid "Now run the service node:"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:307
msgid "ros2 run py_srvcli service"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:311
msgid "The node will wait for the clientâ€™s request."
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:313
msgid ""
"Open another terminal and source the setup files from inside ``ros2_ws`` "
"again. Start the client node, followed by any two integers separated by a "
"space:"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:316
msgid "ros2 run py_srvcli client 2 3"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:320
msgid ""
"If you chose ``2`` and ``3``, for example, the client would receive a "
"response like this:"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:322
msgid "[INFO] [minimal_client_async]: Result of add_two_ints: for 2 + 3 = 5"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:326
msgid ""
"Return to the terminal where your service node is running. You will see that "
"it published log messages when it received the request:"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:329
msgid ""
"[INFO] [minimal_service]: Incoming request\n"
"a: 2 b: 3"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:334
msgid "Enter ``Ctrl+C`` in the server terminal to stop the node from spinning."
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:338
msgid "Summary"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:340
msgid ""
"You created two nodes to request and respond to data over a service. You "
"added their dependencies and executables to the package configuration files "
"so that you could build and run them, allowing you to see a service/client "
"system at work."
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:344
msgid "Next steps"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:346
msgid ""
"In the last few tutorials you've been utilizing interfaces to pass data "
"across topics and services. Next, you'll learn how to :doc:`create custom "
"interfaces <./Custom-ROS2-Interfaces>`."
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:350
msgid "Related content"
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:352
msgid ""
"There are several ways you could write a service and client in Python; check "
"out the ``minimal_client`` and ``minimal_service`` packages in the `ros2/"
"examples <https://github.com/ros2/examples/tree/rolling/rclpy/services>`_ "
"repo."
msgstr ""

#: ../../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:354
msgid ""
"In this tutorial, you used the ``call_async()`` API in your client node to "
"call the service. There is another service call API available for Python "
"called synchronous calls. We do not recommend using synchronous calls, but "
"if you'd like to learn more about them, read the guide to :doc:`Synchronous "
"vs. asynchronous clients <../../How-To-Guides/Sync-Vs-Async>`."
msgstr ""
