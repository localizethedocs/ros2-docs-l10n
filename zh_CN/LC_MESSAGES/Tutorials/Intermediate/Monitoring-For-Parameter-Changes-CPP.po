# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation iron\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 06:55+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:6
msgid "Monitoring for parameter changes (C++)"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:8
msgid ""
"**Goal:** Learn to use the ParameterEventHandler class to monitor and "
"respond to parameter changes."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:10
msgid "**Tutorial level:** Intermediate"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:12
msgid "**Time:** 20 minutes"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:16
msgid "Contents"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:19
msgid "Background"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:21
msgid ""
"Often a node needs to respond to changes to its own parameters or another "
"node's parameters. The ParameterEventHandler class makes it easy to listen "
"for parameter changes so that your code can respond to them. This tutorial "
"will show you how to use the C++ version of the ParameterEventHandler class "
"to monitor for changes to a node's own parameters as well as changes to "
"another node's parameters."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:26
msgid "Prerequisites"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:28
msgid ""
"Before starting this tutorial, you should first complete the following "
"tutorials:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:30
msgid ""
":doc:`../Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-"
"Parameters`"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:31
msgid ":doc:`../Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP`"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:34
msgid "Tasks"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:36
msgid ""
"In this tutorial, you will create a new package to contain some sample code, "
"write some C++ code to use the ParameterEventHandler class, and test the "
"resulting code."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:40
msgid "1 Create a package"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:42
msgid ""
"First, open a new terminal and :doc:`source your ROS 2 installation <../"
"Beginner-CLI-Tools/Configuring-ROS2-Environment>` so that ``ros2`` commands "
"will work."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:44
msgid ""
"Follow :ref:`these instructions <new-directory>` to create a new workspace "
"named ``ros2_ws``."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:46
msgid ""
"Recall that packages should be created in the ``src`` directory, not the "
"root of the workspace. So, navigate into ``ros2_ws/src`` and then create a "
"new package there:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:49
msgid ""
"ros2 pkg create --build-type ament_cmake --license Apache-2.0 "
"cpp_parameter_event_handler --dependencies rclcpp"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:53
msgid ""
"Your terminal will return a message verifying the creation of your package "
"``cpp_parameter_event_handler`` and all its necessary files and folders."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:55
msgid ""
"The ``--dependencies`` argument will automatically add the necessary "
"dependency lines to ``package.xml`` and ``CMakeLists.txt``."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:58
msgid "1.1 Update ``package.xml``"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:60
msgid ""
"Because you used the ``--dependencies`` option during package creation, you "
"donâ€™t have to manually add dependencies to ``package.xml`` or ``CMakeLists."
"txt``. As always, though, make sure to add the description, maintainer email "
"and name, and license information to ``package.xml``."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:63
msgid ""
"<description>C++ parameter events client tutorial</description>\n"
"<maintainer email=\"you@email.com\">Your Name</maintainer>\n"
"<license>Apache License 2.0</license>"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:70
msgid "2 Write the C++ node"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:72
msgid ""
"Inside the ``ros2_ws/src/cpp_parameter_event_handler/src`` directory, create "
"a new file called ``parameter_event_handler.cpp`` and paste the following "
"code within:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:74
msgid ""
"#include <memory>\n"
"\n"
"#include \"rclcpp/rclcpp.hpp\"\n"
"\n"
"class SampleNodeWithParameters : public rclcpp::Node\n"
"{\n"
"public:\n"
"  SampleNodeWithParameters()\n"
"  : Node(\"node_with_parameters\")\n"
"  {\n"
"    this->declare_parameter(\"an_int_param\", 0);\n"
"\n"
"    // Create a parameter subscriber that can be used to monitor parameter "
"changes\n"
"    // (for this node's parameters as well as other nodes' parameters)\n"
"    param_subscriber_ = std::make_shared<rclcpp::"
"ParameterEventHandler>(this);\n"
"\n"
"    // Set a callback for this node's integer parameter, \"an_int_param\"\n"
"    auto cb = [this](const rclcpp::Parameter & p) {\n"
"        RCLCPP_INFO(\n"
"          this->get_logger(), \"cb: Received an update to parameter \\\"%s\\"
"\" of type %s: \\\"%ld\\\"\",\n"
"          p.get_name().c_str(),\n"
"          p.get_type_name().c_str(),\n"
"          p.as_int());\n"
"      };\n"
"    cb_handle_ = param_subscriber_->add_parameter_callback(\"an_int_param\", "
"cb);\n"
"  }\n"
"\n"
"private:\n"
"  std::shared_ptr<rclcpp::ParameterEventHandler> param_subscriber_;\n"
"  std::shared_ptr<rclcpp::ParameterCallbackHandle> cb_handle_;\n"
"};\n"
"\n"
"int main(int argc, char ** argv)\n"
"{\n"
"  rclcpp::init(argc, argv);\n"
"  rclcpp::spin(std::make_shared<SampleNodeWithParameters>());\n"
"  rclcpp::shutdown();\n"
"\n"
"  return 0;\n"
"}"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:118
msgid "2.1 Examine the code"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:119
msgid ""
"The first statement, ``#include <memory>`` is included so that the code can "
"utilize the std::make_shared template. The next, ``#include \"rclcpp/rclcpp."
"hpp\"`` is included to allow the code to reference the various functionality "
"provided by the rclcpp interface, including the ParameterEventHandler class."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:122
msgid ""
"After the class declaration, the code defines a class, "
"``SampleNodeWithParameters``. The constructor for the class declares an "
"integer parameter ``an_int_param``, with a default value of 0. Next, the "
"code creates a ``ParameterEventHandler`` that will be used to monitor "
"changes to parameters. Finally, the code creates a lambda function and sets "
"it as the callback to invoke whenever ``an_int_param`` is updated."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:129
msgid ""
"It is very important to save the handle that is returned by "
"``add_parameter_callback``; otherwise, the callback will not be properly "
"registered."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:131
msgid ""
"SampleNodeWithParameters()\n"
": Node(\"node_with_parameters\")\n"
"{\n"
"  this->declare_parameter(\"an_int_param\", 0);\n"
"\n"
"  // Create a parameter subscriber that can be used to monitor parameter "
"changes\n"
"  // (for this node's parameters as well as other nodes' parameters)\n"
"  param_subscriber_ = std::make_shared<rclcpp::"
"ParameterEventHandler>(this);\n"
"\n"
"  // Set a callback for this node's integer parameter, \"an_int_param\"\n"
"  auto cb = [this](const rclcpp::Parameter & p) {\n"
"      RCLCPP_INFO(\n"
"        this->get_logger(), \"cb: Received an update to parameter \\\"%s\\\" "
"of type %s: \\\"%ld\\\"\",\n"
"        p.get_name().c_str(),\n"
"        p.get_type_name().c_str(),\n"
"        p.as_int());\n"
"    };\n"
"  cb_handle_ = param_subscriber_->add_parameter_callback(\"an_int_param\", "
"cb);\n"
"}"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:153
msgid ""
"Following the ``SampleNodeWithParameters`` is a typical ``main`` function "
"which initializes ROS, spins the sample node so that it can send and receive "
"messages, and then shuts down after the user enters ^C at the console."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:155
msgid ""
"int main(int argc, char ** argv)\n"
"{\n"
"  rclcpp::init(argc, argv);\n"
"  rclcpp::spin(std::make_shared<SampleNodeWithParameters>());\n"
"  rclcpp::shutdown();\n"
"\n"
"  return 0;\n"
"}"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:168
msgid "2.2 Add executable"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:170
msgid ""
"To build this code, first open the ``CMakeLists.txt`` file and add the "
"following lines of code below the dependency ``find_package(rclcpp "
"REQUIRED)``"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:172
msgid ""
"add_executable(parameter_event_handler src/parameter_event_handler.cpp)\n"
"ament_target_dependencies(parameter_event_handler rclcpp)\n"
"\n"
"install(TARGETS\n"
"  parameter_event_handler\n"
"  DESTINATION lib/${PROJECT_NAME}\n"
")"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:183
msgid "3 Build and run"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:185
msgid ""
"It's good practice to run ``rosdep`` in the root of your workspace "
"(``ros2_ws``) to check for missing dependencies before building:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:189
#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:213
#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:299
msgid "Linux"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:191
msgid "rosdep install -i --from-path src --rosdistro $ROS_DISTRO -y"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:195
#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:219
#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:305
msgid "macOS"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:197
#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:201
msgid "rosdep only runs on Linux, so you can skip ahead to next step."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:199
#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:225
#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:311
msgid "Windows"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:203
msgid ""
"Navigate back to the root of your workspace, ``ros2_ws``, and build your new "
"package:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:205
#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:291
msgid "colcon build --packages-select cpp_parameter_event_handler"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:209
msgid ""
"Open a new terminal, navigate to ``ros2_ws``, and source the setup files:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:215
#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:221
#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:301
#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:307
msgid ". install/setup.bash"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:227
#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:313
msgid "call install/setup.bat"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:231
msgid "Now run the node:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:233
#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:319
msgid "ros2 run cpp_parameter_event_handler parameter_event_handler"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:237
msgid ""
"The node is now active and has a single parameter and will print a message "
"whenever this parameter is updated. To test this, open up another terminal "
"and source the ROS setup file as before (. install/setup.bash) and execute "
"the following command:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:240
msgid "ros2 param set node_with_parameters an_int_param 43"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:244
msgid ""
"The terminal running the node will display a message similar to the "
"following:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:246
msgid ""
"[INFO] [1606950498.422461764] [node_with_parameters]: cb: Received an update "
"to parameter \"an_int_param\" of type integer: \"43\""
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:250
msgid ""
"The callback we set previously in the node has been invoked and has "
"displayed the new updated value. You can now terminate the running "
"parameter_event_handler sample using ^C in the terminal."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:254
msgid "3.1 Monitor changes to another node's parameters"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:256
msgid ""
"You can also use the ParameterEventHandler to monitor parameter changes to "
"another node's parameters. Let's update the SampleNodeWithParameters class "
"to also monitor for changes to a parameter in another node. We will use the "
"parameter_blackboard demo application to host a double parameter that we "
"will monitor for updates."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:260
msgid ""
"First update the constructor to add the following code after the existing "
"code:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:262
msgid ""
"// Now, add a callback to monitor any changes to the remote node's "
"parameter. In this\n"
"// case, we supply the remote node name.\n"
"auto cb2 = [this](const rclcpp::Parameter & p) {\n"
"    RCLCPP_INFO(\n"
"      this->get_logger(), \"cb2: Received an update to parameter \\\"%s\\\" "
"of type: %s: \\\"%.02lf\\\"\",\n"
"      p.get_name().c_str(),\n"
"      p.get_type_name().c_str(),\n"
"      p.as_double());\n"
"  };\n"
"auto remote_node_name = std::string(\"parameter_blackboard\");\n"
"auto remote_param_name = std::string(\"a_double_param\");\n"
"cb_handle2_ = param_subscriber_->add_parameter_callback(remote_param_name, "
"cb2, remote_node_name);"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:278
msgid ""
"Then add another member variable, ``cb_handle2`` for the additional callback "
"handle:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:280
msgid ""
"private:\n"
"  std::shared_ptr<rclcpp::ParameterEventHandler> param_subscriber_;\n"
"  std::shared_ptr<rclcpp::ParameterCallbackHandle> cb_handle_;\n"
"  std::shared_ptr<rclcpp::ParameterCallbackHandle> cb_handle2_;  // Add "
"this\n"
"};"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:289
msgid ""
"In a terminal, navigate back to the root of your workspace, ``ros2_ws``, and "
"build your updated package as before:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:295
msgid "Then source the setup files:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:317
msgid ""
"Now, to test monitoring of remote parameters, first run the newly-built "
"parameter_event_handler code:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:323
msgid ""
"Next, from another teminal (with ROS initialized), run the "
"parameter_blackboard demo application, as follows:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:325
msgid "ros2 run demo_nodes_cpp parameter_blackboard"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:329
msgid ""
"Finally, from a third terminal (with ROS initialized), let's set a parameter "
"on the parameter_blackboard node:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:331
msgid "ros2 param set parameter_blackboard a_double_param 3.45"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:335
msgid ""
"Upon executing this command, you should see output in the "
"parameter_event_handler window, indicating that the callback function was "
"invoked upon the parameter update:"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:337
msgid ""
"[INFO] [1606952588.237531933] [node_with_parameters]: cb2: Received an "
"update to parameter \"a_double_param\" of type: double: \"3.45\""
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:342
msgid "Summary"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:344
msgid ""
"You created a node with a parameter and used the ParameterEventHandler class "
"to set a callback to monitor changes to that parameter. You also used the "
"same class to monitor changes to a remote node. The ParameterEventHandler is "
"a convenient way to monitor for parameter changes so that you can then "
"respond to the updated values."
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:349
msgid "Related content"
msgstr ""

#: ../../../source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst:351
msgid ""
"To learn how to adapt ROS 1 parameter files for ROS 2, see the :doc:"
"`Migrating YAML parameter files from ROS 1 to ROS2 <../../How-To-Guides/"
"Migrating-from-ROS1/Migrating-Parameters>` tutorial."
msgstr ""
