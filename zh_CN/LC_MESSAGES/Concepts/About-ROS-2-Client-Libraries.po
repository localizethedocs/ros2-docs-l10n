# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation galactic\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 06:55+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:10
msgid "About ROS 2 client libraries"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:13
msgid "Table of Contents"
msgstr "目录"

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:16
msgid "Overview"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:18
msgid ""
"Client libraries are the APIs that allow users to implement their ROS code. "
"Using client libraries, users gain access to ROS concepts such as nodes, "
"topics, services, etc. Client libraries come in a variety of programming "
"languages so that users may write ROS code in the language that is best-"
"suited for their application. For example, you might prefer to write "
"visualization tools in Python because it makes prototyping iterations "
"faster, while for parts of your system that are concerned with efficiency, "
"the nodes might be better implemented in C++."
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:23
msgid ""
"Nodes written using different client libraries are able to share messages "
"with each other because all client libraries implement code generators that "
"provide users with the capability to interact with ROS interface files in "
"the respective language."
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:25
msgid ""
"In addition to the language-specific communication tools, client libraries "
"expose to users the core functionality that makes ROS “ROS”. For example, "
"here is a list of functionality that can typically be accessed through a "
"client library:"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:29
msgid "Names and namespaces"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:30
msgid "Time (real or simulated)"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:31
msgid "Parameters"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:32
msgid "Console logging"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:33
msgid "Threading model"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:34
msgid "Intra-process communication"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:37
msgid "Supported client libraries"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:39
msgid ""
"The C++ client library (``rclcpp``) and the Python client library "
"(``rclpy``) are both client libraries which utilize common functionality in "
"the RCL."
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:42
msgid "The ``rclcpp`` Package"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:44
msgid ""
"The ROS Client Library for C++ (``rclcpp``) is the user facing, C++ "
"idiomatic interface which provides all of the ROS client functionality like "
"creating nodes, publisher, and subscribers. ``rclcpp`` builds on top of "
"``rcl`` and the ``rosidl`` |API|, and it is designed to be used with the C++ "
"messages generated by ``rosidl_generator_cpp``."
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:47
msgid ""
"``rclcpp`` makes use of all the features of C++ and C++17 to make the "
"interface as easy to use as possible, but since it reuses the implementation "
"in ``rcl`` it is able maintain a consistent behavior with the other client "
"libraries that use the ``rcl`` |API|."
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:49
msgid ""
"The ``rclcpp`` repository is located on GitHub at `ros2/rclcpp <https://"
"github.com/ros2/rclcpp>`_ and contains the |package| ``rclcpp``. The "
"generated |API| documentation is here:"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:52
msgid "`api/rclcpp/index.html <http://docs.ros.org/en/rolling/p/rclcpp>`_"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:55
msgid "The ``rclpy`` Package"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:57
msgid ""
"The ROS Client Library for Python (``rclpy``) is the Python counterpart to "
"the C++ client library. Like the C++ client library, ``rclpy`` also builds "
"on top of the ``rcl`` C API for its implementation. The interface provides "
"an idiomatic Python experience which uses native Python types and patterns "
"like lists and context objects, but by using the ``rcl`` |API| in the "
"implementation it stays consistent with the other client libraries in terms "
"of feature parity and behavior. In addition to providing Python idiomatic "
"bindings around the ``rcl`` |API| and Python classes for each message, the "
"Python client library takes care of the execution model, using ``threading."
"Thread`` or similar to run the functions in the ``rcl`` |API|."
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:62
msgid ""
"Like C++ it generates custom Python code for each ROS message that the user "
"interacts with, but unlike C++ it eventually converts the native Python "
"message object into the C version of the message. All operations happen on "
"the Python version of the messages until they need to be passed into the "
"``rcl`` layer, at which point they are converted into the plain C version of "
"the message so it can be passed into the ``rcl`` C |API|. This is avoided if "
"possible when communicating between publishers and subscribers in the same "
"process to cut down on the conversion into and out of Python."
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:66
msgid ""
"The ``rclpy`` repository is located on GitHub at `ros2/rclpy <https://github."
"com/ros2/rclpy>`_ and contains the |package| ``rclpy``. The generated |API| "
"documentation is here:"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:69
msgid ""
"`api/rclpy/index.html <http://docs.ros2.org/foxy/api/rclpy/index.html>`_"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:73
msgid "Community-maintained"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:75
msgid ""
"While the C++ and Python client libraries are maintained by the core ROS 2 "
"team, members of the ROS 2 community maintain additional client libraries:"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:77
msgid ""
"`Ada <https://github.com/ada-ros/ada4ros2>`__ Ada binding and tools for ROS "
"2 - workspace overlay."
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:78
msgid ""
"`C <https://github.com/ros2/rclc>`__  ``rclc`` does not put a layer on top "
"of rcl but complements rcl to make rcl+rclc a feature-complete client "
"library in C. See `micro.ros.org <https://micro.ros.org/>`__ for tutorials."
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:79
msgid ""
"`JVM and Android <https://github.com/ros2-java>`__ Java and Android bindings "
"for ROS 2."
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:80
msgid ""
"`_.NET Core, UWP and C# <https://github.com/esteve/ros2_dotnet>`__ This is a "
"collection of projects (bindings, code generator, examples and more) for "
"writing ROS 2 applications for .NET Core and .NET Standard."
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:81
msgid ""
"`Node.js <https://www.npmjs.com/package/rclnodejs>`__ rclnodejs is a Node.js "
"client for the Robot Operating System (ROS 2). It provides a simple and easy "
"JavaScript API for ROS 2 programming."
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:82
msgid ""
"`Rust <https://github.com/ros2-rust/ros2_rust>`__ This is a set of projects "
"(the rclrs client library, code generator, examples and more) that enables "
"developers to write ROS 2 applications in Rust."
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:84
msgid "Older, unmaintained client libraries are:"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:86
msgid "`C# <https://github.com/firesurfer/rclcs>`__"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:87
msgid "`Objective C and iOS <https://github.com/esteve/ros2_objc>`__"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:91
msgid "Common functionality: the RCL"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:93
msgid ""
"Most of the functionality found in a client library is not specific to the "
"programming language of the client library. For example, the behavior of "
"parameters and the logic of namespaces should ideally be the same across all "
"programming languages. Because of this, rather than implementing the common "
"functionality from scratch, client libraries make use of a common core ROS "
"Client Library (RCL) interface that implements logic and behavior of ROS "
"concepts that is not language-specific. As a result, client libraries only "
"need to wrap the common functionality in the RCL with foreign function "
"interfaces. This keeps client libraries thinner and easier to develop. For "
"this reason the common RCL functionality is exposed with C interfaces as the "
"C language is typically the easiest language for client libraries to wrap."
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:100
msgid ""
"In addition to making the client libraries light-weight, an advantage of "
"having the common core is that the behavior between languages is more "
"consistent. If any changes are made to the logic/behavior of the "
"functionality in the core RCL -- namespaces, for example -- all client "
"libraries that use the RCL will have these changes reflected. Furthermore, "
"having the common core means that maintaining multiple client libraries "
"becomes less work when it comes to bug fixes."
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:104
msgid ""
"`The API documentation for the RCL can be found here. <https://docs.ros2.org/"
"latest/api/rcl/>`__"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:107
msgid "Language-specific functionality"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:109
msgid ""
"Client library concepts that require language-specific features/properties "
"are not implemented in the RCL but instead are implemented in each client "
"library. For example, threading models used by “spin” functions will have "
"implementations that are specific to the language of the client library."
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:113
msgid "Demo"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:115
msgid ""
"For a walkthrough of the message exchange between a publisher using "
"``rclpy`` and a subscriber using ``rclcpp``\\ , we encourage you to watch "
"`this ROSCon talk <https://vimeo.com/187696091>`__ starting at 17:25 `(here "
"are the slides) <https://roscon.ros.org/2016/presentations/ROSCon%202016%20-"
"%20ROS%202%20Update.pdf>`__."
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:118
msgid "Comparison to ROS 1"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:120
msgid ""
"In ROS 1, all client libraries are developed \"from the ground up\". This "
"allows for the ROS 1 Python client library to be implemented purely in "
"Python, for example, which brings benefits of such as not needing to compile "
"code. However, naming conventions and behaviors are not always consistent "
"between client libraries, bug fixes have to be done in multiple places, and "
"there is a lot of functionality that has only ever been implemented in one "
"client library (e.g. UDPROS)."
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:125
msgid "Summary"
msgstr ""

#: ../../../source/Concepts/About-ROS-2-Client-Libraries.rst:127
msgid ""
"By utilizing the common core ROS client library, client libraries written in "
"a variety of programming languages are easier to write and have more "
"consistent behavior."
msgstr ""
