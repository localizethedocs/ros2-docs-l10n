# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Open Robotics
# This file is distributed under the same license as the ros2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ros2 documentation dashing\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 06:55+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/Contributing/Quality-Guide.rst:6
msgid "Quality guide: ensuring code quality"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:10
msgid "Table of Contents"
msgstr "目次表"

#: ../../../source/Contributing/Quality-Guide.rst:12
msgid ""
"This page gives guidance about how to improve the software quality of ROS 2 "
"packages, focusing on more specific areas than the Quality Practices section "
"of the `Developer Guide <Developer-Guide>`."
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:14
msgid ""
"The sections below intend to address ROS 2 core, application and ecosystem "
"packages and the core client libraries, C++ and Python. The solutions "
"presented are motivated by design and implementation considerations to "
"improve quality attributes like \"Reliability\", \"Security\", "
"\"Maintainability\", \"Determinism\", etc. which relate to non-functional "
"requirements."
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:19
msgid "Static code analysis as part of the ament package build"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:21
msgid "**Context**:"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:24
msgid "You have developed your C++ production code."
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:25
msgid "You have created a ROS 2 package with build support with ``ament``."
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:27
msgid "**Problem**:"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:30
msgid ""
"Library level static code analysis is not run as part of the package build "
"procedure."
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:31
msgid "Library level static code analysis needs to be executed manually."
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:32
msgid ""
"Risk of forgetting to execute library level static code analysis before "
"building a new package version."
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:35
msgid "**Solution**:"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:38
msgid ""
"Use the integration capabilities of ``ament`` to execute static code "
"analysis as part of the package build procedure."
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:41
msgid "**Implementation**:"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:44
msgid "Insert into the packages ``CMakeLists.txt`` file."
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:46
msgid ""
"...\n"
"if(BUILD_TESTING)\n"
"  find_package(ament_lint_auto REQUIRED)\n"
"  ament_lint_auto_find_test_dependencies()\n"
"  ...\n"
"endif()\n"
"..."
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:57
msgid ""
"Insert the ``ament_lint`` test dependencies into the packages ``package."
"xml`` file."
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:59
msgid ""
"...\n"
"<package format=\"2\">\n"
"  ...\n"
"  <test_depend>ament_lint_auto</test_depend>\n"
"  <test_depend>ament_lint_common</test_depend>\n"
"  ...\n"
"</package>"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:69
msgid "**Examples**:"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:72
msgid "``rclcpp``:"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:74
msgid ""
"`rclcpp/rclcpp/CMakeLists.txt <https://github.com/ros2/rclcpp/blob/master/"
"rclcpp/CMakeLists.txt>`__"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:75
msgid ""
"`rclcpp/rclcpp/package.xml <https://github.com/ros2/rclcpp/blob/master/"
"rclcpp/package.xml>`__"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:77
msgid "``rclcpp_lifecycle``:"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:79
msgid ""
"`rclcpp/rclcpp_lifecycle/CMakeLists.txt <https://github.com/ros2/rclcpp/blob/"
"master/rclcpp_lifecycle/CMakeLists.txt>`__"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:80
msgid ""
"`rclcpp/rclcpp_lifecycle/package.xml <https://github.com/ros2/rclcpp/blob/"
"master/rclcpp_lifecycle/package.xml>`__"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:82
msgid "**Resulting context**:"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:85
msgid ""
"The static code analysis tools supported by ``ament`` are run as part of the "
"package build."
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:86
msgid ""
"Static code analysis tools not supported by ``ament`` need to be executed "
"separately."
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:89
msgid "Static Thread Safety Analysis via Code Annotation"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:91
#: ../../../source/Contributing/Quality-Guide.rst:230
msgid "**Context:**"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:94
msgid "You are developing/debugging your multithreaded C++ production code"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:95
msgid "You access data from multiple threads in C++ code"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:97
#: ../../../source/Contributing/Quality-Guide.rst:238
msgid "**Problem:**"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:100
#: ../../../source/Contributing/Quality-Guide.rst:241
msgid "Data races and deadlocks can lead to critical bugs."
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:102
#: ../../../source/Contributing/Quality-Guide.rst:245
msgid "**Solution:**"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:105
msgid ""
"Utilize Clang's static `Thread Safety Analysis <https://clang.llvm.org/docs/"
"ThreadSafetyAnalysis.html>`__ by annotating threaded code"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:107
msgid "**Context For Implementation:**"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:110
msgid ""
"To enable Thread Safety Analysis, code must be annotated to let the compiler "
"know more about the semantics of the code. These annotations are Clang-"
"specific attributes - e.g. ``__attribute__(capability()))``. Instead of "
"using those attributes directly, ROS 2 provides preprocessor macros that are "
"erased when using other compilers."
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:112
msgid ""
"These macros can be found in `rcpputils/thread_safety_annotations.h <https://"
"github.com/ros2/rcpputils/blob/master/include/rcpputils/"
"thread_safety_annotations.h>`__"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:114
msgid "The Thread Safety Analysis documentation states"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:115
msgid ""
"Thread safety analysis can be used with any threading library, but it does "
"require that the threading API be wrapped in classes and methods which have "
"the appropriate annotations"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:117
msgid ""
"We have decided that we want ROS 2 developers to be able to use ``std::`` "
"threading primitives directly for their development. We do not want to "
"provide our own wrapped types as is suggested above."
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:119
msgid ""
"There are three C++ standard libraries to be aware of * The GNU standard "
"library ``libstdc++`` - default on Linux, explicitly via the compiler option "
"``-stdlib=libstdc++`` * The LLVM standard library ``libc++`` (also called "
"``libcxx`` ) - default on macOS,  explicitly set by the compiler option ``-"
"stdlib=libc++`` * The Windows C++ Standard Library - not relevant to this "
"use case"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:124
msgid ""
"``libcxx`` annotates its ``std::mutex`` and ``std::lock_guard`` "
"implementations for Thread Safety Analysis. When using GNU ``libstdc++`` , "
"those annotations are not present, so Thread Safety Analysis cannot be used "
"on non-wrapped ``std::`` types."
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:126
msgid ""
"*Therefore, to use Thread Safety Analysis directly with* ``std::`` *types, "
"we must use* ``libcxx``"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:129
#: ../../../source/Contributing/Quality-Guide.rst:250
msgid "**Implementation:**"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:132
msgid ""
"The code migration suggestions here are by no means complete - when writing "
"(or annotating existing) threaded code, you are encouraged to utilize as "
"many of the annotations as is logical for your use case. However, this step-"
"by-step is a great place to start!"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:134
msgid "Enabling Analysis for Package/Target"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:136
msgid ""
"When the C++ compiler is Clang, enable the ``-Wthread-safety`` flag. Example "
"below for CMake-based projects"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:138
msgid ""
"if(CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n"
"  add_compile_options(-Wthread-safety)   # for your whole package\n"
"  target_compile_options(${MY_TARGET} PUBLIC -Wthread-safety)  # for a "
"single library or executable\n"
"endif()"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:145
msgid "Annotating Code"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:147
msgid "Step 1 - Annotate data members"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:149
msgid "Find anywhere that ``std::mutex`` is used to protect some member data"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:150
msgid ""
"Add the ``RCPPUTILS_TSA_GUARDED_BY(mutex_name)`` annotation to the data that "
"is protected by the mutex"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:152
msgid ""
"class Foo {\n"
"public:\n"
"  void incr(int amount) {\n"
"    std::lock_guard<std::mutex> lock(mutex_);\n"
"    bar += amount;\n"
"  }\n"
"\n"
"  void get() const {\n"
"    return bar;\n"
"  }\n"
"\n"
"private:\n"
"  mutable std::mutex mutex_;\n"
"  int bar RCPPUTILS_TSA_GUARDED_BY(mutex_) = 0;\n"
"};"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:170
msgid "Step 2 - Fix Warnings"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:172
msgid ""
"In the above example - ``Foo::get`` will produce a compiler warning! To fix "
"it, lock before returning bar"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:174
msgid ""
"void get() const {\n"
"  std::lock_guard<std::mutex> lock(mutex_);\n"
"  return bar;\n"
"}"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:181
msgid ""
"Step 3 - (Optional but Recommended) Refactor Existing Code to Private-Mutex "
"Pattern"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:183
msgid ""
"A recommended pattern in threaded C++ code is to always keep your ``mutex`` "
"as a ``private:`` member of the data structure. This makes data safety the "
"concern of the containing structure, offloading that responsibility from "
"users of the structure and minimizing the surface area of affected code."
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:185
msgid ""
"Making your locks private may require rethinking the interfaces to your "
"data. This is a great exercise - here are a few things to consider"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:187
msgid ""
"You may want to provide specialized interfaces for performing analysis that "
"requires complex locking logic, e.g. counting members in a filtered set of a "
"mutex-guarded map structure, instead of actually returning the underlying "
"structure to consumers"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:188
msgid ""
"Consider copying to avoid blocking, where the amount of data is small. This "
"can let other threads get on with accessing the shared data, which can "
"potentially lead to better overall performance."
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:190
msgid "Step 4 - (Optional) Enable Negative Capability Analysis"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:192
msgid ""
"https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#negative-capabilities"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:194
msgid ""
"Negative Capability Analysis lets you specify “this lock must not be held "
"when calling this function”. It can reveal potential deadlock cases that "
"other annotations cannot."
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:196
msgid ""
"Where you specified ``-Wthread-safety``, add the additional flag ``-Wthread-"
"safety-negative``"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:197
msgid ""
"On any function that acquires a lock, use the ``RCPPUTILS_TSA_REQUIRES(!"
"mutex)`` pattern"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:201
msgid "How to run the analysis"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:203
msgid ""
"The ROS CI build farm runs a nightly job with ``libcxx``, which will surface "
"any issues in the ROS 2 core stack by being marked \"Unstable\" when Thread "
"Safety Analysis raises warnings"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:204
msgid "For local runs, you have the following options, all equivalent"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:206
msgid ""
"Use the colcon `clang-libcxx mixin <https://github.com/colcon/colcon-mixin-"
"repository/blob/master/clang-libcxx.mixin>`__"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:208
msgid "``colcon build --mixin clang-libcxx``"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:209
msgid ""
"You may only use this if you have `configured mixins for your colcon "
"installation <https://github.com/colcon/colcon-mixin-repository/blob/master/"
"README.md>`__"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:211
msgid "Passing compiler to CMake"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:213
msgid ""
"``colcon build --cmake-args -DCMAKE_C_COMPILER=clang -"
"DCMAKE_CXX_COMPILER=clang++ -DCMAKE_CXX_FLAGS='-stdlib=libc++ -"
"D_LIBCPP_ENABLE_THREAD_SAFETY_ANNOTATIONS' -DFORCE_BUILD_VENDOR_PKG=ON --no-"
"warn-unused-cli``"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:215
msgid "Overriding system compiler"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:217
msgid ""
"``CC=clang CXX=clang++ colcon build --cmake-args -DCMAKE_CXX_FLAGS='-"
"stdlib=libc++ -D_LIBCPP_ENABLE_THREAD_SAFETY_ANNOTATIONS' -"
"DFORCE_BUILD_VENDOR_PKG=ON --no-warn-unused-cli``"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:221
msgid "**Resulting Context:**"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:224
msgid ""
"Potential deadlocks and race conditions will be surfaced at compile time, "
"when using Clang and ``libcxx``"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:228
msgid "Dynamic analysis (data races & deadlocks)"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:233
msgid "You are developing/debugging your multithreaded C++ production code."
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:234
msgid ""
"You use pthreads or C++11 threading + llvm libc++ (in case of "
"ThreadSanitizer)."
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:235
msgid ""
"You do not use Libc/libstdc++ static linking (in case of ThreadSanitizer)."
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:236
msgid ""
"You do not build non-position-independent executables (in case of "
"ThreadSanitizer)."
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:242
msgid ""
"Data races and deadlocks cannot be detected using static analysis (reason: "
"limitation of static analysis)."
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:243
msgid ""
"Data races and deadlocks must not show up during development debugging / "
"testing (reason: usually not all possible control paths through production "
"code exercised)."
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:248
msgid ""
"Use a dynamic analysis tool which focuses on finding data races and "
"deadlocks (here clang ThreadSanitizer)."
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:253
msgid ""
"Compile and link the production code with clang using the option ``-"
"fsanitize=thread`` (this instruments the production code)."
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:254
msgid ""
"In case different production code shall be executed during analysis consider "
"conditional compilation e.g. `ThreadSanitizers "
"_has_feature(thread_sanitizer) <https://clang.llvm.org/docs/ThreadSanitizer."
"html#has-feature-thread-sanitizer>`__."
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:255
msgid ""
"In case some code shall not be instrumented consider `ThreadSanitizers _/"
"*attribute*/_((no_sanitize(\"thread\"))) <https://clang.llvm.org/docs/"
"ThreadSanitizer.html#attribute-no-sanitize-thread>`__."
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:256
msgid ""
"In case some files shall not be instrumented consider file or function-level "
"exclusion `ThreadSanitizers blacklisting <https://clang.llvm.org/docs/"
"ThreadSanitizer.html#blacklist>`__, more specific: `ThreadSanitizers "
"Sanitizer Special Case List <https://clang.llvm.org/docs/"
"SanitizerSpecialCaseList.html>`__ or with `ThreadSanitizers "
"no_sanitize(\"thread\") <https://clang.llvm.org/docs/ThreadSanitizer."
"html#blacklist>`__ and use the option ``--fsanitize-blacklist``."
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:258
msgid "**Resulting context:**"
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:261
msgid ""
"Higher chance to find data races and deadlocks in production code before "
"deploying it."
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:262
msgid ""
"Analysis result may lack reliability, tool in beta phase stage (in case of "
"ThreadSanitizer)."
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:263
msgid ""
"Overhead due to production code instrumentation (maintenance of separate "
"branches for instrumented/not instrumented production code, etc.)."
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:264
msgid ""
"Instrumented code needs more memory per thread (in case of ThreadSanitizer)."
msgstr ""

#: ../../../source/Contributing/Quality-Guide.rst:265
msgid ""
"Instrumented code maps a lot virtual address space (in case of "
"ThreadSanitizer)."
msgstr ""
