# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Open Robotics
# This file is distributed under the same license as the ros2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ros2 documentation dashing\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 06:55+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:6
msgid "Logging and logger configuration demo"
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:8
msgid ""
"See `the logging page <../Concepts/About-Logging>` for details on available "
"functionality."
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:10
msgid ""
"In this demo, different types of log calls are shown and the severity level "
"of different loggers is configured locally and externally."
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:12
msgid "Start the demo with:"
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:14
#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:242
msgid "ros2 run logging_demo logging_demo_main"
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:18
msgid ""
"Over time you will see output from various log calls with different "
"properties. To start with you will only see output from log calls with "
"severity ``INFO`` and above (``WARN``, ``ERROR``, ``FATAL``). Note that the "
"first message will only be logged once, though the line is reached on each "
"iteration, as that is a property of the log call used for that message."
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:23
msgid "Logger level configuration: programmatically"
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:25
msgid ""
"After 10 iterations the level of the logger will be set to ``DEBUG``, which "
"will cause additional messages to be logged."
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:27
msgid ""
"Some of these debug messages cause additional functions/expressions to be "
"evaluated, which were previously skipped as ``DEBUG`` log calls were not "
"enabled. See `the source code <https://github.com/ros2/demos/blob/dashing/"
"logging_demo/src/logger_usage_component.cpp>`__ of the demo for further "
"explanation of the calls used, and see the rclcpp logging documentation for "
"a full list of supported logging calls."
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:31
msgid "Logger level configuration: externally"
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:33
msgid ""
"In the future there will be a generalized approach to external configuration "
"of loggers at runtime (similar to how `rqt_logger_level <https://wiki.ros."
"org/rqt_logger_level>`__ in ROS 1 allows logger configuration via remote "
"procedural calls). **This concept is not yet officially supported in ROS 2."
"** In the meantime, this demo provides an **example** service that can be "
"called externally to request configuration of logger levels for known names "
"of loggers in the process."
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:37
msgid ""
"The demo previously started is already running this example service. To set "
"the level of the demo's logger back to ``INFO``\\ , call the service with:"
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:40
msgid ""
"ros2 service call /config_logger logging_demo/srv/ConfigLogger "
"\"{logger_name: 'logger_usage_demo', level: INFO}\""
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:44
msgid ""
"This service call will work on any logger that is running in the process "
"provided that you know its name. This includes the loggers in the ROS 2 "
"core, such as ``rcl`` (the common client library package). To enable debug "
"logging for ``rcl``, call:"
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:48
msgid ""
"ros2 service call /config_logger logging_demo/srv/ConfigLogger "
"\"{logger_name: 'rcl', level: DEBUG}\""
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:52
msgid "You should see debug output from ``rcl`` start to show."
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:55
msgid "Using the logger config component"
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:57
msgid ""
"The server that responds to the logger configuration requests has been "
"developed as a component so that it may be added to an existing composition-"
"based system. For example, if you are using `a container to run your nodes "
"<Composition>`, to be able to configure your loggers you only need to "
"request that it additionally load the ``logging_demo::LoggerConfig`` "
"component into the container."
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:60
msgid ""
"As an example, if you want to debug the ``composition::Talker`` demo, you "
"can start the talker as normal with:"
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:62
msgid "Shell 1:"
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:64
msgid "ros2 run rclcpp_components component_container"
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:68
#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:85
msgid "Shell 2:"
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:70
msgid "ros2 component load /ComponentManager composition composition::Talker"
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:74
msgid ""
"And then when you want to enable debug logging, load the ``LoggerConfig`` "
"component with:"
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:76
msgid "Shell 2"
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:78
msgid ""
"ros2 component load /ComponentManager logging_demo logging_demo::LoggerConfig"
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:82
msgid ""
"And finally, configure all unset loggers to the debug severity by addressing "
"the empty-named logger. Note that loggers that have been specifically "
"configured to use a particular severity will not be affected by this call."
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:87
msgid ""
"ros2 service call /config_logger logging_demo/srv/ConfigLogger "
"\"{logger_name: '', level: DEBUG}\""
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:91
msgid ""
"You should see debug output from any previously unset loggers in the process "
"start to appear, including from the ROS 2 core."
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:94
msgid "Logger level configuration: command line"
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:96
msgid ""
"As of the Bouncy ROS 2 release, the severity level for loggers that have not "
"had their severity set explicitly can be configured from the command line. "
"Restart the demo including the following command line argument:"
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:99
msgid "ros2 run logging_demo logging_demo_main __log_level:=debug"
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:103
msgid ""
"This configures the default severity for any unset logger to the debug "
"severity level. You should see debug output from loggers from the demo "
"itself and from the ROS 2 core."
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:106
msgid ""
"As of the Galactic ROS 2 release, the severity level for individual loggers "
"can be configured from the command-line. Restart the demo including the "
"following command line arguments:"
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:111
msgid "Galactic and newer"
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:113
msgid ""
"ros2 run logging_demo logging_demo_main --ros-args --log-level "
"logger_usage_demo:=debug"
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:119
msgid "Console output formatting"
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:121
msgid ""
"If you would like more or less verbose formatting, you can use "
"RCUTILS_CONSOLE_OUTPUT_FORMAT environment variable. For example, to "
"additionally get the timestamp and location of the log calls, stop the demo "
"and restart it with the environment variable set:"
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:126
#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:157
#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:194
#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:222
msgid "Linux"
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:128
#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:134
msgid ""
"export RCUTILS_CONSOLE_OUTPUT_FORMAT=\"[{severity} {time}] [{name}]: "
"{message} ({function_name}() at {file_name}:{line_number})\""
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:132
#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:163
#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:200
#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:228
msgid "macOS"
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:138
#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:169
#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:206
#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:234
msgid "Windows"
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:140
msgid ""
"# set \"RCUTILS_CONSOLE_OUTPUT_FORMAT=[{severity} {time}] [{name}]: "
"{message} ({function_name}() at {file_name}:{line_number})\"\n"
"ros2 run logging_demo logging_demo_main"
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:145
msgid ""
"You should see the timestamp in seconds and the function name, filename and "
"line number additionally printed with each message. *The ``time`` option is "
"only supported as of the ROS 2 Bouncy release.*"
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:149
msgid "Console output colorizing"
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:151
msgid ""
"By default, the output is colorized when it's targeting a terminal. If you "
"would like to force enabling or disabling it, you can use the "
"``RCUTILS_COLORIZED_OUTPUT`` environment variable. For example:"
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:159
#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:165
msgid "export RCUTILS_COLORIZED_OUTPUT=0  # 1 for forcing it"
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:171
msgid ""
"# set \"RCUTILS_COLORIZED_OUTPUT=0\"\n"
"ros2 run logging_demo logging_demo_main"
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:176
msgid ""
"You should see that debug, warn, error and fatal logs aren't colorized now."
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:180
msgid ""
"In Linux and MacOS forcing colorized output means that if you redirect the "
"output to a file, the ansi escape color codes will appear on it. In windows "
"the colorization method relies on console APIs. If it is forced you will get "
"a new warning saying that colorization failed. The default behavior already "
"checks if the output is a console or not, so forcing colorization is not "
"recommended."
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:186
msgid "Default stream for console output"
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:188
msgid ""
"In Dashing, the output from DEBUG and INFO severity are printed out to "
"stdout, and the output from WARN, ERROR, and FATAL are printed to stderr. It "
"is possible to force all output to go to stdout by setting the "
"``RCUTILS_LOGGING_USE_STDOUT`` environment variable to ``1``. For example:"
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:196
#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:202
msgid "export RCUTILS_LOGGING_USE_STDOUT=1"
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:208
msgid "set \"RCUTILS_LOGGING_USE_STDOUT=1\""
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:214
msgid "Line buffered console output"
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:216
msgid ""
"By default, INFO and DEBUG log calls aren't line buffered. You can force it "
"using ``RCUTILS_CONSOLE_STDOUT_LINE_BUFFERED`` environment variable. For "
"example:"
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:224
#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:230
msgid "export RCUTILS_CONSOLE_STDOUT_LINE_BUFFERED=1"
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:236
msgid "set \"RCUTILS_CONSOLE_STDOUT_LINE_BUFFERED=1\""
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:240
msgid "Then run:"
msgstr ""

#: ../../../source/Tutorials/Logging-and-logger-configuration.rst:246
msgid ""
"The output should look as before. For details about I/O buffering, see "
"`buffering concepts <https://www.gnu.org/software/libc/manual/html_node/"
"Buffering-Concepts.html>`_."
msgstr ""
