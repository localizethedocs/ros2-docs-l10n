# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Open Robotics
# This file is distributed under the same license as the ros2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ros2 documentation dashing\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 06:55+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:4
msgid "Creating a workspace"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:6
msgid ""
"**Goal:** Create a workspace and learn how to set up an overlay for "
"development and testing."
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:8
msgid "**Tutorial level:** Beginner"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:10
msgid "**Time:** 20 minutes"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:14
msgid "Contents"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:17
msgid "Background"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:19
msgid ""
"A workspace is a directory containing ROS 2 packages. Before using ROS 2, "
"it’s necessary to source your ROS 2 installation workspace in the terminal "
"you plan to work in. This makes ROS 2’s packages available for you to use in "
"that terminal."
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:23
msgid ""
"You also have the option of sourcing an “overlay” – a secondary workspace "
"where you can add new packages without interfering with the existing ROS 2 "
"workspace that you're extending, or “underlay”. Your underlay must contain "
"the dependencies of all the packages in your overlay. Packages in your "
"overlay will override packages in the underlay. It's also possible to have "
"several layers of underlays and overlays, with each successive overlay using "
"the packages of its parent underlays."
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:30
msgid "Prerequisites"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:32
msgid ":ref:`ROS 2 installation <InstallationGuide>`"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:33
msgid ":ref:`colcon installation <Colcon>`"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:34
msgid ""
"`git installation <https://git-scm.com/book/en/v2/Getting-Started-Installing-"
"Git>`__"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:35
msgid ":ref:`turtlesim installation <Turtlesim>`"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:36
msgid ""
"Have `rosdep installed  <https://wiki.ros.org/rosdep#Installing_rosdep>`__"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:37
msgid ""
"Understanding of basic terminal commands (`here’s a guide for Linux <http://"
"www.ee.surrey.ac.uk/Teaching/Unix/>`__)"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:38
msgid "Text editor of your choice"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:41
msgid "Tasks"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:44
msgid "1 Source ROS 2 environment"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:46
msgid ""
"Your main ROS 2 installation will be your underlay for this tutorial. (Keep "
"in mind that an underlay does not necessarily have to be the main ROS 2 "
"installation.)"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:49
msgid ""
"Depending on how you installed ROS 2 (from source or binaries), and which "
"platform you’re on, your exact source command will vary:"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:53
#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:86
#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:141
#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:183
#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:217
#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:272
#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:296
#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:318
msgid "Linux"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:55
#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:274
msgid "source /opt/ros/dashing/setup.bash"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:59
#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:93
#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:147
#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:189
#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:223
#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:278
#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:302
#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:324
msgid "macOS"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:61
#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:280
msgid ". ~/ros2_install/ros2-osx/setup.bash"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:65
#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:100
#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:153
#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:193
#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:229
#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:284
#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:308
#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:330
msgid "Windows"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:67
msgid ""
"Remember to use a ``x64 Native Tools Command Prompt for VS 2019`` for "
"executing the following commands, as we are going to build a workspace."
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:69
#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:288
msgid "call C:\\dev\\ros2\\local_setup.bat"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:73
msgid ""
"Consult the :ref:`installation guide <InstallationGuide>` you followed if "
"these commands don’t work for you."
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:78
msgid "2 Create a new directory"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:80
msgid ""
"Best practice is to create a new directory for every new workspace. The name "
"doesn’t matter, but it is helpful to have it indicate the purpose of the "
"workspace. Let’s choose the directory name ``dev_ws``, for “development "
"workspace”:"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:88
#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:95
msgid ""
"mkdir -p ~/dev_ws/src\n"
"cd ~/dev_ws/src"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:102
msgid ""
"md \\dev_ws\\src\n"
"cd \\dev_ws\\src"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:108
msgid ""
"Another best practice is to put any packages in your workspace into the "
"``src`` directory. The above code creates a ``src`` directory inside "
"``dev_ws`` and then navigates into it."
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:113
msgid "3 Clone a sample repo"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:115
msgid "Ensure you’re still in the ``dev_ws/src`` directory before you clone."
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:117
msgid ""
"In the rest of the beginner developer tutorials, you will create your own "
"packages, but for now you will practice putting a workspace together using "
"existing packages."
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:119
msgid ""
"The existing packages you will use are from the ``ros_tutorials`` repository "
"(repo). If you went through the \"Beginner: CLI Tools\" tutorials, you'll be "
"familiar with ``turtlesim``, one of the packages in this repo."
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:122
msgid ""
"You can see the repo `on GitHub <https://github.com/ros/ros_tutorials/>`__."
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:124
msgid ""
"Notice the “Branch” drop down list to the left above the directories list. "
"When you clone this repo, add the ``-b`` argument followed by the branch "
"that corresponds with your ROS 2 distro."
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:127
msgid ""
"In the ``dev_ws/src`` directory, run the following command for the distro "
"you're using:"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:129
msgid "git clone https://github.com/ros/ros_tutorials.git -b dashing-devel"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:134
msgid ""
"Now ``ros_tutorials`` is cloned in your workspace. If you view the contents "
"of ``dev_ws/src`` now, you will see the new ``ros_tutorials`` directory."
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:137
msgid "To see the packages inside ``ros_tutorials``, enter the command:"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:143
#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:149
msgid "ls ros_tutorials"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:155
msgid "dir ros_tutorials"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:160
msgid "Which will list the contents of the repo you just cloned, like so:"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:162
msgid "roscpp_tutorials  rospy_tutorials  ros_tutorials  turtlesim"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:166
msgid ""
"The first three packages are being ignored; ``turtlesim`` is the only actual "
"ROS 2 package in this repo."
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:168
msgid ""
"Now you have populated your workspace with a sample package, but it isn’t a "
"fully-functional workspace yet. You need to resolve dependencies and build "
"the workspace first."
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:173
msgid "4 Resolve dependencies"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:175
msgid ""
"Before building the workspace, you need to resolve package dependencies. You "
"may have all the dependencies already, but best practice is to check for "
"dependencies every time you clone. You wouldn’t want a build to fail after a "
"long wait because of missing dependencies."
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:179
msgid ""
"From the root of your workspace (``dev_ws``), run the following command:"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:185
msgid "rosdep install -i --from-path src --rosdistro dashing -y"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:191
#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:195
msgid ""
"rosdep only runs on Linux, so you can skip ahead to section \"5 Build the "
"workspace with colcon\"."
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:197
msgid ""
"If you installed ROS 2 on Linux from source or the \"fat\" archive, you will "
"need to use the rosdep command from their installation instructions. Here "
"are the :ref:`from-source rosdep section <linux-development-setup-install-"
"dependencies-using-rosdep>` and the :ref:`\"fat\" archive rosdep section "
"<linux-install-binary-install-missing-dependencies>`."
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:200
msgid "If you already have all your dependencies, the console will return:"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:202
msgid "#All required rosdeps installed successfully"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:206
msgid ""
"Packages declare their dependencies in the package.xml file (you will learn "
"more about packages in the next tutorial). This command walks through those "
"declarations and installs the ones that are missing. You can learn more "
"about ``rosdep`` in another tutorial (coming soon)."
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:211
msgid "5 Build the workspace with colcon"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:213
msgid ""
"From the root of your workspace (``dev_ws``), you can now build your "
"packages using the command:"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:219
#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:225
msgid "colcon build"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:231
msgid "colcon build --merge-install"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:235
msgid ""
"Windows doesn’t allow long paths, so ``merge-install`` will combine all the "
"paths into the ``install`` directory."
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:237
msgid "The console will return the following message:"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:239
msgid ""
"Starting >>> turtlesim\n"
"Finished <<< turtlesim [5.49s]\n"
"\n"
"Summary: 1 package finished [5.58s]"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:247
msgid "Other useful arguments for ``colcon build``:"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:249
msgid ""
"``--packages-up-to`` builds the package you want, plus all its dependencies, "
"but not the whole workspace (saves time)"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:250
msgid ""
"``--symlink-install`` saves you from having to rebuild every time you tweak "
"python scripts"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:251
msgid ""
"``--event-handlers console_direct+`` shows console output while building "
"(can otherwise be found in the ``log`` directory)"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:253
msgid ""
"Once the build is finished, enter ``ls`` in the workspace root (``~/"
"dev_ws``) and you will see that colcon has created new directories:"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:255
msgid "build  install  log  src"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:259
msgid ""
"The ``install`` directory is where your workspace’s setup files are, which "
"you can use to source your overlay."
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:263
msgid "6 Source the overlay"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:265
msgid ""
"Before sourcing the overlay, it is very important that you open a new "
"terminal, separate from the one where you built the workspace. Sourcing an "
"overlay in the same terminal where you built, or likewise building where an "
"overlay is sourced, may create complex issues."
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:268
msgid ""
"In the new terminal, source your main ROS 2 environment as the “underlay”, "
"so you can build the overlay “on top of” it:"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:286
msgid ""
"In this case you can use a normal command prompt, as we are not going to "
"build any workspace in this terminal."
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:292
msgid "Go into the root of your workspace:"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:298
#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:304
msgid "cd ~/dev_ws"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:310
msgid "cd \\dev_ws"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:314
msgid "In the root, source your overlay:"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:320
#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:326
msgid ". install/local_setup.bash"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:332
msgid "call install/setup.bat"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:338
msgid ""
"Sourcing the ``local_setup`` of the overlay will only add the packages "
"available in the overlay to your environment. ``setup`` sources the overlay "
"as well as the underlay it was created in, allowing you to utilize both "
"workspaces."
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:341
msgid ""
"So, sourcing your main ROS 2 installation's ``setup`` and then the "
"``dev_ws`` overlay's ``local_setup``, like you just did, is the same as just "
"sourcing ``dev_ws``'s ``setup``, because that includes the environment of "
"the underlay it was created in."
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:344
msgid "Now you can run the ``turtlesim`` package from the overlay:"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:346
#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:372
#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:385
msgid "ros2 run turtlesim turtlesim_node"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:350
msgid ""
"But how can you tell that this is the overlay turtlesim running, and not "
"your main installation's turtlesim?"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:352
msgid "Let’s modify turtlesim in the overlay so you can see the effects:"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:354
msgid ""
"You can modify and rebuild packages in the overlay separately from the "
"underlay."
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:355
msgid "The overlay takes precedence over the underlay."
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:359
msgid "7 Modify the overlay"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:361
msgid ""
"You can modify ``turtlesim`` in your overlay by editing the title bar on the "
"turtlesim window. To do this, locate the ``turtle_frame.cpp`` file in ``~/"
"dev_ws/src/ros_tutorials/turtlesim/src``. Open ``turtle_frame.cpp`` with "
"your preferred text editor."
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:365
msgid ""
"On line 52 you will see the function ``setWindowTitle(\"TurtleSim\");``. "
"Change the value ``”TurtleSim”`` to ``”MyTurtleSim”``, and save the file."
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:368
msgid ""
"Return to first terminal where you ran ``colcon build`` earlier and run it "
"again."
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:370
msgid ""
"Return to the second terminal (where the overlay is sourced) and run "
"turtlesim again:"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:376
msgid ""
"You will see the title bar on the turtlesim window now says “MyTurtleSim”."
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:380
msgid ""
"Even though your main ROS 2 environment was sourced in this terminal "
"earlier, the overlay of your ``dev_ws`` environment takes precedence over "
"the contents of the underlay."
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:382
msgid ""
"To see that your underlay is still intact, open a brand new terminal and "
"source only your ROS 2 installation. Run turtlesim again:"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:391
msgid ""
"You can see that modifications in the overlay did not actually affect "
"anything in the underlay."
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:395
msgid "Summary"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:396
msgid ""
"In this tutorial, you sourced your main ROS 2 distro install as your "
"underlay, and created an overlay by cloning and building packages in a new "
"workspace. The overlay gets prepended to the path, and takes precedence over "
"the underlay, as you saw with your modified turtlesim."
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:399
msgid ""
"Using overlays is recommended for working on a small number of packages, so "
"you don’t have to put everything in the same workspace and rebuild a huge "
"workspace on every iteration."
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:402
msgid "Next steps"
msgstr ""

#: ../../../source/Tutorials/Workspace/Creating-A-Workspace.rst:404
msgid ""
"Now that you understand the details behind creating, building and sourcing "
"your own workspace, you can learn how to :ref:`create your own packages "
"<CreatePkg>`."
msgstr ""
