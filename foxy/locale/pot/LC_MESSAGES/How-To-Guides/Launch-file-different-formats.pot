# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation foxy\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 06:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:6
msgid "Using Python, XML, and YAML for ROS 2 Launch Files"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:10
msgid "Table of Contents"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:12
msgid ""
"ROS 2 launch files can be written in Python, XML, and YAML. This guide shows "
"how to use these different formats to accomplish the same task, as well as "
"has some discussion on when to use each format."
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:16
msgid "Launch file examples"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:18
msgid ""
"Below is a launch file implemented in Python, XML, and YAML. Each launch "
"file performs the following actions:"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:21
msgid "Setup command line arguments with defaults"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:22
msgid "Include another launch file"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:23
msgid "Include another launch file in another namespace"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:24
msgid "Start a node and setting its namespace"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:25
msgid ""
"Start a node, setting its namespace, and setting parameters in that node "
"(using the args)"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:26
msgid "Create a node to remap messages from one topic to another"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:30
msgid "Python"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:32
msgid ""
"# example.launch.py\n"
"\n"
"import os\n"
"\n"
"from ament_index_python import get_package_share_directory\n"
"\n"
"from launch import LaunchDescription\n"
"from launch.actions import DeclareLaunchArgument\n"
"from launch.actions import IncludeLaunchDescription\n"
"from launch.actions import GroupAction\n"
"from launch.launch_description_sources import PythonLaunchDescriptionSource\n"
"from launch.substitutions import LaunchConfiguration\n"
"from launch.substitutions import TextSubstitution\n"
"from launch_ros.actions import Node\n"
"from launch_ros.actions import PushRosNamespace\n"
"\n"
"\n"
"def generate_launch_description():\n"
"\n"
"    # args that can be set from the command line or a default will be used\n"
"    background_r_launch_arg = DeclareLaunchArgument(\n"
"        \"background_r\", default_value=TextSubstitution(text=\"0\")\n"
"    )\n"
"    background_g_launch_arg = DeclareLaunchArgument(\n"
"        \"background_g\", default_value=TextSubstitution(text=\"255\")\n"
"    )\n"
"    background_b_launch_arg = DeclareLaunchArgument(\n"
"        \"background_b\", default_value=TextSubstitution(text=\"0\")\n"
"    )\n"
"    chatter_ns_launch_arg = DeclareLaunchArgument(\n"
"        \"chatter_ns\", default_value=TextSubstitution(text=\"my/chatter/"
"ns\")\n"
"    )\n"
"\n"
"    # include another launch file\n"
"    launch_include = IncludeLaunchDescription(\n"
"        PythonLaunchDescriptionSource(\n"
"            os.path.join(\n"
"                get_package_share_directory('demo_nodes_cpp'),\n"
"                'launch/topics/talker_listener.launch.py'))\n"
"    )\n"
"    # include another launch file in the chatter_ns namespace\n"
"    launch_include_with_namespace = GroupAction(\n"
"        actions=[\n"
"            # push-ros-namespace to set namespace of included nodes\n"
"            PushRosNamespace(LaunchConfiguration('chatter_ns')),\n"
"            IncludeLaunchDescription(\n"
"                PythonLaunchDescriptionSource(\n"
"                    os.path.join(\n"
"                        get_package_share_directory('demo_nodes_cpp'),\n"
"                        'launch/topics/talker_listener.launch.py'))\n"
"            ),\n"
"        ]\n"
"    )\n"
"\n"
"    # start a turtlesim_node in the turtlesim1 namespace\n"
"    turtlesim_node = Node(\n"
"            package='turtlesim',\n"
"            namespace='turtlesim1',\n"
"            executable='turtlesim_node',\n"
"            name='sim'\n"
"        )\n"
"\n"
"    # start another turtlesim_node in the turtlesim2 namespace\n"
"    # and use args to set parameters\n"
"    turtlesim_node_with_parameters = Node(\n"
"            package='turtlesim',\n"
"            namespace='turtlesim2',\n"
"            executable='turtlesim_node',\n"
"            name='sim',\n"
"            parameters=[{\n"
"                \"background_r\": LaunchConfiguration('background_r'),\n"
"                \"background_g\": LaunchConfiguration('background_g'),\n"
"                \"background_b\": LaunchConfiguration('background_b'),\n"
"            }]\n"
"        )\n"
"\n"
"    # perform remap so both turtles listen to the same command topic\n"
"    forward_turtlesim_commands_to_second_turtlesim_node = Node(\n"
"            package='turtlesim',\n"
"            executable='mimic',\n"
"            name='mimic',\n"
"            remappings=[\n"
"                ('/input/pose', '/turtlesim1/turtle1/pose'),\n"
"                ('/output/cmd_vel', '/turtlesim2/turtle1/cmd_vel'),\n"
"            ]\n"
"        )\n"
"\n"
"    return LaunchDescription([\n"
"        background_r_launch_arg,\n"
"        background_g_launch_arg,\n"
"        background_b_launch_arg,\n"
"        chatter_ns_launch_arg,\n"
"        launch_include,\n"
"        launch_include_with_namespace,\n"
"        turtlesim_node,\n"
"        turtlesim_node_with_parameters,\n"
"        forward_turtlesim_commands_to_second_turtlesim_node,\n"
"    ])"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:133
msgid "XML"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:135
msgid ""
"<!-- example.launch.xml -->\n"
"\n"
"<launch>\n"
"\n"
"  <!-- args that can be set from the command line or a default will be used "
"-->\n"
"  <arg name=\"background_r\" default=\"0\"/>\n"
"  <arg name=\"background_g\" default=\"255\"/>\n"
"  <arg name=\"background_b\" default=\"0\"/>\n"
"  <arg name=\"chatter_ns\" default=\"my/chatter/ns\"/>\n"
"\n"
"  <!-- include another launch file -->\n"
"  <include file=\"$(find-pkg-share demo_nodes_cpp)/launch/topics/"
"talker_listener.launch.py\"/>\n"
"  <!-- include another launch file in the chatter_ns namespace-->\n"
"  <group>\n"
"    <!-- push-ros-namespace to set namespace of included nodes -->\n"
"    <push-ros-namespace namespace=\"$(var chatter_ns)\"/>\n"
"    <include file=\"$(find-pkg-share demo_nodes_cpp)/launch/topics/"
"talker_listener.launch.py\"/>\n"
"  </group>\n"
"\n"
"  <!-- start a turtlesim_node in the turtlesim1 namespace -->\n"
"  <node pkg=\"turtlesim\" exec=\"turtlesim_node\" name=\"sim\" "
"namespace=\"turtlesim1\"/>\n"
"  <!-- start another turtlesim_node in the turtlesim2 namespace\n"
"      and use args to set parameters -->\n"
"  <node pkg=\"turtlesim\" exec=\"turtlesim_node\" name=\"sim\" "
"namespace=\"turtlesim2\">\n"
"    <param name=\"background_r\" value=\"$(var background_r)\"/>\n"
"    <param name=\"background_g\" value=\"$(var background_g)\"/>\n"
"    <param name=\"background_b\" value=\"$(var background_b)\"/>\n"
"  </node>\n"
"  <!-- perform remap so both turtles listen to the same command topic -->\n"
"  <node pkg=\"turtlesim\" exec=\"mimic\" name=\"mimic\">\n"
"    <remap from=\"/input/pose\" to=\"/turtlesim1/turtle1/pose\"/>\n"
"    <remap from=\"/output/cmd_vel\" to=\"/turtlesim2/turtle1/cmd_vel\"/>\n"
"  </node>\n"
"</launch>"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:172
msgid "YAML"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:174
msgid ""
"# example.launch.yaml\n"
"\n"
"launch:\n"
"\n"
"# args that can be set from the command line or a default will be used\n"
"- arg:\n"
"    name: \"background_r\"\n"
"    default: \"0\"\n"
"- arg:\n"
"    name: \"background_g\"\n"
"    default: \"255\"\n"
"- arg:\n"
"    name: \"background_b\"\n"
"    default: \"0\"\n"
"- arg:\n"
"    name: \"chatter_ns\"\n"
"    default: \"my/chatter/ns\"\n"
"\n"
"\n"
"# include another launch file\n"
"- include:\n"
"    file: \"$(find-pkg-share demo_nodes_cpp)/launch/topics/talker_listener."
"launch.py\"\n"
"\n"
"# include another launch file in the chatter_ns namespace\n"
"- group:\n"
"    - push-ros-namespace:\n"
"        namespace: \"$(var chatter_ns)\"\n"
"    - include:\n"
"        file: \"$(find-pkg-share demo_nodes_cpp)/launch/topics/"
"talker_listener.launch.py\"\n"
"\n"
"# start a turtlesim_node in the turtlesim1 namespace\n"
"- node:\n"
"    pkg: \"turtlesim\"\n"
"    exec: \"turtlesim_node\"\n"
"    name: \"sim\"\n"
"    namespace: \"turtlesim1\"\n"
"\n"
"# start another turtlesim_node in the turtlesim2 namespace and use args to "
"set parameters\n"
"- node:\n"
"    pkg: \"turtlesim\"\n"
"    exec: \"turtlesim_node\"\n"
"    name: \"sim\"\n"
"    namespace: \"turtlesim2\"\n"
"    param:\n"
"    -\n"
"      name: \"background_r\"\n"
"      value: \"$(var background_r)\"\n"
"    -\n"
"      name: \"background_g\"\n"
"      value: \"$(var background_g)\"\n"
"    -\n"
"      name: \"background_b\"\n"
"      value: \"$(var background_b)\"\n"
"\n"
"# perform remap so both turtles listen to the same command topic\n"
"- node:\n"
"    pkg: \"turtlesim\"\n"
"    exec: \"mimic\"\n"
"    name: \"mimic\"\n"
"    remap:\n"
"    -\n"
"        from: \"/input/pose\"\n"
"        to: \"/turtlesim1/turtle1/pose\"\n"
"    -\n"
"        from: \"/output/cmd_vel\"\n"
"        to: \"/turtlesim2/turtle1/cmd_vel\""
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:244
msgid "Using the Launch files from the command line"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:247
msgid "Launching"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:249
msgid ""
"Any of the launch files above can be run with ``ros2 launch``. To try them "
"locally, you can either create a new package and use"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:252
msgid "ros2 launch <package_name> <launch_file_name>"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:256
msgid "or run the file directly by specifying the path to the launch file"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:258
msgid "ros2 launch <path_to_launch_file>"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:263
msgid "Setting arguments"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:265
msgid ""
"To set the arguments that are passed to the launch file, you should use "
"``key:=value`` syntax. For example, you can set the value of "
"``background_r`` in the following way:"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:268
msgid "ros2 launch <package_name> <launch_file_name> background_r:=255"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:272
msgid "or"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:274
msgid "ros2 launch <path_to_launch_file> background_r:=255"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:279
msgid "Controlling the turtles"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:281
msgid ""
"To test that the remapping is working, you can control the turtles by "
"running the following command in another terminal:"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:283
msgid ""
"ros2 run turtlesim turtle_teleop_key --ros-args --remap __ns:=/turtlesim1"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:289
msgid "Python, XML, or YAML: Which should I use?"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:293
msgid ""
"Launch files in ROS 1 were written in XML, so XML may be the most familiar "
"to people coming from ROS 1. To see what's changed, you can visit :doc:"
"`Launch-files-migration-guide`."
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:296
msgid ""
"For most applications the choice of which ROS 2 launch format comes down to "
"developer preference. However, if your launch file requires flexibility that "
"you cannot achieve with XML or YAML, you can use Python to write your launch "
"file. Using Python for ROS 2 launch is more flexible because of following "
"two reasons:"
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:300
msgid ""
"Python is a scripting language, and thus you can leverage the language and "
"its libraries in your launch files."
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:301
msgid ""
"`ros2/launch <https://github.com/ros2/launch>`_ (general launch features) "
"and `ros2/launch_ros <https://github.com/ros2/launch_ros>`_ (ROS 2 specific "
"launch features) are written in Python and thus you have lower level access "
"to launch features that may not be exposed by XML and YAML."
msgstr ""

#: ../../../source/How-To-Guides/Launch-file-different-formats.rst:303
msgid ""
"That being said, a launch file written in Python may be more complex and "
"verbose than one in XML or YAML."
msgstr ""
