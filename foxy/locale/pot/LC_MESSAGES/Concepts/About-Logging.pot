# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation foxy\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 06:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/Concepts/About-Logging.rst:6
msgid "About logging and logger configuration"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:11
msgid "Table of Contents"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:14
msgid "Overview"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:16
msgid ""
"The logging subsystem in ROS 2 aims to deliver logging messages to a variety "
"of targets, including:"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:18
msgid "To the console (if one is attached)"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:19
msgid "To log files on disk (if local storage is available)"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:20
msgid "To the ``/rosout`` topic on the ROS 2 network"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:22
msgid ""
"By default, log messages in ROS 2 nodes will go out to the console (on "
"stderr), to log files on disk, and to the ``/rosout`` topic on the ROS 2 "
"network. All of the targets can be individually enabled or disabled on a per-"
"node basis."
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:25
msgid ""
"The rest of this document will go over some of the ideas behind the logging "
"subsystem."
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:28
msgid "Severity level"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:30
msgid ""
"Log messages have a severity level associated with them: ``DEBUG``, "
"``INFO``, ``WARN``, ``ERROR`` or ``FATAL``, in ascending order."
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:32
msgid ""
"A logger will only process log messages with severity at or higher than a "
"specified level chosen for the logger."
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:34
msgid ""
"Each node has a logger associated with it that automatically includes the "
"node's name and namespace. If the node's name is externally remapped to "
"something other than what is defined in the source code, it will be "
"reflected in the logger name. Non-node loggers can also be created that use "
"a specific name."
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:38
msgid ""
"Logger names represent a hierarchy. If the level of a logger named \"abc."
"def\" is unset, it will defer to the level of its parent named \"abc\", and "
"if that level is also unset, the default logger level will be used. When the "
"level of logger \"abc\" is changed, all of its descendants (e.g. \"abc."
"def\", \"abc.ghi.jkl\") will have their level impacted unless their level "
"has been explicitly set."
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:43
msgid "APIs"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:45
msgid ""
"These are the APIs that end users of the ROS 2 logging infrastructure should "
"use, split up by client library."
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:49
#: ../../../source/Concepts/About-Logging.rst:185
msgid "C++"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:51
msgid ""
"``RCLCPP_{DEBUG,INFO,WARN,ERROR,FATAL}`` - output the given printf-style "
"message every time this line is hit"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:52
msgid ""
"``RCLCPP_{DEBUG,INFO,WARN,ERROR,FATAL}_ONCE`` - output the given printf-"
"style message only the first time this line is hit"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:53
msgid ""
"``RCLCPP_{DEBUG,INFO,WARN,ERROR,FATAL}_EXPRESSION`` - output the given "
"printf-style message only if the given expression is true"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:54
msgid ""
"``RCLCPP_{DEBUG,INFO,WARN,ERROR,FATAL}_FUNCTION`` - output the given printf-"
"style message only if the given function returns true"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:55
msgid ""
"``RCLCPP_{DEBUG,INFO,WARN,ERROR,FATAL}_SKIPFIRST`` - output the given printf-"
"style message all but the first time this line is hit"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:56
msgid ""
"``RCLCPP_{DEBUG,INFO,WARN,ERROR,FATAL}_THROTTLE`` - output the given printf-"
"style message no more than the given rate in integer milliseconds"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:57
msgid ""
"``RCLCPP_{DEBUG,INFO,WARN,ERROR,FATAL}_SKIPFIRST_THROTTLE`` - output the "
"given printf-style message no more than the given rate in integer "
"milliseconds, but skip the first"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:58
msgid ""
"``RCLCPP_{DEBUG,INFO,WARN,ERROR,FATAL}_STREAM`` - output the given C++ "
"stream-style message every time this line is hit"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:59
msgid ""
"``RCLCPP_{DEBUG,INFO,WARN,ERROR,FATAL}_STREAM_ONCE`` - output the given C++ "
"stream-style message only the first time this line is hit"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:60
msgid ""
"``RCLCPP_{DEBUG,INFO,WARN,ERROR,FATAL}_STREAM_EXPRESSION`` - output the "
"given C++ stream-style message only if the given expression is true"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:61
msgid ""
"``RCLCPP_{DEBUG,INFO,WARN,ERROR,FATAL}_STREAM_FUNCTION`` - output the given "
"C++ stream-style message only if the given function returns true"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:62
msgid ""
"``RCLCPP_{DEBUG,INFO,WARN,ERROR,FATAL}_STREAM_SKIPFIRST`` - output the given "
"C++ stream-style message all but the first time this line is hit"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:63
msgid ""
"``RCLCPP_{DEBUG,INFO,WARN,ERROR,FATAL}_STREAM_THROTTLE`` - output the given "
"C++ stream-style message no more than the given rate in integer milliseconds"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:64
msgid ""
"``RCLCPP_{DEBUG,INFO,WARN,ERROR,FATAL}_STREAM_SKIPFIRST_THROTTLE`` - output "
"the given C++ stream-style message no more than the given rate in integer "
"milliseconds, but skip the first"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:66
msgid ""
"Each of the above APIs takes an ``rclcpp::Logger`` object as the first "
"argument. This can be pulled from the node API by calling ``node-"
">get_logger()`` (recommended), or by constructing a stand-alone ``rclcpp::"
"Logger`` object."
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:69
msgid ""
"``rcutils_logging_set_logger_level`` - Set the logging level for a "
"particular logger name to the given severity level"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:70
msgid ""
"``rcutils_logging_get_logger_effective_level`` - Given a logger name, return "
"the logger level (which may be unset)"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:72
#: ../../../source/Concepts/About-Logging.rst:191
msgid "Python"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:74
msgid ""
"``logger.{debug,info,warning,error,fatal}`` - output the given Python string "
"to the logging infrastructure.  The calls accept the following keyword args "
"to control behavior:"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:76
msgid ""
"``throttle_duration_sec`` - if not None, the duration of the throttle "
"interval in floating-point seconds"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:77
msgid ""
"``skip_first`` - if True, output the message all but the first time this "
"line is hit"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:78
msgid ""
"``once`` - if True, only output the message the first time this line is hit"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:80
msgid ""
"``rclpy.logging.set_logger_level`` - Set the logging level for a particular "
"logger name to the given severity level"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:81
msgid ""
"``rclpy.logging.get_logger_effective_level`` - Given a logger name, return "
"the logger level (which may be unset)"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:84
msgid "Configuration"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:86
msgid ""
"Since ``rclcpp`` and ``rclpy`` use the same underlying logging "
"infrastructure, the configuration options are the same."
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:89
msgid "Environment variables"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:91
msgid ""
"The following environment variables control some aspects of the ROS 2 "
"loggers. For each of the environment settings, note that this is a process-"
"wide setting, so it applies to all nodes in that process."
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:94
msgid ""
"``ROS_LOG_DIR`` - Control the logging directory that is used for writing "
"logging messages to disk (if that is enabled).  If non-empty, use the exact "
"directory as specified in this variable.  If empty, use the contents of the "
"``ROS_HOME`` environment variable to construct a path of the form "
"``$ROS_HOME/.log``.  In all cases, the ``~`` character is expanded to the "
"user's HOME directory."
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:95
msgid ""
"``ROS_HOME`` - Control the home directory that is used for various ROS "
"files, including logging and config files.  In the context of logging, this "
"variable is used to construct a path to a directory for log files.  If non-"
"empty, use the contents of this variable for the ROS_HOME path.  In all "
"cases, the ``~`` character is expanded to the users's HOME directory."
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:96
msgid ""
"``RCUTILS_LOGGING_USE_STDOUT`` - Control what stream output messages go to.  "
"If this is unset or 0, use stderr.  If this is 1, use stdout."
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:97
msgid ""
"``RCUTILS_LOGGING_BUFFERED_STREAM`` - Control whether the logging stream (as "
"configured in ``RCUTILS_LOGGING_USE_STDOUT``) should be line buffered or "
"unbuffered.  If this is unset, use the default of the stream (generally line "
"buffered for stdout, and unbuffered for stderr).  If this is 0, force the "
"stream to be unbuffered.  If this is 1, force the stream to be line buffered."
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:98
msgid ""
"``RCUTILS_COLORIZED_OUTPUT`` - Control whether colors are used when "
"outputting messages.  If unset, automatically determine based on the "
"platform and whether the console is a TTY.  If 0, force disable using colors "
"for output.  If 1, force enable using colors for output."
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:99
msgid ""
"``RCUTILS_CONSOLE_OUTPUT_FORMAT`` - Control the fields that are output for "
"each log message.  The available fields are:"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:101
msgid "``{severity}`` - The severity level."
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:102
msgid "``{name}`` - The name of the logger (may be empty)."
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:103
msgid "``{message}`` - The log message (may be empty)."
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:104
msgid ""
"``{function_name}`` - The function name this was called from (may be empty)."
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:105
msgid "``{file_name}`` - The file name this was called from (may be empty)."
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:106
msgid "``{time}`` - The time in seconds since the epoch."
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:107
msgid "``{time_as_nanoseconds}`` - The time in nanoseconds since the epoch."
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:108
msgid ""
"``{line_number}`` - The line number this was called from (may be empty)."
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:110
msgid ""
"If no format is given, a default of ``[{severity}] [{time}] [{name}]: "
"{message}`` is used."
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:114
msgid "Node creation"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:116
msgid ""
"When initializing a ROS 2 node, it is possible to control some aspects of "
"the behavior via node options. Since these are per-node options, they can be "
"set differently for different nodes even when the nodes are composed into a "
"single process."
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:119
msgid ""
"``log_levels`` - The log level to use for a component within this particular "
"node.  This can be set with the following: ``ros2 run demo_nodes_cpp talker "
"--ros-args --log-level talker:=DEBUG``"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:120
msgid ""
"``external_log_config_file`` - The external file to use to configure the "
"backend logger.  If it is NULL, the default configuration will be used.  "
"Note that the format of this file is backend-specific (and is currently "
"unimplemented for the default backend logger of spdlog).  This can be set "
"with the following: ``ros2 run demo_nodes_cpp talker --ros-args --log-config-"
"file log-config.txt``"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:121
msgid ""
"``log_stdout_disabled`` - Whether to disable writing log messages to the "
"console.  This can be done with the following: ``ros2 run demo_nodes_cpp "
"talker --ros-args --disable-stdout-logs``"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:122
msgid ""
"``log_rosout_disabled`` - Whether to disable writing log messages out to ``/"
"rosout``.  This can significantly save on network bandwidth, but external "
"observers will not be able to monitor logging.  This can be done with the "
"following: ``ros2 run demo_nodes_cpp talker --ros-args --disable-rosout-"
"logs``"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:123
msgid ""
"``log_ext_lib_disabled`` - Whether to completely disable the use of an "
"external logger.  This may be faster in some cases, but means that logs will "
"not be written to disk.  This can be done with the following: ``ros2 run "
"demo_nodes_cpp talker --ros-args --disable-external-lib-logs``"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:126
msgid "Logging subsystem design"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:128
msgid ""
"The image below shows the five main pieces to the logging subsystem and how "
"they interact."
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:None
msgid "ROS 2 logging architecture"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:136
msgid "rcutils"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:138
msgid ""
"``rcutils`` has a logging implementation that can format log messages "
"according to a certain format (see ``Configuration`` above), and output "
"those log messages to a console. ``rcutils`` implements a complete logging "
"solution, but allows higher-level components to insert themselves into the "
"logging infrastructure in a dependency-injection model. This will become "
"more evident when we talk about the ``rcl`` layer below."
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:142
msgid ""
"Note that this is a *per-process* logging implementation, so anything that "
"is configured at this level will affect the entire process, not just "
"individual nodes."
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:145
msgid "rcl_logging_spdlog"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:147
msgid ""
"``rcl_logging_spdlog`` implements the ``rcl_logging_interface`` API, and "
"thus provides external logging services to the ``rcl`` layer. In particular, "
"the ``rcl_logging_spdlog`` implementation takes formatted log messages and "
"writes them out to log files on disk using the ``spdlog`` library, typically "
"within ``~/.ros/log`` (though this is configurable; see ``Configuration`` "
"above)."
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:151
msgid "rcl"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:153
msgid ""
"The logging subsystem in ``rcl`` uses ``rcutils`` and ``rcl_logging_spdlog`` "
"to provide the bulk of the ROS 2 logging services. When log messages come "
"in, ``rcl`` decides where to send them. There are 3 main places that logging "
"messages can be delivered; an individual node may have any combination of "
"them enabled:"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:157
msgid "To the console via the ``rcutils`` layer"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:158
msgid "To disk via the ``rcl_logging_spdlog`` layer"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:159
msgid "To the ``/rosout`` topic on the ROS 2 network via the RMW layer"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:162
msgid "rclcpp"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:164
msgid ""
"This is the main ROS 2 C++ API which sits atop the ``rcl`` API. In the "
"context of logging, ``rclcpp`` provides the ``RCLCPP_`` logging macros; see "
"``APIs`` above for a complete list. When one of the ``RCLCPP_`` macros runs, "
"it checks the current severity level of the node against the severity level "
"of the macro. If the severity level of the macro is greater than or equal to "
"the node severity level, the message will be formatted and output to all of "
"the places that are currently configured. Note that ``rclcpp`` uses a global "
"mutex for log calls, so all logging calls within the same process end up "
"being single-threaded."
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:172
msgid "rclpy"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:174
msgid ""
"This is the main ROS 2 Python API which sits atop the ``rcl`` API. In the "
"context of logging, ``rclpy`` provides the ``logger.debug``-style functions; "
"see ``APIs`` above for a complete list. When one of the ``logger.debug`` "
"functions runs, it checks the current severity level of the node against the "
"severity level of the macro. If the severity level of the macro is greater "
"than or equal to the node severity level, the message will be formatted and "
"output to all of the places that are currently configured."
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:181
msgid "Logging usage"
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:187
msgid ""
"See the `rclcpp logging demo <https://github.com/ros2/demos/tree/rolling/"
"logging_demo>`_ for some simple examples."
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:188
msgid ""
"See the :doc:`logging demo <../Tutorials/Demos/Logging-and-logger-"
"configuration>` for example usage."
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:189
msgid ""
"See the `rclcpp documentation <https://docs.ros2.org/latest/api/rclcpp/"
"logging_8hpp.html>`__ for an extensive list of functionality."
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:193
msgid ""
"See the `rclpy examples <https://github.com/ros2/examples/blob/rolling/rclpy/"
"services/minimal_client/examples_rclpy_minimal_client/client.py>`__ for "
"example usage of a node's logger."
msgstr ""

#: ../../../source/Concepts/About-Logging.rst:194
msgid ""
"See the `rclpy tests <https://github.com/ros2/rclpy/blob/rolling/rclpy/test/"
"test_logging.py>`__ for example usage of keyword arguments (e.g. "
"``skip_first``, ``once``)."
msgstr ""
