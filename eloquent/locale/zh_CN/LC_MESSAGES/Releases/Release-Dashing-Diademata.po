# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Open Robotics
# This file is distributed under the same license as the ros2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ros2 documentation eloquent\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 06:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/Releases/Release-Dashing-Diademata.rst:3
msgid "ROS 2 Dashing Diademata (codename 'dashing'; May 31st, 2019)"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:7
msgid "Table of Contents"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:9
msgid "*Dashing Diademata* is the fourth release of ROS 2."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:12
msgid "Supported Platforms"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:14
msgid "Dashing Diademata is primarily supported on the following platforms:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:16
msgid "Tier 1 platforms:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:18
msgid "Ubuntu 18.04 (Bionic): ``amd64`` and ``arm64``"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:19
msgid "Mac macOS 10.12 (Sierra)"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:20
msgid "Windows 10 (Visual Studio 2019)"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:22
msgid "Tier 2 platforms:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:24
msgid "Ubuntu 18.04 (Bionic): ``arm32``"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:26
msgid "Tier 3 platforms:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:28
msgid "Debian Stretch (9): ``amd64``, ``arm64`` and ``arm32``"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:29
msgid "OpenEmbedded Thud (2.6) / webOS OSE: ``arm32`` and ``x86``"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:31
msgid ""
"For more information about RMW implementations, compiler / interpreter "
"versions, and system dependency versions see `REP 2000 <https://www.ros.org/"
"reps/rep-2000.html#dashing-diademata-may-2019-may-2021>`__."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:34
msgid "Installation"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:36
msgid "`Install Dashing Diademata <../../dashing/Installation.html>`__"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:39
msgid "New features in this ROS 2 release"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:41
msgid "A few features and improvements we would like to highlight:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:43
msgid ""
"`Components <https://index.ros.org/doc/ros2/Tutorials/Composition/>`__ are "
"now the recommended way to write your node. They can be used standalone as "
"well as being composed within a process and both ways are fully support from "
"``launch`` files."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:45
msgid ""
"The `intra-process communication <https://github.com/ros2/ros2_documentation/"
"edit/master/source/Tutorials/Intra-Process-Communication.rst>`__ (C++ only) "
"has been improved - both in terms of latency as well as minimizing copies."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:46
msgid ""
"The Python client library has been updated to match most of the C++ "
"equivalent and some important bug fixes and improvements have landed related "
"to memory usage and performance."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:47
msgid ""
"Parameters are now a complete alternative to ``dynamic_reconfigure`` from "
"ROS 1 including constraints like ranges or being read-only."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:48
msgid ""
"By relying on (a subset of) `IDL 4.2 <https://www.omg.org/spec/IDL/4.2>`__ "
"for the message generation pipeline it is now possible to use ``.idl`` files "
"(beside ``.msg`` / ``.srv`` / ``.action`` files). This change comes with "
"support for optional UTF-8 encoding for ordinary strings as well as UTF-16 "
"encoded multi-byte strings (see `wide strings design article <https://design."
"ros2.org/articles/wide_strings.html>`__)."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:50
msgid "Command line tools related to ``actions`` and ``components``."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:51
msgid ""
"Support for Deadline, Lifespan & Liveliness quality of service settings."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:52
msgid ""
"MoveIt 2 `alpha release <https://github.com/AcutronicRobotics/moveit2/"
"releases/tag/moveit_2_alpha>`__."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:54
msgid ""
"Please see the `Dashing meta ticket <https://github.com/ros2/ros2/"
"issues/607>`__ on GitHub, which contains more information as well as "
"references to specific tickets with additional details."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:58
msgid "Changes since the Crystal release"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:61
msgid "Declaring Parameters"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:63
msgid ""
"There have been some changes to the behavior of parameters starting in "
"Dashing, which have also lead to some new API's and the deprecation of other "
"API's. See the ``rclcpp`` and ``rclpy`` sections below for more information "
"about API changes."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:67
msgid "Getting and Setting Undeclared Parameters"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:69
msgid ""
"As of Dashing, parameters now need to be declared before being accessed or "
"set."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:71
msgid ""
"Before Dashing, you could call ``get_parameter(name)`` and get either a "
"value, if it had been previously set, or a parameter of type "
"``PARAMETER_NOT_SET``. You could also call ``set_parameter(name, value)`` at "
"any point, even if the parameter was previously unset."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:74
msgid ""
"Since Dashing, you need to first declare a parameter before getting or "
"setting it. If you try to get or set an undeclared parameter you will either "
"get an exception thrown, e.g. ParameterNotDeclaredException, or in certain "
"cases you will get an unsuccessful result communicated in a variety of ways "
"(see specific functions for more details)."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:77
msgid ""
"However, you can get the old behavior (mostly, see the note in the next "
"paragraph) by using the ``allow_undeclared_parameters`` option when creating "
"your node. You might want to do this in order to avoid code changes for now, "
"or in order to fulfill some uncommon use cases. For example, a \"global "
"parameter server\" or \"parameter blackboard\" may want to allow external "
"nodes to set new parameters on itself without first declaring them, so it "
"may use the ``allow_undeclared_parameters`` option to accomplish that. In "
"most cases, however, this option is not recommended because it makes the "
"rest of the parameter API less safe to bugs like parameter name typos and "
"\"use before set\" logical errors."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:82
msgid ""
"Note that using ``allow_undeclared_parameters`` will get you most of the old "
"behavior specifically for \"get\" and \"set\" methods, but it will not "
"revert all the behavior changes related to parameters back to how it was for "
"ROS Crystal. For that you need to also set the "
"``automatically_declare_parameters_from_overrides`` option to ``true``, "
"which is described below in :ref:`Parameter Configuration using a YAML File "
"<parameter-configuration-using-a-yaml-file>`."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:86
msgid "Declaring a Parameter with a ParameterDescriptor"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:88
msgid ""
"Another benefit to declaring your parameters before using them, is that it "
"allows you to declare a parameter descriptor at the same time."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:90
msgid ""
"Now when declaring a parameter you may include a custom "
"``ParameterDescriptor`` as well as a name and default value. The "
"``ParameterDescriptor`` is defined as a message in ``rcl_interfaces/msg/"
"ParameterDescriptor`` and contains meta data like ``description`` and "
"constraints like ``read_only`` or ``integer_range``. These constraints can "
"be used to reject invalid values when setting parameters and/or as hints to "
"external tools about what values are valid for a given parameter. The "
"``read_only`` constraint will prevent the parameter's value from changing "
"after being declared, as well as prevent if from being undeclared."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:95
msgid ""
"For reference, here's a link to the ``ParameterDescriptor`` message as of "
"the time of writing this:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:97
msgid ""
"https://github.com/ros2/rcl_interfaces/"
"blob/0aba5a142878c2077d7a03977087e7d74d40ee68/rcl_interfaces/msg/"
"ParameterDescriptor.msg#L1"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:102
msgid "Parameter Configuration using a YAML File"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:104
msgid ""
"As of Dashing, parameters in a YAML configuration file, e.g. passed to the "
"node via the command line argument ``__params:=``, are only used to override "
"a parameter's default value when declaring the parameter."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:106
msgid ""
"Before Dashing, any parameters you passed via a YAML file would be "
"implicitly set on the node."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:108
msgid ""
"Since Dashing, this is no longer the case, as parameters need to be declared "
"in order to appear on the node to external observers, like ``ros2 param "
"list``."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:110
msgid ""
"The old behavior may be achieved using the "
"``automatically_declare_parameters_from_overrides`` option when creating a "
"node. This option, if set to ``true``, will automatically declare all "
"parameters in the input YAML file when the node is constructed. This may be "
"used to avoid major changes to your existing code or to serve specific use "
"cases. For example, a \"global parameter server\" may want to be seeded with "
"arbitrary parameters on launch, which it could not have declared ahead of "
"time. Most of the time, however, this option is not recommended, as it may "
"lead to setting a parameter in a YAML file with the assumption that the node "
"will use it, even if the node does not actually use it."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:116
msgid ""
"In the future we hope to have a checker that will warn you if you pass a "
"parameter to a node that it was not expecting."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:118
msgid ""
"The parameters in the YAML file will continue to influence the value of "
"parameters when they are first declared."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:121
msgid "ament_cmake"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:123
msgid ""
"The CMake function ``ament_index_has_resource`` was returning either "
"``TRUE`` or ``FALSE``. As of `this release <https://github.com/ament/"
"ament_cmake/pull/155>`_ it returns either the prefix path in case the "
"resource was found or ``FALSE``."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:126
msgid "If you are using the return value in a CMake condition like this:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:128
msgid ""
"ament_index_has_resource(var ...)\n"
"if(${var})"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:133
msgid ""
"you need to update the condition to ensure it considers a string value as "
"``TRUE``:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:135
msgid "if(var)"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:140
msgid "rclcpp"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:143
msgid "Behavior Change for ``Node::get_node_names()``"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:145
msgid ""
"The function ``NodeGraph::get_node_names()``, and therefore also ``Node::"
"get_node_names()``, now returns a ``std::vector<std::string>`` containing "
"fully qualified node names with their namespaces included, instead of just "
"the node names."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:148
msgid "Changed the Way that Options are Passed to Nodes"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:150
msgid ""
"Extended arguments (beyond name and namespace) to the ``rclcpp::Node()`` "
"constructor have been replaced with a ``rclcpp::NodeOptions`` structure. See "
"`ros2/rclcpp#622 <https://github.com/ros2/rclcpp/pull/622/files>`__ for "
"details about the structure and default values of the options."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:153
msgid ""
"If you are using any of the extended arguments to ``rclcpp::Node()`` like "
"this:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:155
msgid ""
"auto context = rclcpp::contexts::default_context::"
"get_global_default_context();\n"
"std::vector<std::string> args;\n"
"std::vector<rclcpp::Parameter> params = { rclcpp::"
"Parameter(\"use_sim_time\", true) };\n"
"auto node = std::make_shared<rclcpp::Node>(\"foo_node\", \"bar_namespace\", "
"context, args, params);"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:162
msgid "You need to update to use the ``NodeOptions`` structure"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:164
msgid ""
"std::vector<std::string> args;\n"
"std::vector<rclcpp::Parameter> params = { rclcpp::"
"Parameter(\"use_sim_time\", true) };\n"
"rclcpp::NodeOptions node_options;\n"
"node_options.arguments(args);\n"
"node_options.parameter_overrides(params);\n"
"auto node = std::make_shared<rclcpp::Node>(\"foo_node\", \"bar_namespace\", "
"node_options);"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:174
msgid "Changes to Creating Publishers and Subscriptions"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:176
msgid ""
"There have been a few changes to creating publishers and subscriptions which "
"are new in Dashing:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:178
msgid ""
"QoS settings are now passed using the new ``rclcpp::QoS`` class, and the API "
"encourages the user to specify at least the history depth."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:179
msgid ""
"Options are now passed as an object, i.e. ``rclcpp::PublisherOptions`` and "
"``rclcpp::SubscriptionOptions``."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:181
msgid ""
"All changes are backwards compatible (no code changes are required), but "
"several existing call styles have been deprecated. Users are encouraged to "
"update to the new signatures."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:186
msgid ""
"In the past, when creating a publisher or subscription, you could either not "
"specify any QoS settings (e.g. just provide topic name for a publisher) or "
"you could specify a \"qos profile\" data structure (of type "
"``rmw_qos_profile_t``) with all the settings already set. Now you must use "
"the new ``rclcpp::QoS`` object to specify your QoS and at least the history "
"settings for your QoS. This encourages the user to specify a history depth "
"when using ``KEEP_LAST``, rather than defaulting it to a value that may or "
"may not be appropriate."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:190
msgid ""
"In ROS 1, this was known as the ``queue_size`` and it was required in both C+"
"+ and Python. We're changing the ROS 2 API to bring this requirement back."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:195
msgid ""
"Also, any options which could previously be passed during creation of a "
"publisher or subscription have now been encapsulated in an ``rclcpp::"
"PublisherOptions`` and ``rclcpp::SubscriptionOptions`` class respectively. "
"This allows for shorter signatures, more convenient use, and for adding new "
"future options without breaking API."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:200
msgid ""
"Some signatures for creating publishers and subscribers are now deprecated, "
"and new signatures have been added to allow you to use the new ``rclcpp::"
"QoS`` and publisher/subscription option classes."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:202
msgid "These are the new and recommended API's:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:204
msgid ""
"template<\n"
"  typename MessageT,\n"
"  typename AllocatorT = std::allocator<void>,\n"
"  typename PublisherT = ::rclcpp::Publisher<MessageT, AllocatorT>>\n"
"std::shared_ptr<PublisherT>\n"
"create_publisher(\n"
"  const std::string & topic_name,\n"
"  const rclcpp::QoS & qos,\n"
"  const PublisherOptionsWithAllocator<AllocatorT> & options =\n"
"  PublisherOptionsWithAllocator<AllocatorT>()\n"
");\n"
"\n"
"template<\n"
"  typename MessageT,\n"
"  typename CallbackT,\n"
"  typename AllocatorT = std::allocator<void>,\n"
"  typename SubscriptionT = rclcpp::Subscription<\n"
"    typename rclcpp::subscription_traits::has_message_type<CallbackT>::type, "
"AllocatorT>>\n"
"std::shared_ptr<SubscriptionT>\n"
"create_subscription(\n"
"  const std::string & topic_name,\n"
"  const rclcpp::QoS & qos,\n"
"  CallbackT && callback,\n"
"  const SubscriptionOptionsWithAllocator<AllocatorT> & options =\n"
"  SubscriptionOptionsWithAllocator<AllocatorT>(),\n"
"  typename rclcpp::message_memory_strategy::MessageMemoryStrategy<\n"
"    typename rclcpp::subscription_traits::has_message_type<CallbackT>::type, "
"AllocatorT\n"
"  >::SharedPtr\n"
"  msg_mem_strat = nullptr);"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:236
msgid "And these are the deprecated ones:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:238
msgid ""
"template<\n"
"  typename MessageT,\n"
"  typename AllocatorT = std::allocator<void>,\n"
"  typename PublisherT = ::rclcpp::Publisher<MessageT, AllocatorT>>\n"
"[[deprecated(\"use create_publisher(const std::string &, const rclcpp::QoS "
"&, ...) instead\")]]\n"
"std::shared_ptr<PublisherT>\n"
"create_publisher(\n"
"  const std::string & topic_name,\n"
"  size_t qos_history_depth,\n"
"  std::shared_ptr<AllocatorT> allocator);\n"
"\n"
"template<\n"
"  typename MessageT,\n"
"  typename AllocatorT = std::allocator<void>,\n"
"  typename PublisherT = ::rclcpp::Publisher<MessageT, AllocatorT>>\n"
"[[deprecated(\"use create_publisher(const std::string &, const rclcpp::QoS "
"&, ...) instead\")]]\n"
"std::shared_ptr<PublisherT>\n"
"create_publisher(\n"
"  const std::string & topic_name,\n"
"  const rmw_qos_profile_t & qos_profile = rmw_qos_profile_default,\n"
"  std::shared_ptr<AllocatorT> allocator = nullptr);\n"
"\n"
"template<\n"
"  typename MessageT,\n"
"  typename CallbackT,\n"
"  typename Alloc = std::allocator<void>,\n"
"  typename SubscriptionT = rclcpp::Subscription<\n"
"    typename rclcpp::subscription_traits::has_message_type<CallbackT>::type, "
"Alloc>>\n"
"[[deprecated(\n"
"  \"use create_subscription(const std::string &, const rclcpp::QoS &, "
"CallbackT, ...) instead\"\n"
")]]\n"
"std::shared_ptr<SubscriptionT>\n"
"create_subscription(\n"
"  const std::string & topic_name,\n"
"  CallbackT && callback,\n"
"  const rmw_qos_profile_t & qos_profile = rmw_qos_profile_default,\n"
"  rclcpp::callback_group::CallbackGroup::SharedPtr group = nullptr,\n"
"  bool ignore_local_publications = false,\n"
"  typename rclcpp::message_memory_strategy::MessageMemoryStrategy<\n"
"    typename rclcpp::subscription_traits::has_message_type<CallbackT>::type, "
"Alloc>::SharedPtr\n"
"  msg_mem_strat = nullptr,\n"
"  std::shared_ptr<Alloc> allocator = nullptr);\n"
"\n"
"template<\n"
"  typename MessageT,\n"
"  typename CallbackT,\n"
"  typename Alloc = std::allocator<void>,\n"
"  typename SubscriptionT = rclcpp::Subscription<\n"
"    typename rclcpp::subscription_traits::has_message_type<CallbackT>::type, "
"Alloc>>\n"
"[[deprecated(\n"
"  \"use create_subscription(const std::string &, const rclcpp::QoS &, "
"CallbackT, ...) instead\"\n"
")]]\n"
"std::shared_ptr<SubscriptionT>\n"
"create_subscription(\n"
"  const std::string & topic_name,\n"
"  CallbackT && callback,\n"
"  size_t qos_history_depth,\n"
"  rclcpp::callback_group::CallbackGroup::SharedPtr group = nullptr,\n"
"  bool ignore_local_publications = false,\n"
"  typename rclcpp::message_memory_strategy::MessageMemoryStrategy<\n"
"    typename rclcpp::subscription_traits::has_message_type<CallbackT>::type, "
"Alloc>::SharedPtr\n"
"  msg_mem_strat = nullptr,\n"
"  std::shared_ptr<Alloc> allocator = nullptr);"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:306
msgid "The change to how QoS is passed is most likely to impact users."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:308
msgid "A typical change for a publisher looks like this:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:310
msgid ""
"- pub_ = create_publisher<std_msgs::msg::String>(\"chatter\");\n"
"+ pub_ = create_publisher<std_msgs::msg::String>(\"chatter\", 10);"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:315
msgid "And for a subscription:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:317
msgid ""
"- sub_ = create_subscription<std_msgs::msg::String>(\"chatter\", callback);\n"
"+ sub_ = create_subscription<std_msgs::msg::String>(\"chatter\", 10, "
"callback);"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:322
msgid ""
"If you have no idea what depth to use and don't care right now (maybe just "
"prototyping), then we recommend using ``10``, as that was the default before "
"and should preserve existing behavior."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:324
msgid ""
"More in depth documentation about how to select an appropriate depth is "
"forthcoming."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:326
msgid ""
"This is an example of a slightly more involved change to avoid the newly "
"deprecated API's:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:328
msgid ""
"- // Creates a latched topic\n"
"- rmw_qos_profile_t qos = rmw_qos_profile_default;\n"
"- qos.depth = 1;\n"
"- qos.durability = RMW_QOS_POLICY_DURABILITY_TRANSIENT_LOCAL;\n"
"-\n"
"  model_xml_.data = model_xml;\n"
"  node_handle->declare_parameter(\"robot_description\", model_xml);\n"
"  description_pub_ = node_handle->create_publisher<std_msgs::msg::String>(\n"
"-   \"robot_description\", qos);\n"
"+   \"robot_description\",\n"
"+   // Transient local is similar to latching in ROS 1.\n"
"+   rclcpp::QoS(1).transient_local());"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:343
msgid ""
"See the pull request (and connected pull requests) that introduced the QoS "
"change for more examples and details:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:345
msgid "https://github.com/ros2/rclcpp/pull/713"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:347
msgid "https://github.com/ros2/demos/pull/332"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:348
msgid "https://github.com/ros2/robot_state_publisher/pull/19"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:349
msgid "and others..."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:353
#: ../../../source/Releases/Release-Dashing-Diademata.rst:576
msgid "Changes Due to Declare Parameter Change"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:355
msgid ""
"For details about the actual behavior change, see `Declaring Parameters`_ "
"above."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:357
msgid "There are several new API calls in the ``rclcpp::Node``'s interface:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:359
msgid ""
"Methods that declare parameters given a name, optional default value, "
"optional descriptor, and return the value actually set:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:361
msgid ""
"const rclcpp::ParameterValue &\n"
"rclcpp::Node::declare_parameter(\n"
"  const std::string & name,\n"
"  const rclcpp::ParameterValue & default_value = rclcpp::ParameterValue(),\n"
"  const rcl_interfaces::msg::ParameterDescriptor & parameter_descriptor =\n"
"  rcl_interfaces::msg::ParameterDescriptor());\n"
"\n"
"template<typename ParameterT>\n"
"auto\n"
"rclcpp::Node::declare_parameter(\n"
"  const std::string & name,\n"
"  const ParameterT & default_value,\n"
"  const rcl_interfaces::msg::ParameterDescriptor & parameter_descriptor =\n"
"  rcl_interfaces::msg::ParameterDescriptor());\n"
"\n"
"template<typename ParameterT>\n"
"std::vector<ParameterT>\n"
"rclcpp::Node::declare_parameters(\n"
"  const std::string & namespace_,\n"
"  const std::map<std::string, ParameterT> & parameters);\n"
"\n"
"template<typename ParameterT>\n"
"std::vector<ParameterT>\n"
"rclcpp::Node::declare_parameters(\n"
"  const std::string & namespace_,\n"
"  const std::map<\n"
"    std::string,\n"
"    std::pair<ParameterT, rcl_interfaces::msg::ParameterDescriptor>\n"
"  > & parameters);"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:393
msgid ""
"A method to undeclare parameters and to check if a parameter has been "
"declared:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:395
msgid ""
"void\n"
"rclcpp::Node::undeclare_parameter(const std::string & name);\n"
"\n"
"bool\n"
"rclcpp::Node::has_parameter(const std::string & name) const;"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:403
msgid "Some convenience methods that did not previously exist:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:405
msgid ""
"rcl_interfaces::msg::SetParametersResult\n"
"rclcpp::Node::set_parameter(const rclcpp::Parameter & parameter);\n"
"\n"
"std::vector<rclcpp::Parameter>\n"
"rclcpp::Node::get_parameters(const std::vector<std::string> & names) const;\n"
"\n"
"rcl_interfaces::msg::ParameterDescriptor\n"
"rclcpp::Node::describe_parameter(const std::string & name) const;"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:416
msgid ""
"A new method to set the callback which is called anytime a parameter will be "
"changed, giving you the opportunity to reject it:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:418
msgid ""
"using OnParametersSetCallbackType =\n"
"  rclcpp::node_interfaces::NodeParametersInterface::"
"OnParametersSetCallbackType;\n"
"\n"
"OnParametersSetCallbackType\n"
"rclcpp::Node::set_on_parameters_set_callback(\n"
"  OnParametersSetCallbackType callback);"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:427
msgid "There were also several deprecated methods:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:429
msgid ""
"template<typename ParameterT>\n"
"[[deprecated(\"use declare_parameter() instead\")]]\n"
"void\n"
"rclcpp::Node::set_parameter_if_not_set(\n"
"  const std::string & name,\n"
"  const ParameterT & value);\n"
"\n"
"template<typename ParameterT>\n"
"[[deprecated(\"use declare_parameters() instead\")]]\n"
"void\n"
"rclcpp::Node::set_parameters_if_not_set(\n"
"  const std::string & name,\n"
"  const std::map<std::string, ParameterT> & values);\n"
"\n"
"template<typename ParameterT>\n"
"[[deprecated(\"use declare_parameter() and it's return value instead\")]]\n"
"void\n"
"rclcpp::Node::get_parameter_or_set(\n"
"  const std::string & name,\n"
"  ParameterT & value,\n"
"  const ParameterT & alternative_value);\n"
"\n"
"template<typename CallbackT>\n"
"[[deprecated(\"use set_on_parameters_set_callback() instead\")]]\n"
"void\n"
"rclcpp::Node::register_param_change_callback(CallbackT && callback);"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:459
msgid "Memory Strategy"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:461
msgid ""
"The interface ``rclcpp::memory_strategy::MemoryStrategy`` was using the "
"typedef ``WeakNodeVector`` in various method signatures. As of Dashing the "
"typedef has been been changed to ``WeakNodeList`` and with it the type of "
"the parameter in various methods. Any custom memory strategy needs to be "
"updated to match the modified interface."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:465
msgid ""
"The relevant API change can be found in `ros2/rclcpp#741 <https://github.com/"
"ros2/rclcpp/pull/741>`__."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:468
msgid "rclcpp_components"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:470
msgid ""
"The correct way to implement composition in Dashing is by utilizing the "
"``rclcpp_components`` package."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:472
msgid ""
"The following changes must be made to nodes in order to correctly implement "
"runtime composition:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:474
msgid "The Node must have a constructor that takes ``rclcpp::NodeOptions``:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:476
msgid ""
"class Listener: public rclcpp::Node {\n"
"  Listener(const rclcpp::NodeOptions & options)\n"
"  : Node(\"listener\", options)\n"
"  {\n"
"  }\n"
"};"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:485
msgid ""
"C++ registration macros (if present) need to be updated to use the "
"``rclcpp_components`` equivalent. If not present, registration macros must "
"be added in one translation unit."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:488
msgid ""
"// Insert at bottom of translation unit, e.g. listener.cpp\n"
"#include \"rclcpp_components/register_node_macro.hpp\"\n"
"// Use fully-qualifed name in registration\n"
"RCLCPP_COMPONENTS_REGISTER_NODE(composition::Listener);"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:495
msgid ""
"CMake registration macros (if present) need to be updated. If not present, "
"registration macros must be added to the project's CMake."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:498
msgid ""
"add_library(listener src/listener.cpp)\n"
"rclcpp_components_register_nodes(listener \"composition::Listener\")"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:503
msgid ""
"For more information on composition, see `the tutorial <https://index.ros."
"org/doc/ros2/Tutorials/Composition/>`__"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:506
msgid "rclpy"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:509
msgid "Changes to Creating Publishers, Subscriptions, and QoS Profiles"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:511
msgid ""
"Prior to Dashing, you could optionally provide a ``QoSProfile`` object when "
"creating a publisher or subscription. In an effort to encourage users to "
"specify a history depth for message queues, we now **require** that a depth "
"value or ``QoSProfile`` object is given when creating publishers or "
"subscriptions."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:514
msgid "To create a publisher, previously you would have written:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:516
msgid ""
"node.create_publisher(Empty, 'chatter')\n"
"# Or using a keyword argument for QoSProfile\n"
"node.create_publisher(Empty, 'chatter', qos_profile=qos_profile_sensor_data)"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:522
msgid ""
"In Dashing, prefer the following API that provides a depth value or "
"``QoSProfile`` object as a third positional argument:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:524
msgid ""
"# Assume a history setting of KEEP_LAST with depth 10\n"
"node.create_publisher(Empty, 'chatter', 10)\n"
"# Or pass a QoSProfile object directly\n"
"node.create_publisher(Empty, 'chatter', qos_profile_sensor_data)"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:531
msgid "Likewise for subscriptions, previously you would have written:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:533
msgid ""
"node.create_subscription(BasicTypes, 'chatter', lambda msg: print(msg))\n"
"# Or using a keyword argument for QoSProfile\n"
"node.create_subscription(BasicTypes, 'chatter', lambda msg: print(msg), "
"qos_profile=qos_profile_sensor_data)"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:539
msgid "In Dashing:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:541
msgid ""
"# Assume a history setting of KEEP_LAST with depth 10\n"
"node.create_subscription(BasicTypes, 'chatter', lambda msg: print(msg), 10)\n"
"# Or pass a QoSProfile object directly\n"
"node.create_subscription(BasicTypes, 'chatter', lambda msg: print(msg), "
"qos_profile_sensor_data)"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:548
msgid ""
"To ease the transition, users who do not use the new API will see "
"deprecation warnings."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:550
msgid ""
"Furthermore, we also require that when constructing ``QoSProfile`` objects "
"that a history policy and/or depth is set. If a history policy of "
"``KEEP_LAST`` is provided, then a depth argument is also required. For "
"example, these calls are valid:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:554
msgid ""
"QoSProfile(history=QoSHistoryPolicy.RMW_QOS_POLICY_HISTORY_KEEP_ALL)\n"
"QoSProfile(history=QoSHistoryPolicy.RMW_QOS_POLICY_HISTORY_KEEP_LAST, "
"depth=10)\n"
"QoSProfile(depth=10)  # equivalent to the previous line"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:560
msgid "And these calls will cause a deprecation warning:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:562
msgid ""
"QoSProfile()\n"
"QoSProfile(reliability=QoSReliabilityPolicy."
"RMW_QOS_POLICY_RELIABILITY_BEST_EFFORT)\n"
"# KEEP_LAST but no depth\n"
"QoSProfile(history=QoSHistoryPolicy.RMW_QOS_POLICY_HISTORY_KEEP_LAST)"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:569
msgid ""
"See the issue and pull request related to introducing this change for more "
"details:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:571
msgid "https://github.com/ros2/rclpy/issues/342"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:572
msgid "https://github.com/ros2/rclpy/pull/344"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:578
msgid ""
"For details about the actual behavior change, see `Declaring Parameters`_ "
"above. The changes are analogous to the ones in ``rclcpp``."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:580
msgid ""
"These are the new API methods available in ``rclpy.node.Node`` interface:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:582
msgid ""
"To declare parameters given a name, an optional default value (supported by "
"``rcl_interfaces.msg.ParameterValue``) and an optional descriptor, returning "
"the value actually set:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:584
msgid ""
"def declare_parameter(\n"
"    name: str,\n"
"    value: Any = None,\n"
"    descriptor: ParameterDescriptor = ParameterDescriptor()\n"
") -> Parameter\n"
"\n"
"def declare_parameters(\n"
"  namespace: str,\n"
"  parameters: List[Union[\n"
"      Tuple[str],\n"
"      Tuple[str, Any],\n"
"      Tuple[str, Any, ParameterDescriptor],\n"
"  ]]\n"
") -> List[Parameter]"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:601
msgid ""
"To undeclare previously declared parameters and to check if a parameter has "
"been declared beforehand:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:603
msgid ""
"def undeclare_parameter(name: str) -> None\n"
"\n"
"def has_parameter(name: str) -> bool"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:609
msgid "To get and set parameter descriptors:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:611
msgid ""
"def describe_parameter(name: str) -> ParameterDescriptor\n"
"\n"
"def describe_parameters(names: List[str]) -> List[ParameterDescriptor]\n"
"\n"
"def set_descriptor(\n"
"    name: str,\n"
"    descriptor: ParameterDescriptor,\n"
"    alternative_value: Optional[ParameterValue] = None\n"
") -> ParameterValue"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:623
msgid "A convenience method to get parameters that may not have been declared:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:625
msgid ""
"def get_parameter_or(name: str, alternative_value: Optional[Parameter] = "
"None) -> Parameter"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:630
msgid "Other changes"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:632
msgid ""
"``rclpy.parameter.Parameter`` can now guess its type without explicitly "
"setting it (as long as it's one of the supported ones by ``rcl_interfaces."
"msg.ParameterValue``). For example, this code:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:635
msgid "p = Parameter('myparam', Parameter.Type.DOUBLE, 2.41)"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:639
msgid "Is equivalent to this code:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:641
msgid "p = Parameter('myparam', value=2.41)"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:645
msgid "This change does not break existing API."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:648
msgid "rosidl"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:650
msgid ""
"Until Crystal each message generator package registered itself using the "
"``ament_cmake`` extension point ``rosidl_generate_interfaces`` and was "
"passed a set of ``.msg`` / ``.srv`` / ``.action`` files. As of Dashing the "
"message generation pipeline is based on ``.idl`` files instead."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:653
msgid ""
"Any message generator package needs to change and register itself using the "
"new extension point ``rosidl_generate_idl_interfaces`` which passes only ``."
"idl`` files instead. The message generators for the commonly supported "
"languages C, C++, and Python as well as the typesupport packages for "
"introspection, Fast RTPS, Connext and OpenSplice have already been updated "
"(see `ros2/rosidl#334 <https://github.com/ros2/rosidl/pull/334/files>`__). "
"The CMake code calling ``rosidl_generate_interfaces()`` can either pass ``."
"idl`` files directly or pass ``.msg`` / ``.srv`` / ``.action`` which will "
"then internally be converted into ``.idl`` files before being passed to each "
"message generator."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:657
msgid ""
"The format of ``.msg`` / ``.srv`` / ``.action`` files is not being evolved "
"in the future. The mapping between ``.msg`` / ``.srv`` / ``.action`` files "
"and ``.idl`` files is described in `this design article <https://design.ros2."
"org/articles/legacy_interface_definition.html>`__. A `second design article "
"<https://design.ros2.org/articles/idl_interface_definition.html>`__ "
"describes the supported features in ``.idl`` files. In order to leverage any "
"of the new features existing interfaces need to be converted (e.g. using the "
"command line tools  ``msg2idl`` / ``srv2idl`` / ``action2idl``)."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:662
msgid ""
"To distinguish same type names, but with different namespaces, the "
"introspection structs now contain a namespace field that replaces the "
"package name (see `ros2/rosidl#335 <https://github.com/ros2/rosidl/pull/355/"
"files>`_)."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:665
msgid "Mapping of char in .msg files"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:667
msgid ""
"In `ROS 1 <https://wiki.ros.org/msg#Fields>`__ ``char`` has been deprecated "
"for a long time and is being mapped to ``uint8``. In ROS 2 until Crystal "
"``char`` was mapped to a single character (``char`` in C / C++, ``str`` with "
"length 1 in Python) in an effort to provide a more natural mapping. As of "
"Dashing the ROS 1 semantic has been restored and ``char`` maps to ``uint8`` "
"again."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:672
msgid "rosidl_generator_cpp"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:674
msgid ""
"The C++ data structures generated for messages, services and actions provide "
"setter methods for each field. Until Crystal each setter returned a pointer "
"to the data structure itself to enable the named parameter idiom. As of "
"Dashing these setters `return a reference <https://github.com/ros2/rosidl/"
"pull/353>`__ instead since that seems to be the more common signature as "
"well as it clarifies that the returned value can't be a ``nullptr``."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:679
msgid "rosidl_generator_py"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:681
msgid ""
"Until Crystal an array (fixed size) or sequence (dynamic size, optionally "
"with an upper boundary) field in a message was stored as a ``list`` in "
"Python. As of Dashing the Python type for arrays / sequences of numeric "
"values has been changed:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:684
msgid ""
"an array of numeric values is stored as a ``numpy.ndarray`` (the ``dtype`` "
"is chosen to match the type of the numeric value)"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:685
msgid ""
"a sequence of numeric values is stored as an ``array.array`` (the "
"``typename`` is chosen to match the type of the numeric value)"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:687
msgid ""
"As before an array / sequence of non-numeric types is still represented as a "
"``list`` in Python."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:689
msgid "This change brings a number of benefits:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:691
msgid ""
"The new data structures ensure that each item in the array / sequence "
"complies with the value range restrictions of the numeric type."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:692
msgid ""
"The numeric values can be stored more efficiently in memory which avoid the "
"overhead of Python objects for each item."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:693
msgid ""
"The memory layout of both data structures allows to read and write all items "
"of the array / sequence in a single operation which makes the conversion "
"from and to Python significantly faster / more efficient."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:696
msgid "launch"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:698
msgid ""
"The ``launch_testing`` package caught up with the ``launch`` package "
"redesign done in Bouncy Bolson. The legacy Python API, already moved into "
"the ``launch.legacy`` submodule, has thus been deprecated and removed."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:701
msgid ""
"See ``launch`` `examples <https://github.com/ros2/launch/tree/master/launch/"
"examples>`__ and `documentation <https://github.com/ros2/launch/tree/master/"
"launch/doc>`__ for reference on how to use its new API."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:703
msgid ""
"See `demos tests <https://github.com/ros2/demos>`__ for reference on how to "
"use the new ``launch_testing`` API."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:706
msgid "rmw"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:708
msgid "Changes since the `Crystal Clemmys <Release-Crystal-Clemmys>` release:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:710
msgid "New API in ``rmw``, a fini function for ``rmw_context_t``:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:712
msgid ""
"`rmw_context_fini <https://github.com/ros2/rmw/blob/"
"c518842f6f82910482470b40c221c268d30691bd/rmw/include/rmw/init.h#L111-L136>`_"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:714
msgid ""
"Modification of ``rmw``, now passes ``rmw_context_t`` to "
"``rmw_create_wait_set``:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:716
msgid ""
"`rmw_create_wait_set <https://github.com/ros2/rmw/blob/"
"c518842f6f82910482470b40c221c268d30691bd/rmw/include/rmw/rmw.h#L522-L543>`_"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:718
msgid ""
"New APIs in ``rmw`` for preallocating space for published and subscribed "
"messages:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:720
msgid ""
"`rmw_init_publisher_allocation <https://github.com/ros2/rmw/blob/"
"dc7b2f49f1f961d6cf2c173adc54736451be8938/rmw/include/rmw/rmw.h#L262>`_"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:721
msgid ""
"`rmw_fini_publisher_allocation <https://github.com/ros2/rmw/blob/"
"dc7b2f49f1f961d6cf2c173adc54736451be8938/rmw/include/rmw/rmw.h#L279>`_"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:722
msgid ""
"`rmw_init_subscription_allocation <https://github.com/ros2/rmw/blob/"
"dc7b2f49f1f961d6cf2c173adc54736451be8938/rmw/include/rmw/rmw.h#L489>`_"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:723
msgid ""
"`rmw_fini_subscription_allocation <https://github.com/ros2/rmw/blob/"
"dc7b2f49f1f961d6cf2c173adc54736451be8938/rmw/include/rmw/rmw.h#L506>`_"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:724
msgid ""
"`rmw_serialized_message_size <https://github.com/ros2/rmw/blob/"
"dc7b2f49f1f961d6cf2c173adc54736451be8938/rmw/include/rmw/rmw.h#L395>`_"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:726
msgid ""
"Modification of ``rmw``, now passes ``rmw_publisher_allocation_t`` or "
"``rmw_subscription_allocation_t`` to ``rmw_publish`` and ``rmw_take``, "
"respectively. Note that this argument can be ``NULL`` or ``nullptr``, which "
"keeps existing Crystal behavior."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:729
msgid ""
"`rmw_publish <https://github.com/ros2/rmw/blob/"
"dc7b2f49f1f961d6cf2c173adc54736451be8938/rmw/include/rmw/rmw.h#L310>`_"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:730
msgid ""
"`rmw_take <https://github.com/ros2/rmw/blob/"
"dc7b2f49f1f961d6cf2c173adc54736451be8938/rmw/include/rmw/rmw.h#L556>`_"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:732
msgid ""
"Type names returned by ``rmw_get_*_names_and_types*`` functions should have "
"a fully-qualified namespace. For example, instead of ``rcl_interfaces/"
"Parameter`` and ``rcl_interfaces/GetParameters``, the returned type names "
"should be ``rcl_interface/msg/Parameter`` and ``rcl_interfaces/srv/"
"GetParameters``."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:736
msgid "actions"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:738
msgid "Changes to ``rclcpp_action::Client`` signatures:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:740
msgid ""
"The signature of `rclcpp_action::Client::async_send_goal <https://github.com/"
"ros2/rclcpp/blob/ef41059a751702274667e2164182c062b47c453d/rclcpp_action/"
"include/rclcpp_action/client.hpp#L343>`_ has changed. Now users can "
"optionally provide callback functions for the **goal response** and the "
"**result** using the new `SendGoalOptions <https://github.com/ros2/rclcpp/"
"blob/ef41059a751702274667e2164182c062b47c453d/rclcpp_action/include/"
"rclcpp_action/client.hpp#L276>`_ struct. The goal response callback is "
"called when an action server accepts or rejects the goal and the result "
"callback is called when the result for the goal is received. Optional "
"callbacks were also added to `rclcpp_action::Client::async_cancel_goal "
"<https://github.com/ros2/rclcpp/blob/"
"ef41059a751702274667e2164182c062b47c453d/rclcpp_action/include/rclcpp_action/"
"client.hpp#L432-L434>`_ and `rclcpp_action::Client::async_get_result "
"<https://github.com/ros2/rclcpp/blob/"
"ef41059a751702274667e2164182c062b47c453d/rclcpp_action/include/rclcpp_action/"
"client.hpp#L399-L401>`_."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:747
msgid "Changes to goal transition names:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:749
msgid ""
"The names of goal state transitions have been refactored to reflect the "
"design documention. This affects ``rcl_action``, ``rclcpp_action``, and "
"``rclpy``. Here is a list of the event name changes (*Old name -> New name*):"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:753
msgid "GOAL_EVENT_CANCEL -> GOAL_EVENT_CANCEL_GOAL"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:754
msgid "GOAL_EVENT_SET_SUCCEEDED -> GOAL_EVENT_SUCCEED"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:755
msgid "GOAL_EVENT_SET_ABORTED -> GOAL_EVENT_ABORT"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:756
msgid "GOAL_EVENT_SET_CANCELED -> GOAL_EVENT_CANCELED"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:758
msgid "Changes to ``CancelGoal.srv``:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:760
msgid ""
"A ``return_code`` field was added to the response message of the "
"``CancelGoal`` service. This is to better communicate a reason for a failed "
"service call. See the `pull request <https://github.com/ros2/rcl_interfaces/"
"pull/76>`_ and connected issue for details."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:765
msgid "rviz"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:767
msgid ""
"Plugins should use fully qualified type names otherwise a warning will be "
"logged. For `example <https://github.com/ros2/rviz/blob/"
"dfceae319d49546f1e4ad39689853c18fef0001e/rviz_default_plugins/"
"plugins_description.xml#L13>`_, use the type ``sensor_msgs/msg/Image`` "
"instead of ``sensor_msgs/Image``. See `PR introducing this change <https://"
"github.com/ros2/rviz/pull/387>`_ for more details."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:772
msgid "Known Issues"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:774
msgid ""
"`[ros2/rclcpp#715] <https://github.com/ros2/rclcpp/issues/715>`_ There is an "
"inconsistency in the way that parameter YAML files are loaded between "
"standalone ROS 2 nodes and composed ROS 2 nodes. Currently available "
"workarounds are noted in an `issue comment <https://github.com/ros2/rclcpp/"
"issues/715#issuecomment-497392626>`_"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:776
msgid ""
"`[ros2/rclpy#360] <https://github.com/ros2/rclpy/issues/360>`_ rclpy nodes "
"ignore ``ctrl-c`` when using OpenSplice on Windows."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:777
msgid ""
"`[ros2/rosidl_typesupport_opensplice#30] <https://github.com/ros2/"
"rosidl_typesupport_opensplice/issues/30>`_ There is a bug preventing nesting "
"a message inside of a service or action definition with the same name when "
"using OpenSplice."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:778
msgid ""
"`[ros2/rclcpp#781] <https://github.com/ros2/rclcpp/pull/781>`_ Calling "
"``get_parameter``/``list_parameter`` from within "
"``on_set_parameter_callback`` causes a deadlock on Dashing.  This is fixed "
"for Eloquent, but is an ABI break so has not been backported to Dashing."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:779
msgid ""
"`[ros2/rclcpp#912] <https://github.com/ros2/rclcpp/issues/912>`_ Inter-"
"process communication forces a message copy when intra-process communication "
"takes place between an ``std::unique_ptr`` publisher and a single ``std::"
"unique_ptr`` subscription (published ``std::unique_ptr`` is internally being "
"promoted to an ``std::shared_ptr``)."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:780
msgid ""
"`[ros2/rosbag2#125] <https://github.com/ros2/rosbag2/issues/125>`_ Topics "
"with unreliable QOS are not recorded."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:781
msgid ""
"`[ros2/rclcpp#715] <https://github.com/ros2/rclcpp/issues/715>`_ Composable "
"nodes cannot receive parameters via remapping. Supplying parameters to "
"composable nodes can be accomplished using the methods described in `[this "
"comment] <https://github.com/ros2/rclcpp/"
"issues/715#issuecomment-497392626>`_."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:782
msgid ""
"`[ros2/rclcpp#893] <https://github.com/ros2/rclcpp/issues/893>`_ ``rclcpp::"
"Context`` is not destroyed because of a reference cycle with ``rclcpp::"
"GraphListener``. This causes a memory leak. A fix has not been backported "
"because of the risk of breaking ABI."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:785
msgid "Timeline before the release"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:787
msgid "A few milestones leading up to the release:"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:789
msgid "Mon. Apr 8th (alpha)"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:790
msgid ""
"First releases of core packages available. Testing can happen from now on "
"(some features might not have landed yet)."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:793
msgid "Thu. May 2nd"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:794
msgid "API freeze for core packages"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:796
msgid "Mon. May 6th (beta)"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:797
msgid ""
"Updated releases of core packages available. Additional testing of the "
"latest features."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:800
msgid "Thu. May 16th"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:801
msgid ""
"Feature freeze. Only bug fix releases should be made after this point. New "
"packages can be released independently."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:805
msgid "Mon. May 20th (release candidate)"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:806
msgid "Updated releases of core packages available."
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:808
msgid "Wed. May 29th"
msgstr ""

#: ../../../source/Releases/Release-Dashing-Diademata.rst:809
msgid ""
"Freeze rosdistro. No PRs for Dashing on the `rosdistro` repo will be merged "
"(reopens after the release announcement)."
msgstr ""
