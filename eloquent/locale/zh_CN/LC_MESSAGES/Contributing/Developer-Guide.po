# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Open Robotics
# This file is distributed under the same license as the ros2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ros2 documentation eloquent\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 06:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/Contributing/Developer-Guide.rst:6
msgid "ROS 2 developer guide"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:10
msgid "Table of Contents"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:12
msgid ""
"This page defines the practices and policies we employ when developing ROS 2."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:15
msgid "General Principles"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:17
msgid "Some principles are common to all ROS 2 development:"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:20
msgid ""
"**Shared ownership**: Everybody working on ROS 2 should feel ownership over "
"all parts of the system. The original author of a chunk of code does not "
"have any special permission or obligation to control or maintain that chunk "
"of code. Everyone is free to propose changes anywhere, to handle any type of "
"ticket, and to review any pull request."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:24
msgid ""
"**Be willing to work on anything**: As a corollary to shared ownership, "
"everybody should be willing to take on any available task and contribute to "
"any aspect of the system."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:26
msgid ""
"**Ask for help**: If you run into trouble on something, ask your fellow "
"developers for help, via tickets, comments, or email, as appropriate."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:30
msgid "Quality Practices"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:32
msgid ""
"Packages can ascribe to different levels of quality based on the development "
"practices they adhere to, as per the guidelines in `REP 2004: Package "
"Quality Categories <https://www.ros.org/reps/rep-2004.html>`_. The "
"categories are differentiated by their policies on versioning, testing, "
"documentation, and more."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:35
msgid ""
"The following sections are the specific development rules we follow to "
"ensure core packages are of the highest quality ('Level 1'). We recommend "
"all ROS developers strive to adhere to the following policies to ensure "
"quality across the ROS ecosystem."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:39
msgid "Versioning"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:41
msgid ""
"We will use the `Semantic Versioning guidelines <http://semver.org/>`__ "
"(``semver``) for versioning."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:43
msgid ""
"We will also adhere to some ROS-specific rules built on top of ``semver's`` "
"full meaning:"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:45
msgid ""
"Major version increments (i.e. breaking changes) should not be made within a "
"released ROS distribution."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:47
msgid ""
"Patch (interface-preserving) and minor (non-breaking) version increments do "
"not break compatibility, so these sorts of changes *are* allowed within a "
"release."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:49
msgid ""
"Major ROS releases are the best time to release breaking changes. If a core "
"package needs multiple breaking changes, they should be merged into their "
"integration branch (e.g. master) to allow catching problems in CI quickly, "
"but released together to reduce the number of major releases for ROS users."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:52
msgid ""
"Though major increments require a new distribution, a new distribution does "
"not necessarily require a major bump (if development and release can happen "
"without breaking API)."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:54
msgid ""
"For compiled code, the ABI is considered part of the public interface. Any "
"change that requires recompiling dependent code is considered major "
"(breaking)."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:57
msgid ""
"ABI breaking changes *can* be made in a minor version bump *before* a "
"distribution release (getting added to the rolling release)."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:59
msgid ""
"We enforce API stability for core packages in Dashing and Eloquent even "
"though their major version components are ``0``, despite `SemVer's "
"specification <https://semver.org/#spec-item-4>`_ regarding initial "
"development."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:61
msgid ""
"Subsequently, packages should strive to reach a mature state and increase to "
"version ``1.0.0`` so to match ``semver's`` specifications."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:64
msgid "Caveats"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:66
msgid ""
"These rules are *best-effort*. In unlikely, extreme cases, it may be "
"necessary to break API within a major version/distribution. Whether an "
"unplanned break increments the major or minor version will be assessed on a "
"case-by-case basis."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:70
msgid ""
"For example, consider a situation involving released X-turtle, corresponding "
"to major version ``1.0.0``, and released Y-turtle, corresponding to major "
"version ``2.0.0``."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:72
msgid ""
"If an API-breaking fix is identified to be absolutely necessary in X-turtle, "
"bumping to ``2.0.0`` is obviously not an option because ``2.0.0`` already "
"exists."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:74
msgid ""
"The solutions for handling X-turtle's version in such a case, both non-"
"ideal, are:"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:76
msgid ""
"Bumping X-turtle's minor version: non-ideal because it violates SemVer's "
"principle that breaking changes must bump the major version."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:78
msgid ""
"Bumping X-turtle's major version past Y-turtle (to ``3.0.0``): non-ideal "
"because the older distro's version would become higher than the already-"
"available version of a newer distro, which would invalidate/break version-"
"specific conditional code."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:80
msgid ""
"The developer will have to decide which solution to use, or more "
"importantly, which principle they are willing to break. We cannot suggest "
"one or the other, but in either case we do require that explicit measures be "
"taken to communicate the disruption and its explanation to users manually "
"(beyond just the version increment)."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:83
msgid ""
"If there were no Y-turtle, even though the fix would technically just be a "
"patch, X-turtle would have to bump to ``2.0.0``. This case adheres to "
"SemVer, but breaks from our own rule that major increments should not be "
"introduced in a released distribution."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:86
msgid ""
"This is why we consider the versioning rules *best-effort*. As unlikely as "
"the examples above are, it is important to accurately define our versioning "
"system."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:90
msgid "Public API declaration"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:92
msgid ""
"According to ``semver``, every package must clearly declare a public API. We "
"will use the \"Public API Declaration\" section of the quality declaration "
"of a package to declare what symbols are part of the public API."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:95
msgid ""
"For most C and C++ packages the declaration is any header that it installs. "
"However, it is acceptable to define a set of symbols which are considered "
"private. Avoiding private symbols in headers can help with ABI stability, "
"but is not required."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:99
msgid ""
"For other languages like Python, a public API must be explicitly defined, so "
"that it is clear what symbols can be relied on with respect to the "
"versioning guidelines. The public API can also be extended to build "
"artifacts like configuration variables, CMake config files, etc. as well as "
"executables and command-line options and output. Any elements of the public "
"API should be clearly stated in the package's documentation. If something "
"you are using is not explicitly listed as part of the public API in the "
"package's documentation, then you cannot depend on it not changing between "
"minor or patch versions."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:105
msgid "Deprecation strategy"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:107
msgid ""
"Where possible, we will also use the tick-tock deprecation and migration "
"strategy for major version increments. New deprecations will come in a new "
"distribution release, accompanied by compiler warnings expressing that the "
"functionality is being deprecated. In the next release, the functionality "
"will be completely removed (no warnings)."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:111
msgid ""
"Example of function ``foo`` deprecated and replaced by function ``bar``:"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:114
msgid "Version"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:114
msgid "API"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:116
msgid "X-turtle"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:116
msgid "void foo();"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:117
msgid "Y-turtle"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:117
msgid "[[deprecated(\"use bar()\")]] void foo(); <br> void bar();"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:118
msgid "Z-turtle"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:118
msgid "void bar();"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:121
msgid ""
"We must not add deprecations after a distribution is released. Deprecations "
"do not necessarily require a major version bump, though. A deprecation can "
"be introduced in a minor version bump if the bump happens before the distro "
"is released (similar to ABI breaking changes)."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:125
msgid ""
"For example, if X-turtle begins development as ``2.0.0``, a deprecation can "
"be added in ``2.1.0`` before X-turtle is released."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:127
msgid ""
"We will attempt to maintain compatibility across distros as much as "
"possible. However, like the caveats associated with SemVer, tick-tock or "
"even deprecation in general may be impossible to completely adhere to in "
"certain cases."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:131
msgid "Change control process"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:133
msgid "All changes must go through a pull request."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:135
msgid ""
"We will enforce the `Developer Certificate of Origin (DCO) <https://"
"developercertificate.org/>`_ on pull requests in ROSCore repositories."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:137
msgid ""
"It requires all commit messages to contain the ``Signed-off-by`` line with "
"an email address that matches the commit author."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:139
msgid ""
"You can pass ``-s`` / ``--signoff`` to the ``git commit`` invocation or "
"write the expected message manually (e.g. ``Signed-off-by: Your Name "
"Developer <your.name@example.com>``)."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:141
msgid ""
"DCO is *not* required for pull requests that only address whitespace "
"removal, typo correction, and other `trivial changes <http://cr.openjdk.java."
"net/~jrose/draft/trivial-fixes.html>`_."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:143
msgid ""
"Always run CI jobs for all `tier 1 platforms <https://www.ros.org/reps/"
"rep-2000.html#support-tiers>`_ for every pull request and include links to "
"jobs in the pull request. (If you don't have access to the Jenkins jobs "
"someone will trigger the jobs for you.)"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:146
msgid ""
"A minimum of 1 approval from a fellow developer who did not author the pull "
"request is required to consider it approved. Approval is required before "
"merging."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:149
msgid "Packages may choose to increase this number."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:151
msgid ""
"Any required changes to documentation (API documentation, feature "
"documentation, release notes, etc.) must be proposed before merging related "
"changes."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:154
msgid "Guidelines for backporting PRs"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:156
msgid "When changing an older version of ROS:"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:158
msgid ""
"Make sure the features or fixes are accepted and merged in the master branch "
"before opening a PR to backport the changes to older versions."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:159
msgid ""
"When backporting to older versions, also backport to any [newer, still "
"supported versions](https://index.ros.org/doc/ros2/Releases/), even non-LTS "
"versions."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:160
msgid ""
"If you are backporting a single PR in its entirety, title the backport PR "
"\"[Distro] <name of original PR>\". If backporting a subset of changes from "
"one or multiple PRs, the title should be \"[Distro] <description of "
"changes>\"."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:162
msgid ""
"Link to all PRs whose changes you're backporting from the description of "
"your backport PR. In a Dashing backport of a Foxy change, you do not need to "
"link to the Eloquent backport of the same change."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:166
msgid "Documentation"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:168
msgid ""
"All packages should have these documentation elements present in their "
"README or linked to from their README:"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:170
msgid "Description and purpose"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:171
msgid "Definition and description of the public API"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:172
msgid "Examples"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:173
msgid "How to build and install (should reference external tools/workflows)"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:174
msgid "How to build and run tests"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:175
msgid "How to build documentation"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:176
msgid ""
"How to develop (useful for describing things like ``python setup.py "
"develop``)"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:177
msgid "License and copyright statements"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:179
msgid ""
"Each source file must have a license and copyright statement, checked with "
"an automated linter."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:181
msgid ""
"Each package must have a LICENSE file, typically the Apache 2.0 license, "
"unless the package has an existing permissive license (e.g. rviz uses three-"
"clause BSD)."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:183
msgid ""
"Each package should describe itself and its purpose assuming, as much as "
"possible, that the reader has stumbled onto it without previous knowledge of "
"ROS or other related projects."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:185
msgid ""
"Each package should define and describe its public API so that there is a "
"reasonable expectation for users about what is covered by the semantic "
"versioning policy. Even in C and C++, where the public API can be enforced "
"by API and ABI checking, it is a good opportunity to describe the layout of "
"the code and the function of each part of the code."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:188
msgid ""
"It should be easy to take any package and from that package's documentation "
"understand how to build, run, build and run tests, and build the "
"documentation. Obviously we should avoid repeating ourselves for common "
"workflows, like building a package in a workspace, but the basic workflows "
"should be either described or referenced."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:191
msgid ""
"Finally, it should include any documentation for developers. This might "
"include workflows for testing the code using something like ``python setup."
"py develop``, or it might mean describing how to make use of extension "
"points provided by your package."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:194
msgid "Examples:"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:196
msgid "capabilities: https://docs.ros.org/hydro/api/capabilities/html/"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:198
msgid "This one gives an example of docs which describe the public API"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:200
msgid ""
"catkin_tools: https://catkin-tools.readthedocs.org/en/latest/development/"
"extending_the_catkin_command.html"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:202
msgid "This is an example of describing an extension point for a package"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:204
msgid "*(API docs are not yet being automatically generated)*"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:207
msgid "Testing"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:209
msgid ""
"All packages should have some level of system, integration, and/or unit "
"tests."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:211
msgid ""
"**Unit tests** should always be in the package which is being tested and "
"should make use of tools like ``Mock`` to try and test narrow parts of the "
"code base in constructed scenarios. Unit tests should not bring in test "
"dependencies that are not testing tools, e.g. gtest, nosetest, pytest, mock, "
"etc..."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:214
msgid ""
"**Integration tests** can test interactions between parts of the code or "
"between parts of the code and the system. They often test software "
"interfaces in ways that we expect the user to use them. Like Unit tests, "
"Integration tests should be in the package which is being tested and should "
"not bring in non-tool test dependencies unless absolutely necessary, i.e. "
"all non-tool dependencies should only be allowed under extreme scrutiny so "
"they should be avoided if possible."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:218
msgid ""
"**System tests** are designed to test end-to-end situations between packages "
"and should be in their own packages to avoid bloating or coupling packages "
"and to avoid circular dependencies."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:220
msgid ""
"In general minimizing external or cross package test dependencies should be "
"avoided to prevent circular dependencies and tightly coupled test packages."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:222
msgid ""
"All packages should have some unit tests and possibly integration tests, but "
"the degree to which they should have them is based on the package's quality "
"category. The following subsections apply to 'Level 1' packages:"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:226
msgid "Code coverage"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:228
msgid ""
"We will provide line coverage, and achieve line coverage above 95%. If a "
"lower percentage target is justifiable, it must be prominently documented. "
"We may provide branch coverage, or exclude code from coverage (test code, "
"debug code, etc.). We require that coverage increase or stay the same before "
"merging a change, but it may be acceptable to make a change that decreases "
"code coverage with proper justification (e.g. deleting code that was "
"previously covered can cause the percentage to drop)."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:234
msgid "Performance"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:236
msgid ""
"We strongly recommend performance tests, but recognize they don't make sense "
"for some packages. If there are performance tests, we will choose to either "
"check each change or before each release or both. We will also require "
"justification for merging a change or making a release that lowers "
"performance."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:241
msgid "Linters and static analysis"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:243
msgid ""
"We will use :ref:`ROS code style <CodeStyle>` and enforce it with linters "
"from `ament_lint_common <https://github.com/ament/ament_lint/tree/master/"
"ament_lint_common/doc/index.rst>`_. All linters/static analysis that are "
"part of ``ament_lint_common`` must be used."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:246
msgid ""
"The `ament_lint_auto <https://github.com/ament/ament_lint/blob/master/"
"ament_lint_auto/doc/index.rst>`_ documentation provides information on "
"running ``ament_lint_common``."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:249
msgid "General Practices"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:251
msgid "Some practices are common to all ROS 2 development."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:253
msgid ""
"These practices don't affect package quality level as described in `REP 2004 "
"<https://www.ros.org/reps/rep-2004.html>`_, but are still highly recommended "
"for the development process."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:256
msgid "Issues"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:258
msgid "When filing an issue please make sure to:"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:260
msgid ""
"Include enough information for another person to understand the issue. In "
"ROS 2, the following points are needed for narrowing down the cause of an "
"issue. Testing with as many alternatives in each category as feasible will "
"be especially helpful."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:264
msgid ""
"**The operating system and version.** Reasoning: ROS 2 supports multiple "
"platforms, and some bugs are specific to particular versions of operating "
"systems/compilers."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:266
msgid ""
"**The installation method.** Reasoning: Some issues only manifest if ROS 2 "
"has been installed from \"fat archives\" or from Debians. This can help us "
"determine if the issue is with the packaging process."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:269
msgid ""
"**The specific version of ROS 2.** Reasoning: Some bugs may be present in a "
"particular ROS 2 release and later fixed. It is important to know if your "
"installation includes these fixes."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:272
msgid ""
"**The DDS/RMW implementation being used** (see `this page <../Tutorials/"
"Working-with-multiple-RMW-implementations>` for how to determine which one). "
"Reasoning: Communication issues may be specific to the underlying ROS "
"middleware being used."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:274
msgid ""
"**The ROS 2 client library being used.** Reasoning: This helps us narrow "
"down the layer in the stack at which the issue might be."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:277
msgid "Include a list of steps to reproduce the issue."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:278
msgid ""
"In case of a bug consider to provide a `short, self contained, correct "
"(compilable), example <http://sscce.org/>`__. Issues are much more likely to "
"be resolved if others can reproduce them easily."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:281
msgid "Mention troubleshooting steps that have been tried already, including:"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:283
msgid ""
"Upgrading to the latest version of the code, which may include bug fixes "
"that have not been released yet. See `this section <building-from-source>` "
"and follow the instructions to get the \"master\" branches."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:285
msgid ""
"Trying with a different RMW implementation. See `this page <../Tutorials/"
"Working-with-multiple-RMW-implementations>` for how to do that."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:289
msgid "Pull requests"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:291
msgid ""
"A pull request should only focus on one change. Separate changes should go "
"into separate pull requests. See `GitHub's guide to writing the perfect pull "
"request <https://github.com/blog/1943-how-to-write-the-perfect-pull-"
"request>`__."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:295
msgid ""
"A patch should be minimal in size and avoid any kind of unnecessary changes."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:297
msgid "A pull request must contain minimum number of meaningful commits."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:299
msgid "You can create new commits while the pull request is under review."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:301
msgid ""
"Before merging a pull request all changes should be squashed into a small "
"number of semantic commits to keep the history clear."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:303
msgid ""
"But avoid squashing commits while a pull request is under review. Your "
"reviewers might not notice that you made the change, thereby introducing "
"potential for confusion. Plus, you're going to squash before merging anyway; "
"there's no benefit to doing it early."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:307
msgid ""
"Any developer is welcome to review and approve a pull request (see `General "
"Principles`_)."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:309
msgid ""
"When you start reviewing a pull request, comment on the pull request so that "
"other developers know that you're reviewing it."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:311
msgid ""
"Pull-request review is not read-only, with the reviewer making comments and "
"then waiting for the author to address them. As a reviewer, feel free to "
"make minor improvements (typos, style issues, etc.) in-place. As the opener "
"of a pull-request, if you are working in a fork, checking the box to `allow "
"edits from upstream contributors <https://github.com/blog/2247-improving-"
"collaboration-with-forks>`__ will assist with the aforementioned. As a "
"reviewer, also feel free to make more substantial improvements, but consider "
"putting them in a separate branch (either mention the new branch in a "
"comment, or open another pull request from the new branch to the original "
"branch)."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:316
msgid ""
"Any developer (the author, the reviewer, or somebody else) can merge any "
"approved pull request."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:319
msgid "Library versioning"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:321
msgid ""
"We will version all libraries within a package together. This means that "
"libraries inherit their version from the package. This keeps library and "
"package versions from diverging and shares reasoning with the policy of "
"releasing packages which share a repository together. If you need libraries "
"to have different versions then consider splitting them into different "
"packages."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:327
msgid "Development process"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:329
msgid ""
"The default branch (in most cases the master branch) must always build, pass "
"all tests and compile without warnings. If at any time there is a regression "
"it is the top priority to restore at least the previous state."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:331
msgid "Always build with tests enabled."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:332
msgid ""
"Always run tests locally after changes and before proposing them in a pull "
"request. Besides using automated tests, also run the modified code path "
"manually to ensure that the patch works as intended."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:334
msgid ""
"Always run CI jobs for all platforms for every pull request and include "
"links to the jobs in the pull request."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:336
msgid ""
"For more details on recommended software development workflow, see `Software "
"Development Lifecycle`_ section."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:339
msgid "Changes to RMW API"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:341
msgid ""
"When updating `RMW API <https://github.com/ros2/rmw>`__, it is required that "
"RMW implementations for the Tier 1 middleware libraries are updated as well. "
"For example, a new function ``rmw_foo()`` introduced to the RMW API must be "
"implemented in the following packages (as of ROS Foxy):"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:344
msgid "`rmw_fastrtps <https://github.com/ros2/rmw_fastrtps>`__"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:345
msgid "`rmw_connext <https://github.com/ros2/rmw_connext>`__"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:346
msgid "`rmw_cyclonedds <https://github.com/ros2/rmw_cyclonedds>`__"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:348
msgid ""
"Updates for non-Tier 1 middleware libraries should also be considered if "
"feasible (e.g. depending on the size of the change). See `REP-2000 <https://"
"www.ros.org/reps/rep-2000.html#crystal-clemmys-december-2018-"
"december-2019>`__ for the list of middleware libraries and their tiers."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:352
msgid "Tracking tasks"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:354
msgid ""
"To help organize work on ROS 2, the core ROS 2 development team uses kanban-"
"style `GitHub project boards <https://github.com/orgs/ros2/projects>`_."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:356
msgid ""
"Not all issues and pull requests are tracked on the project boards, however. "
"A board usually represents an upcoming release or specific project. Tickets "
"can be browsed on a per-repo basis by browsing the `ROS 2 repositories' "
"<https://github.com/ros2>`_ individual issue pages."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:360
msgid ""
"The names and purposes of columns in any given ROS 2 project board vary, but "
"typically follow the same general structure:"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:362
msgid ""
"**To do**: Issues that are relevant to the project, ready to be assigned"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:364
msgid ""
"**In progress**: Active pull requests on which work is currently in progress"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:366
msgid ""
"**In review**: Pull requests where work is complete and ready for review, "
"and for those currently under active review"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:368
msgid ""
"**Done**: Pull requests and related issues are merged/closed (for "
"informational purposes)"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:371
msgid ""
"To request permission to make changes, simply comment on the tickets you're "
"interested in. Depending on the complexity, it might be useful to describe "
"how you plan to address it. We will update the status (if you don't have the "
"permission) and you can start working on a pull request. If you contribute "
"regularly we will likely just grant you permission to manage the labels etc. "
"yourself."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:377
msgid "Programming conventions"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:379
msgid ""
"Defensive programming: ensure that assumptions are held as early as "
"possible. E.g. check every return code and make sure to at least throw an "
"exception until the case is handled more gracefully."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:381
msgid "All error messages must be directed to ``stderr``."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:382
msgid "Declare variables in the narrowest scope possible."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:383
msgid ""
"Keep group of items (dependencies, imports, includes, etc.) ordered "
"alphabetically."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:386
msgid "C++ specific"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:388
msgid ""
"Avoid using direct streaming (``<<``) to ``stdout`` / ``stderr`` to prevent "
"interleaving between multiple threads."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:389
msgid ""
"Avoid using references for ``std::shared_ptr`` since that subverts the "
"reference counting. If the original instance goes out of scope and the "
"reference is being used it accesses freed memory."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:393
msgid "Filesystem layout"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:395
msgid ""
"The filesystem layout of packages and repositories should follow the same "
"conventions in order to provide a consistent experience for users browsing "
"our source code."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:398
msgid "Package layout"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:400
msgid "``src``: contains all C and C++ code"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:402
msgid "Also contains C/C++ headers which are not installed"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:404
msgid "``include``: contains all C and C++ headers which are installed"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:406
msgid ""
"``<package name>``: for all C and C++ installed headers they should be "
"folder namespaced by the package name"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:408
msgid "``<package_name>``: contains all Python code"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:409
msgid "``test``: contains all automated tests and test data"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:410
msgid "``doc``: contains all the documentation"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:411
msgid ""
"``package.xml``: as defined by `REP-0140 <https://www.ros.org/reps/rep-0140."
"html>`_ (may be updated for prototyping)"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:412
msgid "``CMakeLists.txt``: only ROS packages which use CMake"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:413
msgid "``setup.py``: only ROS packages which use Python code only"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:414
msgid "``README``: can be rendered on GitHub as a landing page for the project"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:416
msgid ""
"This can be as short or detailed as is convenient, but it should at least "
"link to project documentation"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:417
msgid "Consider putting a CI or code coverage tag in this README"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:418
msgid "It can also be ``.rst`` or anything else that GitHub supports"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:420
msgid "``CONTRIBUTING``: describes the contribution guidelines"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:422
msgid ""
"This might include license implication, e.g. when using the Apache 2 License."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:424
msgid "``LICENSE``: a copy of the license or licenses for this package"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:425
msgid ""
"``CHANGELOG.rst``: `REP-0132 <https://www.ros.org/reps/rep-0132.html>`_ "
"compliant changelog"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:428
msgid "Repository layout"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:430
msgid ""
"Each package should be in a subfolder which has the same name as the "
"package. If a repository contains only a single package it can optionally be "
"in the root of the repository."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:434
msgid "Aspirational Practices"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:436
msgid ""
"Presently, we don't use adhere to the practices in this section, but believe "
"they would be beneficial to the development process and hope to employ them "
"officially in the future."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:439
msgid "Software Development Lifecycle"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:441
msgid ""
"This section describes step-by-step how to plan, design, and implement a new "
"feature:"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:443
msgid "Task Creation"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:444
msgid "Creating the Design Document"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:445
msgid "Design Review"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:446
#: ../../../source/Contributing/Developer-Guide.rst:523
msgid "Implementation"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:447
msgid "Code Review"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:450
msgid "Task creation"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:452
msgid ""
"Tasks requiring changes to critical parts of ROS 2 should have design "
"reviews during early stages of the release cycle. If a design review is "
"happening in the later stages, the changes will be part of a future release."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:455
msgid ""
"An issue should be created in the appropriate `ros2 repository <https://"
"github.com/ros2/>`__, clearly describing the task being worked on."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:457
msgid ""
"It should have a clear success criteria and highlight the concrete "
"improvements expected from it."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:458
msgid ""
"If the feature is targeting a ROS release, ensure this is tracked in the ROS "
"release ticket (`example <https://github.com/ros2/ros2/issues/607>`__)."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:461
msgid "Writing the design document"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:463
msgid ""
"Design docs must never include confidential information. Whether or not a "
"design document is required for your change depends on how big the task is."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:466
msgid "You are making a small change or fixing a bug:"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:468
msgid ""
"A design document is not required, but an issue should be opened in the "
"appropriate repository to track the work and avoid duplication of efforts."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:470
msgid ""
"You are implementing a new feature or would like to contribute to OSRF-owned "
"infrastructure (like Jenkins CI):"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:472
msgid ""
"Design doc is required and should be contributed to `ros2/design <https://"
"github.com/ros2/design/>`__ to be made accessible on https://design.ros2."
"org/."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:473
msgid ""
"You should fork the repository and submit a pull request detailing the "
"design."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:475
msgid ""
"Mention the related ros2 issue (for example, ``Design doc for task ros2/"
"ros2#<issue id>``) in the pull request or the commit message. Detailed "
"instructions are on the `ROS 2 Contribute <https://design.ros2.org/"
"contribute.html>`__ page. Design comments will be made directly on the pull "
"request."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:479
msgid ""
"If the task is planned to be released with a specific version of ROS, this "
"information should be included in the pull request."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:482
msgid "Design document review"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:484
msgid ""
"Once the design is ready for review, a pull request should be opened and "
"appropriate reviewers should be assigned. It is recommended to include "
"project owner(s) - maintainers of all impacted packages (as defined by "
"``package.xml`` maintainer field, see `REP-140 <https://www.ros.org/reps/"
"rep-0140.html#maintainer-multiple-but-at-least-one>`__) - as reviewers."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:488
msgid ""
"If the design doc is complex or reviewers have conflicting schedules, an "
"optional design review meeting can be set up. In this case,"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:491
msgid "**Before the meeting**"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:493
msgid "Send a meeting invite at least one week in advance"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:494
msgid "Meeting duration of one hour is recommended"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:495
msgid ""
"Meeting invite should list all decisions to be made during the review "
"(decisions requiring package maintainer approval)"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:496
msgid "Meeting required attendees: design pull request reviewers"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:497
msgid "Meeting optional attendees: all OSRF engineers, if applicable"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:499
msgid "**During the meeting**"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:501
msgid ""
"The task owner drives the meeting, presents their ideas and manages "
"discussions to ensure an agreement is reached on time"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:503
msgid "**After the meeting**"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:505
msgid "The task owner should send back meeting notes to all attendees"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:506
msgid "If minor issues have been raised about the design:"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:508
msgid ""
"The task owner should update the design doc pull request based on the "
"feedback"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:509
msgid "Additional review is not required"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:511
msgid "If major issues have been raised about the design:"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:513
msgid ""
"It is acceptable to remove sections for which there is no clear agreement"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:514
msgid ""
"The debatable parts of the design can be resubmitted as a separate task in "
"the future"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:515
msgid ""
"If removing the debatable parts is not an option, work directly with package "
"owners to reach an agreement"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:517
msgid "Once consensus is reached:"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:519
msgid ""
"Ensure the `ros2/design <https://github.com/ros2/design/>`__ pull request "
"has been merged, if applicable"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:520
msgid "Update and close the GitHub issue associated with this design task"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:525
msgid ""
"Before starting, go through the `Pull requests`_ section for best practices."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:527
msgid "For each repo to be modified:"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:529
msgid ""
"Modify the code, go to the next step if finished or at regular intervals to "
"backup your work."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:530
msgid ""
"`Self-review <https://git-scm.com/book/en/v2/Git-Tools-Interactive-"
"Staging>`__ your changes using ``git add -i``."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:531
msgid "Create a new signed commit using ``git commit -s``."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:533
msgid ""
"A pull request should contain minimal semantically meaningful commits (for "
"instance, a large number of 1-line commits is not acceptable). Create new "
"fixup commits while iterating on feedback, or optionally, amend existing "
"commits using ``git commit --amend`` if you don't want to create a new "
"commit every time."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:535
msgid ""
"Each commit must have a properly written, meaningful, commit message. More "
"instructions `here <https://chris.beams.io/posts/git-commit/>`__."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:537
msgid ""
"Moving files must be done in a separate commit, otherwise git may fail to "
"accurately track the file history."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:538
msgid ""
"Either the pull request description or the commit message must contain a "
"reference to the related ros2 issue, so it gets automatically closed when "
"the pull request is merged. See this `doc <https://help.github.com/articles/"
"closing-issues-using-keywords/>`__ for more details."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:540
msgid "Push the new commits."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:543
msgid "Code review"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:545
msgid "Once the change is ready for code review:"
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:547
msgid "Open a pull request for each modified repository."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:549
msgid "Remember to follow `Pull requests`_ best practices."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:550
msgid ""
"`GitHub <https://hub.github.com/>`__ can be used to create pull requests "
"from the command-line."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:551
msgid ""
"If the task is planned to be released with a specific version of ROS, this "
"information should be included in each pull request."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:553
msgid ""
"Package owners who reviewed the design document should be mentioned in the "
"pull request."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:554
msgid ""
"Code review SLO: although reviewing pull requests is best-effort, it is "
"helpful to have reviewers comment on pull requests within a week and code "
"authors to reply back to comments within a week, so there is no loss of "
"context."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:557
msgid ""
"Iterate on feedback as usual, amend and update the development branch as "
"needed."
msgstr ""

#: ../../../source/Contributing/Developer-Guide.rst:558
msgid "Once the PR is approved, package maintainers will merge the changes in."
msgstr ""
