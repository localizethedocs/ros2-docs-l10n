# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Open Robotics
# This file is distributed under the same license as the ros2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ros2 documentation eloquent\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 06:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:4
msgid "Understanding ROS 2 services"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:6
msgid "**Goal:** Learn about services in ROS 2 using command line tools."
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:8
msgid "**Tutorial level:** Beginner"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:10
msgid "**Time:** 10 minutes"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:14
msgid "Contents"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:17
msgid "Background"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:19
msgid ""
"Services are another method of communication for nodes on the ROS graph. "
"Services are based on a call-and-response model, versus topics’ publisher-"
"subscriber model. While topics allow nodes to subscribe to data streams and "
"get continual updates, services only provide data when they are specifically "
"called by a client."
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:28
msgid "Prerequisites"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:30
msgid ""
"Some concepts mentioned in this tutorial, like :ref:`nodes <ROS2Nodes>` and :"
"ref:`topics <ROS2Topics>`, were covered in previous tutorials in the series."
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:32
msgid "You will need the :ref:`turtlesim package <Turtlesim>`"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:34
msgid ""
"As always, don’t forget to source ROS 2 in :ref:`every new terminal you open "
"<ConfigROS2>`."
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:37
msgid "Tasks"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:40
msgid "1 Setup"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:41
msgid ""
"Start up the two turtlesim nodes, ``/turtlesim`` and ``/teleop_turtle``."
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:43
msgid "Open a new terminal and run:"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:45
msgid "ros2 run turtlesim turtlesim_node"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:49
msgid "Open another terminal and run:"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:51
msgid "ros2 run turtlesim turtle_teleop_key"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:56
msgid "2 ros2 service list"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:58
msgid ""
"Running the ``ros2 service list`` command in a new terminal will return a "
"list of all the services currently active in the system:"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:60
msgid ""
"/clear\n"
"/kill\n"
"/reset\n"
"/spawn\n"
"/teleop_turtle/describe_parameters\n"
"/teleop_turtle/get_parameter_types\n"
"/teleop_turtle/get_parameters\n"
"/teleop_turtle/list_parameters\n"
"/teleop_turtle/set_parameters\n"
"/teleop_turtle/set_parameters_atomically\n"
"/turtle1/set_pen\n"
"/turtle1/teleport_absolute\n"
"/turtle1/teleport_relative\n"
"/turtlesim/describe_parameters\n"
"/turtlesim/get_parameter_types\n"
"/turtlesim/get_parameters\n"
"/turtlesim/list_parameters\n"
"/turtlesim/set_parameters\n"
"/turtlesim/set_parameters_atomically"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:82
msgid ""
"You will see that both nodes have the same six services with ``parameters`` "
"in their names. Nearly every node in ROS 2 has these infrastructure services "
"that parameters are built off of. There will be more about parameters in the "
"next tutorial. In this tutorial, the parameter services will be omitted from "
"discussion."
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:87
msgid ""
"For now, let’s focus on the turtlesim-specific services, ``/clear``, ``/"
"kill``, ``/reset``, ``/spawn``, ``/turtle1/set_pen``, ``/turtle1/"
"teleport_absolute``, and ``/turtle1/teleport_relative``. You may recall "
"interacting with some of these services using rqt in the :ref:`“Introducing "
"turtlesim and rqt” <Turtlesim>` tutorial."
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:92
msgid "3 ros2 service type"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:94
msgid ""
"Services have types that describe how the request and response data of a "
"service is structured. Service types are defined similarly to topic types, "
"except service types have two parts: one message for the request and another "
"for the response."
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:97
msgid "To find out the type of a service, use the command:"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:99
msgid "ros2 service type <service_name>"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:103
msgid ""
"Let’s take a look at turtlesim’s ``/clear`` service. In a new terminal, "
"enter the command:"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:106
msgid "ros2 service type /clear"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:110
msgid "Which should return:"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:112
msgid "std_srvs/srv/Empty"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:116
msgid ""
"The ``Empty`` type means the service call sends no data when making a "
"request and receives no data when receiving a response."
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:119
msgid "3.1 ros2 service list -t"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:121
msgid ""
"To see the types of all the active services at the same time, you can append "
"the ``--show-types`` option, abbreviated as ``-t``, to the ``list`` command:"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:123
msgid "ros2 service list -t"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:127
#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:156
#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:180
#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:201
msgid "Which will return:"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:129
msgid ""
"/clear [std_srvs/srv/Empty]\n"
"/kill [turtlesim/srv/Kill]\n"
"/reset [std_srvs/srv/Empty]\n"
"/spawn [turtlesim/srv/Spawn]\n"
"...\n"
"/turtle1/set_pen [turtlesim/srv/SetPen]\n"
"/turtle1/teleport_absolute [turtlesim/srv/TeleportAbsolute]\n"
"/turtle1/teleport_relative [turtlesim/srv/TeleportRelative]\n"
"..."
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:142
msgid "4 ros2 service find"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:144
msgid ""
"If you want to find all the services of a specific type, you can use the "
"command:"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:146
msgid "ros2 service find <type_name>"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:150
msgid "For example, you can find all the ``Empty`` typed services like this:"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:152
msgid "ros2 service find std_srvs/srv/Empty"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:158
msgid ""
"/clear\n"
"/reset"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:164
msgid "5 ros2 interface show"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:166
msgid ""
"You can call services from the command line, but first you need to know the "
"structure of the input arguments."
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:168
msgid "ros2 interface show <type_name>.srv"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:173
msgid "To run this command on the ``/clear`` service’s type, ``Empty``:"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:176
msgid "ros2 interface show std_srvs/srv/Empty.srv"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:182
msgid "---"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:186
msgid ""
"The ``---`` separates the request structure (above) from the response "
"structure (below). But, as you learned earlier, the ``Empty`` type doesn’t "
"send or receive any data. So, naturally, its structure is blank."
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:190
msgid ""
"Let’s introspect a service with a type that sends and receives data, like ``/"
"spawn``. From the results of ``ros2 service list -t``, we know ``/spawn``’s "
"type is ``turtlesim/srv/Spawn``."
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:193
msgid "To see the arguments in a ``/spawn`` call-and-request, run the command:"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:196
msgid "ros2 interface show turtlesim/srv/Spawn.srv"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:203
msgid ""
"float32 x\n"
"float32 y\n"
"float32 theta\n"
"string name # Optional.  A unique name will be created and returned if this "
"is empty\n"
"---\n"
"string name"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:212
msgid ""
"The information above the ``---`` line tells us the arguments needed to call "
"``/spawn``. ``x``, ``y`` and ``theta`` determine the location of the spawned "
"turtle, and ``name`` is clearly optional."
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:215
msgid ""
"The information below the line isn’t something you need to know in this "
"case, but it can help you understand the data type of the response you get "
"from the call."
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:218
msgid "6 ros2 service call"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:220
msgid ""
"Now that you know what a service type is, how to find a service’s type, and "
"how to find the structure of that type’s arguments, you can call a service "
"using:"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:222
msgid "ros2 service call <service_name> <service_type> <arguments>"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:226
msgid ""
"The ``<arguments>`` part is optional. For example, you know that ``Empty`` "
"typed services don’t have any arguments:"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:229
msgid "ros2 service call /clear std_srvs/srv/Empty"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:233
msgid ""
"This command will clear the turtlesim window of any lines your turtle has "
"drawn."
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:237
msgid ""
"Now let’s spawn a new turtle by calling ``/spawn`` and inputting arguments. "
"Input ``<arguments>`` in a service call from the command-line need to be in "
"YAML syntax."
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:240
msgid "Enter the command:"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:242
msgid ""
"ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, "
"name: ''}\""
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:246
msgid ""
"You will get this method-style view of what’s happening, and then the "
"service response:"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:248
msgid ""
"waiting for service to become available...\n"
"requester: making request: turtlesim.srv.Spawn_Request(x=2.0, y=2.0, "
"theta=0.2, name='None')\n"
"\n"
"response:\n"
"turtlesim.srv.Spawn_Response(name='None')"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:256
msgid ""
"Your turtlesim window will update with the newly spawned turtle right away:"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:261
msgid "Summary"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:263
msgid ""
"Nodes can communicate using services in ROS 2. Services only pass "
"information to a node if that node specifically requests it, and will only "
"do so once per request (not in a continuous stream). You generally don’t "
"want to use a service for continuous calls; topics or even actions would be "
"better suited."
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:267
msgid ""
"In this tutorial you used command line tools to identify, elaborate on, and "
"call services."
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:270
msgid "Next steps"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:272
msgid ""
"In the next tutorial, :ref:`ROS2Params`, you will learn about configuring "
"node settings."
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:275
msgid "Related content"
msgstr ""

#: ../../../source/Tutorials/Services/Understanding-ROS2-Services.rst:277
msgid ""
"Check out `this tutorial <https://discourse.ubuntu.com/t/call-services-in-"
"ros-2/15261>`_; it's an excellent realistic application of \"Understanding "
"ROS 2 services\" using a Robotis robot arm."
msgstr ""
