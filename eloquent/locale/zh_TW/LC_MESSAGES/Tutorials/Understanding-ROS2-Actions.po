# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Open Robotics
# This file is distributed under the same license as the ros2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ros2 documentation eloquent\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 06:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:4
msgid "Understanding ROS 2 actions"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:6
msgid "**Goal:** Introspect actions in ROS 2."
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:8
msgid "**Tutorial level:** Beginner"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:10
msgid "**Time:** 15 minutes"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:14
msgid "Contents"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:17
msgid "Background"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:19
msgid ""
"Actions are one of the communication types in ROS 2 intended for long "
"running tasks. They consist of three parts: a goal, a result, and feedback."
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:22
msgid ""
"Actions are built on topics and services. Their functionality is similar to "
"services, except actions are preemptable (you can cancel them while "
"executing). They also provide steady feedback, as opposed to services which "
"return a single response."
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:26
msgid ""
"Actions use a client-server model, similar to the publisher-subscriber model "
"(described in the :ref:`topics tutorial <ROS2Topics>`). The “action client” "
"node sends a goal to an “action server” node that acknowledges the goal and "
"returns a stream of feedback and a result."
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:32
msgid "Prerequisites"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:34
msgid ""
"This tutorial builds off concepts, like :ref:`nodes <ROS2Nodes>` and :ref:"
"`topics <ROS2Topics>`, covered in previous tutorials."
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:36
msgid "This tutorial uses the :ref:`turtlesim package <Turtlesim>`."
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:38
msgid ""
"As always, don’t forget to source ROS 2 in :ref:`every new terminal you open "
"<ConfigROS2>`."
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:41
msgid "Tasks"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:44
msgid "1 Setup"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:46
msgid ""
"Start up the two turtlesim nodes, ``/turtlesim`` and ``/teleop_turtle``."
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:48
msgid "Open a new terminal and run:"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:50
msgid "ros2 run turtlesim turtlesim_node"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:54
msgid "Open another terminal and run:"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:56
msgid "ros2 run turtlesim turtle_teleop_key"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:62
msgid "2 Use actions"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:64
msgid ""
"When you launch the ``/teleop_turtle`` node, you will see the following "
"message in your terminal:"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:66
msgid ""
"Use arrow keys to move the turtle.\n"
"Use G|B|V|C|D|E|R|T keys to rotate to absolute orientations. 'F' to cancel a "
"rotation."
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:71
msgid ""
"Let’s focus on the second line, which corresponds to an action. (The first "
"instruction corresponds to the “cmd_vel” topic, discussed previously in the :"
"ref:`topics tutorial <ROS2Topics>`.)"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:74
msgid ""
"Notice that the letter keys ``G|B|V|C|D|E|R|T`` form a “box” around the "
"``F`` key on your keyboard. Each key’s position around ``F`` corresponds to "
"that orientation in turtlesim. For example, the ``E`` will rotate the "
"turtle’s orientation to the upper left corner."
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:78
msgid ""
"Pay attention to the terminal where the ``/turtlesim`` node is running. Each "
"time you press one of these keys, you are sending a goal to an action server "
"that is part of the ``/turtlesim`` node. The goal is to rotate the turtle to "
"face a particular direction. A message relaying the result of the goal "
"should display once the turtle completes its rotation:"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:83
msgid "[INFO] [turtlesim]: Rotation goal completed successfully"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:87
msgid ""
"The ``F`` key will cancel a goal mid-execution, demonstrating the "
"preemptable feature of actions."
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:89
msgid ""
"Try pressing the ``C`` key, and then pressing the ``F`` key before the "
"turtle can complete its rotation. In the terminal where the ``/turtlesim`` "
"node is running, you will see the message:"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:92
msgid "[INFO] [turtlesim]: Rotation goal canceled"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:96
msgid ""
"Not only can the client-side (your input in the teleop) preempt goals, but "
"the server-side (the ``/turtlesim`` node) can as well. When the server-side "
"preempts an action, it “aborts” the goal."
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:99
msgid ""
"Try hitting the ``D`` key, then the ``G`` key before the first rotation can "
"complete. In the terminal where the ``/turtlesim`` node is running, you will "
"see the message:"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:102
msgid ""
"[WARN] [turtlesim]: Rotation goal received before a previous goal finished. "
"Aborting previous goal"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:106
msgid "The server-side aborted the first goal because it was interrupted."
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:109
msgid "3 ros2 node info"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:111
msgid ""
"To see the ``/turtlesim`` node’s actions, open a new terminal and run the "
"command:"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:113
msgid "ros2 node info /turtlesim"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:117
msgid ""
"Which will return a list of ``/turtlesim``’s subscribers, publishers, "
"services, action servers and action clients:"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:119
msgid ""
"/turtlesim\n"
"  Subscribers:\n"
"    /parameter_events: rcl_interfaces/msg/ParameterEvent\n"
"    /turtle1/cmd_vel: geometry_msgs/msg/Twist\n"
"  Publishers:\n"
"    /parameter_events: rcl_interfaces/msg/ParameterEvent\n"
"    /rosout: rcl_interfaces/msg/Log\n"
"    /turtle1/color_sensor: turtlesim/msg/Color\n"
"    /turtle1/pose: turtlesim/msg/Pose\n"
"  Services:\n"
"    /clear: std_srvs/srv/Empty\n"
"    /kill: turtlesim/srv/Kill\n"
"    /reset: std_srvs/srv/Empty\n"
"    /spawn: turtlesim/srv/Spawn\n"
"    /turtle1/set_pen: turtlesim/srv/SetPen\n"
"    /turtle1/teleport_absolute: turtlesim/srv/TeleportAbsolute\n"
"    /turtle1/teleport_relative: turtlesim/srv/TeleportRelative\n"
"    /turtlesim/describe_parameters: rcl_interfaces/srv/DescribeParameters\n"
"    /turtlesim/get_parameter_types: rcl_interfaces/srv/GetParameterTypes\n"
"    /turtlesim/get_parameters: rcl_interfaces/srv/GetParameters\n"
"    /turtlesim/list_parameters: rcl_interfaces/srv/ListParameters\n"
"    /turtlesim/set_parameters: rcl_interfaces/srv/SetParameters\n"
"    /turtlesim/set_parameters_atomically: rcl_interfaces/srv/"
"SetParametersAtomically\n"
"  Action Servers:\n"
"    /turtle1/rotate_absolute: turtlesim/action/RotateAbsolute\n"
"  Action Clients:"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:148
msgid ""
"Notice that the ``/turtle1/rotate_absolute`` action for ``/turtlesim`` is "
"under ``Action Servers``. This means ``/turtlesim`` responds to and provides "
"feedback for the ``/turtle1/rotate_absolute`` action."
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:151
msgid ""
"The ``/teleop_turtle`` node has the name ``/turtle1/rotate_absolute`` under "
"``Action Clients`` meaning that it sends goals for that action name."
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:153
msgid "ros2 node info /teleop_turtle"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:157
#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:190
#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:210
#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:254
msgid "Which will return:"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:159
msgid ""
"/teleop_turtle\n"
"  Subscribers:\n"
"    /parameter_events: rcl_interfaces/msg/ParameterEvent\n"
"  Publishers:\n"
"    /parameter_events: rcl_interfaces/msg/ParameterEvent\n"
"    /rosout: rcl_interfaces/msg/Log\n"
"    /turtle1/cmd_vel: geometry_msgs/msg/Twist\n"
"  Services:\n"
"    /teleop_turtle/describe_parameters: rcl_interfaces/srv/"
"DescribeParameters\n"
"    /teleop_turtle/get_parameter_types: rcl_interfaces/srv/"
"GetParameterTypes\n"
"    /teleop_turtle/get_parameters: rcl_interfaces/srv/GetParameters\n"
"    /teleop_turtle/list_parameters: rcl_interfaces/srv/ListParameters\n"
"    /teleop_turtle/set_parameters: rcl_interfaces/srv/SetParameters\n"
"    /teleop_turtle/set_parameters_atomically: rcl_interfaces/srv/"
"SetParametersAtomically\n"
"  Action Servers:\n"
"\n"
"  Action Clients:\n"
"    /turtle1/rotate_absolute: turtlesim/action/RotateAbsolute"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:182
msgid "4 ros2 action list"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:184
msgid "To identify all the actions in the ROS graph, run the command:"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:186
msgid "ros2 action list"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:192
msgid "/turtle1/rotate_absolute"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:196
msgid ""
"This is the only action in the ROS graph right now. It controls the turtle’s "
"rotation, as you saw earlier. You also already know that there is one action "
"client (part of ``/teleop_turtle``) and one action server (part of ``/"
"turtlesim``) for this action from using the ``ros2 node info <node_name>`` "
"command."
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:201
msgid "4.1 ros2 action list -t"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:203
msgid ""
"Actions have types, similar to topics and services. To find ``/turtle1/"
"rotate_absolute``'s type, run the command:"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:206
msgid "ros2 action list -t"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:212
msgid "/turtle1/rotate_absolute [turtlesim/action/RotateAbsolute]"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:216
msgid ""
"In brackets to the right of each action name (in this case only ``/turtle1/"
"rotate_absolute``) is the action type, ``turtlesim/action/RotateAbsolute``. "
"You will need this when you want to execute an action from the command line "
"or from code."
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:220
msgid "5 ros2 action info"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:222
msgid ""
"You can further introspect the ``/turtle1/rotate_absolute`` action with the "
"command:"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:224
msgid "ros2 action info /turtle1/rotate_absolute"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:228
msgid "Which will return"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:230
msgid ""
"Action: /turtle1/rotate_absolute\n"
"Action clients: 1\n"
"    /teleop_turtle\n"
"Action servers: 1\n"
"    /turtlesim"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:238
msgid ""
"This tells us what we learned earlier from running ``ros2 node info`` on "
"each node: The ``/teleop_turtle`` node has an action client and the ``/"
"turtlesim`` node has an action server for the ``/turtle1/rotate_absolute`` "
"action."
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:243
msgid "6 ros2 interface show"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:245
msgid ""
"One more piece of information you will need before sending or executing an "
"action goal yourself is the structure of the action type."
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:247
msgid ""
"Recall that you identified ``/turtle1/rotate_absolute``’s type when running "
"the command ``ros2 action list -t``. Enter the following command with the "
"action type in your terminal:"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:250
msgid "ros2 interface show turtlesim/action/RotateAbsolute.action"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:256
msgid ""
"# The desired heading in radians\n"
"float32 theta\n"
"---\n"
"# The angular displacement in radians to the starting position\n"
"float32 delta\n"
"---\n"
"# The remaining rotation in radians\n"
"float32 remaining"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:267
msgid ""
"The first section of this message, above the ``---``, is the structure (data "
"type and name) of the goal request. The next section is the structure of the "
"result. The last section is the structure of the feedback."
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:272
msgid "7 ros2 action send_goal"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:274
msgid ""
"Now let’s send an action goal from the command line with the following "
"syntax:"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:276
msgid "ros2 action send_goal <action_name> <action_type> <values>"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:280
msgid "``<values>`` need to be in YAML format."
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:282
msgid ""
"Keep an eye on the turtlesim window, and enter the following command into "
"your terminal:"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:284
msgid ""
"ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/"
"RotateAbsolute \"{theta: 1.57}\""
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:288
msgid ""
"You should see the turtle rotating, as well as the following message in your "
"terminal:"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:290
msgid ""
"Waiting for an action server to become available...\n"
"Sending goal:\n"
"   theta: 1.57\n"
"\n"
"Goal accepted with ID: f8db8f44410849eaa93d3feb747dd444\n"
"\n"
"Result:\n"
"  delta: -1.568000316619873\n"
"\n"
"Goal finished with status: SUCCEEDED"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:303
msgid ""
"All goals have a unique ID, shown in the return message. You can also see "
"the result, a field with the name ``delta``, which is the displacement to "
"the starting position."
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:306
msgid ""
"To see the feedback of this goal, add ``--feedback`` to the last command you "
"ran. First, make sure you change the value of ``theta``. After running the "
"previous command, the turtle will already be at the orientation of ``1.57`` "
"radians, so it won’t move unless you pass a new ``theta``."
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:310
msgid ""
"ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/"
"RotateAbsolute \"{theta: -1.57}\" --feedback"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:314
msgid "Your terminal will return the message:"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:316
msgid ""
"Sending goal:\n"
"   theta: -1.57\n"
"\n"
"Goal accepted with ID: e6092c831f994afda92f0086f220da27\n"
"\n"
"Feedback:\n"
"  remaining: -3.1268222332000732\n"
"\n"
"Feedback:\n"
"  remaining: -3.1108222007751465\n"
"\n"
"…\n"
"\n"
"Result:\n"
"  delta: 3.1200008392333984\n"
"\n"
"Goal finished with status: SUCCEEDED"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:336
msgid ""
"You will continue to receive feedback, the remaining radians, until the goal "
"is complete."
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:339
msgid "Summary"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:341
msgid ""
"Actions are like services that allow you to execute long running tasks, "
"provide regular feedback, and are cancelable."
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:343
msgid ""
"A robot system would likely use actions for navigation. An action goal could "
"tell a robot to travel to a position. While the robot navigates to the "
"position, it can send updates along the way (i.e. feedback), and then a "
"final result message once it's reached its destination."
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:347
msgid ""
"Turtlesim has an action server that action clients can send goals to for "
"rotating turtles. In this tutorial, you introspected that action, ``/turtle1/"
"rotate_absolute``, to get a better idea of what actions are and how they "
"work."
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:351
msgid "Next steps"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:353
msgid ""
"Now you've covered all of the core ROS 2 concepts. The last few tutorials in "
"the \"Users\" set will introduce you to some tools and techniques that will "
"make using ROS 2 easier, starting with :ref:`rqt_console`."
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:357
msgid "Related content"
msgstr ""

#: ../../../source/Tutorials/Understanding-ROS2-Actions.rst:359
msgid ""
"You can read more about the design decisions behind actions in ROS 2 `here "
"<https://design.ros2.org/articles/actions.html>`__."
msgstr ""
