# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Open Robotics
# This file is distributed under the same license as the ros2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ros2 documentation eloquent\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 06:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/Installation/Windows-Development-Setup.rst:3
msgid "Building ROS 2 on Windows"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:7
msgid "Table of Contents"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:9
msgid ""
"This guide is about how to setup a development environment for ROS 2 on "
"Windows."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:12
msgid "Prerequisites"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:14
msgid ""
"First follow the steps for `Installing Prerequisites <windows-install-binary-"
"installing-prerequisites>` on the Binary Installation page."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:16
msgid "Stop and return here when you reach the \"Downloading ROS 2\" section."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:19
msgid "Additional prerequisites"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:21
msgid ""
"When building from source you'll need a few additional prerequisites "
"installed."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:24
msgid "Install additional prerequisites from Chocolatey"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:26
msgid "First install git:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:28
msgid "> choco install -y git"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:32
msgid ""
"You will need to append the Git cmd folder ``C:\\Program Files\\Git\\cmd`` "
"to the PATH (you can do this by clicking the Windows icon, typing "
"\"Environment Variables\", then clicking on \"Edit the system environment "
"variables\". In the resulting dialog, click \"Environment Variables\", the "
"click \"Path\" on the bottom pane, then click \"Edit\" and add the path)."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:35
msgid "Then install ``patch``:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:37
msgid "> choco install -y patch"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:41
msgid ""
"You may need to close the cmd prompt and open a new one, but at this point "
"you should be able to run ``git``\\ , ``python``\\ , ``cmake``\\ , and "
"``patch.exe --version``."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:44
msgid "Install developer tools"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:46
msgid ""
"Now we are ready to install some our tools that we use to help in developing "
"ROS 2."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:48
msgid "Let's start with ``vcstool``:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:50
msgid "> pip install -U vcstool"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:54
msgid ""
"You can test it out by just running ``vcs`` (you should be able to do this "
"in the same cmd prompt)."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:56
msgid "Next, install ``colcon``:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:58
msgid "> pip install -U colcon-common-extensions"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:62
msgid ""
"You can test it out by just running ``colcon`` (you should be able to do "
"this in the same cmd prompt)."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:64
msgid "Also, you should install ``curl``:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:66
msgid "> choco install -y curl"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:71
msgid "Install dependencies"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:73
msgid "Next install the latest version of ``setuptools`` and ``pip``:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:75
msgid "> <PATH_TO_PYTHON_EXECUTABLE> -m pip install -U setuptools pip"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:79
msgid ""
"Where ``PATH_TO_PYTHON_EXECUTABLE`` looks like: ``c:\\python37\\python.exe``"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:81
msgid "Then you can continue installing other Python dependencies:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:83
msgid ""
"> pip install -U catkin_pkg cryptography EmPy ifcfg lark-parser lxml numpy "
"pyparsing pyyaml"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:87
msgid "Next install testing tools like ``pytest`` and others:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:89
msgid "> pip install -U pytest pytest-mock coverage mock"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:93
msgid "Next install linters and checkers like ``flake8`` and others:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:95
msgid ""
"> pip install -U flake8 flake8-blind-except flake8-builtins flake8-class-"
"newline flake8-comprehensions flake8-deprecated flake8-docstrings flake8-"
"import-order flake8-quotes mypy pep8 pydocstyle"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:99
msgid "Next install cppcheck:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:101
msgid "> choco install -y cppcheck"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:105
msgid "Next install xmllint:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:107
msgid ""
"Download the `64 bit binary archives <https://www.zlatkovic.com/pub/"
"libxml/64bit/>`__ of ``libxml2`` (and its dependencies ``iconv`` and "
"``zlib``) from https://www.zlatkovic.com/projects/libxml/"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:108
msgid "Unpack all archives into e.g. ``C:\\xmllint``"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:109
msgid "Add ``C:\\xmllint\\bin`` to the ``PATH``."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:112
msgid "Install Qt5"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:114
msgid ""
"This section is only required if you are building rviz, but it comes with "
"our default set of sources, so if you don't know, then assume you are "
"building it."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:116
msgid "First get the installer from Qt's website:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:118
msgid "https://www.qt.io/download"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:120
msgid ""
"Select the Open Source version and then the ``Qt Online Installer for "
"Windows``."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:122
msgid ""
"Run the installer and install Qt5. We recommend you install it to the "
"default location of ``C:\\Qt``, but if you choose somewhere else, make sure "
"to update the paths below accordingly. When selecting components to install, "
"the only thing you absolutely need for bouncy and later is the appropriate "
"MSVC 64-bit component under the ``Qt`` -> ``Qt 5.10.0`` tree. We're using "
"``5.10.0`` as of the writing of this document and that's what we recommend "
"since that's all we test on Windows, but later version will probably work "
"too. For bouncy and later, be sure to select ``MSVC 2017 64-bit``. For "
"ardent use ``MSVC 2015 64-bit``. After that, the default settings are fine."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:129
msgid ""
"Finally, set the ``Qt5_DIR`` environment variable in the ``cmd.exe`` where "
"you intend to build so that CMake can find it:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:131
msgid ""
"> set Qt5_DIR=C:\\Qt\\5.10.0\\msvc2017_64\n"
": You could set it permanently with ``setx -m Qt5_DIR C:"
"\\Qt\\5.10.0\\msvc2017_64`` instead, but that requires Administrator."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:138
msgid ""
"This path might change based on which MSVC version you're using or if you "
"installed it to a different directory."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:140
msgid ""
"Set the environment variable QT_QPA_PLATFORM_PLUGIN_PATH to run some of the "
"Qt examples:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:142
msgid ""
"> set QT_QPA_PLATFORM_PLUGIN_PATH=C:"
"\\Qt\\5.12.2\\msvc2017_64\\plugins\\platforms\n"
": You could set it permanently with ``setx -m QT_QPA_PLATFORM_PLUGIN_PATH C:"
"\\Qt\\5.12.2\\msvc2017_64\\plugins\\platforms`` instead, but that requires "
"Administrator."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:147
msgid ""
"You can also do this by clicking the Windows icon, typing \"Environment "
"Variables\", then clicking on \"Edit the system environment variables\". In "
"the resulting dialog, click \"Environment Variables\", the click \"Path\" on "
"the bottom pane, then click \"Edit\" and add the path)."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:150
msgid "RQt dependencies"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:152
msgid "> pip install -U pydot PyQt5"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:157
msgid "Get the ROS 2 code"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:159
msgid ""
"Now that we have the development tools we can get the ROS 2 source code."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:161
msgid ""
"First setup a development folder, for example ``C:\\dev\\ros2_eloquent``:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:163
msgid ""
"> md \\dev\\ros2_eloquent\\src\n"
"> cd \\dev\\ros2_eloquent"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:168
msgid ""
"Get the ``ros2.repos`` file which defines the repositories to clone from:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:170
msgid ""
"# CMD\n"
"> curl -sk https://raw.githubusercontent.com/ros2/ros2/eloquent/ros2.repos -"
"o ros2.repos\n"
"\n"
"# PowerShell\n"
"> curl https://raw.githubusercontent.com/ros2/ros2/eloquent/ros2.repos -o "
"ros2.repos"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:178
msgid ""
"Next you can use ``vcs`` to import the repositories listed in the ``ros2."
"repos`` file:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:180
msgid ""
"# CMD\n"
"> vcs import src < ros2.repos\n"
"\n"
"# PowerShell\n"
"> vcs import --input ros2.repos src"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:189
msgid "Install additional DDS implementations (optional)"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:191
msgid ""
"If you would like to use another DDS or RTPS vendor besides the default, "
"eProsima's Fast RTPS, you can find instructions `here <DDS-Implementations>`."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:194
msgid "Build the ROS 2 code"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:198
msgid ""
"To build ROS 2 you will need a Visual Studio Command Prompt (\"x64 Native "
"Tools Command Prompt for VS 2019\") running as Administrator."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:200
msgid ""
"Fast RTPS is bundled with the ROS 2 source and will always be built unless "
"you put an ``AMENT_IGNORE`` file in the ``src\\eProsima`` folder."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:202
msgid "To build the ``\\dev\\ros2_eloquent`` folder tree:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:204
msgid "> colcon build --merge-install"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:210
msgid ""
"We're using ``--merge-install`` here to avoid a ``PATH`` variable that is "
"too long at the end of the build. If you're adapting these instructions to "
"build a smaller workspace then you might be able to use the default behavior "
"which is isolated install, i.e. where each package is installed to a "
"different folder."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:215
msgid ""
"If you are doing a debug build use ``python_d path\\to\\colcon_executable`` "
"``colcon``. See `Extra stuff for debug mode`_ for more info on running "
"Python code in debug builds on Windows."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:219
msgid "Environment setup"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:221
msgid ""
"Start a command shell and source the ROS 2 setup file to set up the "
"workspace:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:223
msgid "> call C:\\dev\\ros2_eloquent\\install\\local_setup.bat"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:227
msgid ""
"This will automatically set up the environment for any DDS vendors that "
"support was built for."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:229
msgid ""
"It is normal that the previous command, if nothing else went wrong, outputs "
"\"The system cannot find the path specified.\" exactly once."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:232
msgid "Test and run"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:234
msgid ""
"Note that the first time you run any executable you will have to allow "
"access to the network through a Windows Firewall popup."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:236
msgid "You can run the tests using this command:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:238
msgid "> colcon test --merge-install"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:244
msgid ""
"``--merge-install`` should only be used if it was also used in the build "
"step."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:246
msgid "Afterwards you can get a summary of the tests using this command:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:248
msgid "> colcon test-result"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:252
msgid ""
"To run the examples, first open a clean new ``cmd.exe`` and set up the "
"workspace by sourcing the ``local_setup.bat`` file. Then, run a C++ "
"``talker``\\ :"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:255
msgid ""
"> call install\\local_setup.bat\n"
"> ros2 run demo_nodes_cpp talker"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:260
msgid ""
"In a separate shell you can do the same, but instead run a Python "
"``listener``\\ :"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:262
msgid ""
"> call install\\local_setup.bat\n"
"> ros2 run demo_nodes_py listener"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:267
msgid ""
"You should see the ``talker`` saying that it's ``Publishing`` messages and "
"the ``listener`` saying ``I heard`` those messages. This verifies both the C+"
"+ and Python APIs are working properly. Hooray!"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:273
msgid ""
"It is not recommended to build in the same cmd prompt that you've sourced "
"the ``local_setup.bat``."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:276
msgid "Next steps after installing"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:277
msgid ""
"Continue with the `tutorials and demos </Tutorials>` to configure your "
"environment, create your own workspace and packages, and learn ROS 2 core "
"concepts."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:280
msgid "Using the ROS 1 bridge"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:281
msgid ""
"The ROS 1 bridge can connect topics from ROS 1 to ROS 2 and vice-versa. See "
"the dedicated `documentation <https://github.com/ros2/ros1_bridge/blob/"
"master/README.md>`__ on how to build and use the ROS 1 bridge."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:284
msgid "Additional RMW implementations (optional)"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:285
msgid ""
"The default middleware that ROS 2 uses is ``Fast-RTPS``, but the middleware "
"(RMW) can be replaced at runtime. See the `tutorial </Tutorials/Working-with-"
"multiple-RMW-implementations>` on how to work with multiple RMWs."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:290
msgid "Extra stuff for Debug mode"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:292
msgid ""
"If you want to be able to run all the tests in Debug mode, you'll need to "
"install a few more things:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:295
msgid "To be able to extract the Python source tarball, you can use PeaZip:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:297
msgid "> choco install -y peazip"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:302
msgid ""
"You'll also need SVN, since some of the Python source-build dependencies are "
"checked out via SVN:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:304
msgid "> choco install -y svn hg"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:309
msgid ""
"You'll need to quit and restart the command prompt after installing the "
"above."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:310
msgid "Get and extract the Python 3.7.3 source from the ``tgz``:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:312
msgid "https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tgz"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:313
msgid ""
"To keep these instructions concise, please extract it to ``C:"
"\\dev\\Python-3.7.3``"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:315
msgid ""
"Now, build the Python source in debug mode from a Visual Studio command "
"prompt:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:317
msgid ""
"> cd C:\\dev\\Python-3.7.3\\PCbuild\n"
"> get_externals.bat\n"
"> build.bat -p x64 -d"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:324
msgid ""
"Finally, copy the build products into the Python37 installation directories, "
"next to the Release-mode Python executable and DLL's:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:326
msgid ""
"> cd C:\\dev\\Python-3.7.3\\PCbuild\\amd64\n"
"> copy python_d.exe C:\\Python37 /Y\n"
"> copy python37_d.dll C:\\Python37 /Y\n"
"> copy python3_d.dll C:\\Python37 /Y\n"
"> copy python37_d.lib C:\\Python37\\libs /Y\n"
"> copy python3_d.lib C:\\Python37\\libs /Y\n"
"> for %I in (*_d.pyd) do copy %I C:\\Python37\\DLLs /Y"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:337
msgid "Now, from a fresh command prompt, make sure that ``python_d`` works:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:339
msgid ""
"> python_d\n"
"> import _ctypes"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:344
msgid ""
"Once you have verified the operation of ``python_d``, it is necessary to "
"reinstall a few dependencies with the debug-enabled libraries:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:346
msgid ""
"> python_d -m pip install --force-reinstall https://github.com/ros2/ros2/"
"releases/download/numpy-archives/numpy-1.16.2-cp37-cp37dm-win_amd64.whl\n"
"> python_d -m pip install --force-reinstall https://github.com/ros2/ros2/"
"releases/download/lxml-archives/lxml-4.3.2-cp37-cp37dm-win_amd64.whl"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:351
msgid "To verify the installation of these dependencies:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:353
msgid ""
"> python_d\n"
"# No import errors should appear when executing the following lines\n"
"> from lxml import etree\n"
"> import numpy"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:360
msgid ""
"When you wish to return to building release binaries, it is necessary to "
"uninstall the debug variants and use the release variants:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:362
msgid ""
"> python -m pip uninstall numpy lxml\n"
"> python -m pip install numpy lxml"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:367
msgid ""
"To create executables python scripts(.exe), python_d should be used to "
"invoke colcon"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:369
msgid "> python_d path\\to\\colcon_executable build"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:373
msgid "Hooray, you're done!"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:376
msgid "Stay up to date"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:378
msgid ""
"See :ref:`MaintainingSource` to periodically refresh your source "
"installation."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:381
msgid "Troubleshooting"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:383
msgid ""
"Troubleshooting techniques can be found :ref:`here <windows-"
"troubleshooting>`."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:386
msgid "Uninstall"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:388
msgid ""
"If you installed your workspace with colcon as instructed above, "
"\"uninstalling\" could be just a matter of opening a new terminal and not "
"sourcing the workspace's ``setup`` file. This way, your environment will "
"behave as though there is no Eloquent install on your system."
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:391
msgid ""
"If you're also trying to free up space, you can delete the entire workspace "
"directory with:"
msgstr ""

#: ../../../source/Installation/Windows-Development-Setup.rst:393
msgid "rmdir /s /q \\ros2_eloquent"
msgstr ""
