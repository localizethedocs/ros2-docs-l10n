# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation rolling\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-18 08:29+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:2
msgid "Setting up a Reset Handler"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:4
msgid ""
"**Goal:** Extend a robot simulation with a reset handler to restart nodes "
"when the reset button of Webots is pressed."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:6
msgid "**Tutorial level:** Advanced"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:8
msgid "**Time:** 10 minutes"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:12
msgid "Contents"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:15
msgid "Background"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:17
msgid ""
"In this tutorial, you will learn how to implement a reset handler in a robot "
"simulation using Webots. The Webots reset button reverts the world to the "
"initial state and restarts controllers. It is convenient as it quickly "
"resets the simulation, but in the context of ROS 2, robot controllers are "
"not started again making the simulation stop. The reset handler allows you "
"to restart specific nodes or perform additional actions when the reset "
"button in Webots is pressed. This can be useful for scenarios where you need "
"to reset the state of your simulation or restart specific components without "
"completely restarting the complete ROS system."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:24
msgid "Prerequisites"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:26
msgid ""
"Before proceeding with this tutorial, make sure you have completed the "
"following:"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:28
msgid ""
"Understanding of ROS 2 nodes and topics covered in the beginner :doc:"
"`../../../../Tutorials`."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:29
msgid "Knowledge of Webots and ROS 2 and its interface package."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:30
msgid "Familiarity with :doc:`./Setting-Up-Simulation-Webots-Basic`."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:34
msgid "Reset Handler for Simple Cases (Controllers Only)"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:36
msgid "In the launch file of your package, add the ``respawn`` parameter."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:38
msgid ""
"def generate_launch_description():\n"
"    robot_driver = WebotsController(\n"
"        robot_name='my_robot',\n"
"        parameters=[\n"
"            {'robot_description': robot_description_path}\n"
"        ],\n"
"\n"
"        # Every time one resets the simulation the controller is "
"automatically respawned\n"
"        respawn=True\n"
"    )\n"
"\n"
"    # Starts Webots\n"
"    webots = WebotsLauncher(world=PathJoinSubstitution([package_dir, "
"'worlds', world]))\n"
"\n"
"    return LaunchDescription([\n"
"        webots,\n"
"        robot_driver\n"
"    ])"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:59
msgid ""
"On reset, Webots kills all driver nodes. Therefore, to start them again "
"after reset, you should set the ``respawn`` property of the driver node to "
"``True``. It will ensure driver nodes are up and running after the reset."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:64
msgid "Reset Handler for Multiple Nodes (No Shutdown Required)"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:66
msgid ""
"If you have some other nodes that have to be started along with the driver "
"node (e.g. ``ros2_control`` nodes), then you can use the ``OnProcessExit`` "
"event handler:"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:68
msgid ""
"def get_ros2_control_spawners(*args):\n"
"    # Declare here all nodes that must be restarted at simulation reset\n"
"    ros_control_node = Node(\n"
"        package='controller_manager',\n"
"        executable='spawner',\n"
"        arguments=['diffdrive_controller']\n"
"    )\n"
"    return [\n"
"        ros_control_node\n"
"    ]\n"
"\n"
"def generate_launch_description():\n"
"    robot_driver = WebotsController(\n"
"        robot_name='my_robot',\n"
"        parameters=[\n"
"            {'robot_description': robot_description_path}\n"
"        ],\n"
"\n"
"        # Every time one resets the simulation the controller is "
"automatically respawned\n"
"        respawn=True\n"
"    )\n"
"\n"
"    # Starts Webots\n"
"    webots = WebotsLauncher(world=PathJoinSubstitution([package_dir, "
"'worlds', world]))\n"
"\n"
"    # Declare the reset handler that respawns nodes when robot_driver exits\n"
"    reset_handler = launch.actions.RegisterEventHandler(\n"
"        event_handler=launch.event_handlers.OnProcessExit(\n"
"            target_action=robot_driver,\n"
"            on_exit=get_ros2_control_spawners,\n"
"        )\n"
"    )\n"
"\n"
"    return LaunchDescription([\n"
"        webots,\n"
"        robot_driver,\n"
"        reset_handler\n"
"    ] + get_ros2_control_spawners())"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:109
msgid ""
"It is not possible to use the ``respawn`` property on the ``ros2_control`` "
"node, as the spawner exits during launch time and not when the simulation is "
"reset. Instead we should declare a list of nodes in a function (e.g. "
"``get_ros2_control_spawners``). The nodes of this list are started along "
"other nodes when executing the launch file. With the ``reset_handler``, the "
"function is also declared as action to start when the ``robot_driver`` node "
"exits, which corresponds to the moment when the simulation is reset in the "
"Webots interface. The ``robot_driver`` node still has the ``respawn`` "
"property set to ``True``, so that it gets restarted along with "
"``ros2_control`` nodes."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:116
msgid "Reset Handler Requiring Node Shutdown"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:118
msgid ""
"With the current ROS 2 launch API, there is no way to make the reset work in "
"launch files where nodes need to be shutdown before the restart (e.g. "
"``Nav2`` or ``RViz``). The reason is that currently, ROS 2 doesn't allow to "
"shutdown specific nodes from a launch file. There is a solution, but it "
"requires to manually restart nodes after pushing the reset button."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:122
msgid ""
"Webots needs to be started in a specific launch file without other nodes."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:124
msgid ""
"def generate_launch_description():\n"
"    # Starts Webots\n"
"    webots = WebotsLauncher(world=PathJoinSubstitution([package_dir, "
"'worlds', world]))\n"
"\n"
"    return LaunchDescription([\n"
"        webots\n"
"    ])"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:135
msgid ""
"A second launch file must be started from another process. This launch file "
"contains all other nodes, including robot controllers/plugins, Navigation2 "
"nodes, RViz, state publishers, etc."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:138
msgid ""
"def generate_launch_description():\n"
"    robot_driver = WebotsController(\n"
"        robot_name='my_robot',\n"
"        parameters=[\n"
"            {'robot_description': robot_description_path}\n"
"        ]\n"
"    )\n"
"\n"
"    ros_control_node = Node(\n"
"        package='controller_manager',\n"
"        executable='spawner',\n"
"        arguments=['diffdrive_controller']\n"
"    )\n"
"\n"
"    nav2_node = IncludeLaunchDescription(\n"
"        PythonLaunchDescriptionSource(os.path.join(\n"
"            get_package_share_directory('nav2_bringup'), 'launch', "
"'bringup_launch.py')),\n"
"        launch_arguments=[\n"
"            ('map', nav2_map),\n"
"            ('params_file', nav2_params),\n"
"        ],\n"
"    )\n"
"\n"
"    rviz = Node(\n"
"        package='rviz2',\n"
"        executable='rviz2',\n"
"        output='screen'\n"
"    )\n"
"\n"
"    # Declare the handler that shuts all nodes down when robot_driver exits\n"
"    shutdown_handler = launch.actions.RegisterEventHandler(\n"
"        event_handler=launch.event_handlers.OnProcessExit(\n"
"            target_action=robot_driver,\n"
"            on_exit=[launch.actions.EmitEvent(event=launch.events."
"Shutdown())],\n"
"        )\n"
"    )\n"
"\n"
"    return LaunchDescription([\n"
"        robot_driver,\n"
"        ros_control_node,\n"
"        nav2_node,\n"
"        rviz,\n"
"        shutdown_handler\n"
"    ])"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:185
msgid ""
"The second launch file contains a handler that triggers a shutdown event "
"when the driver node exits (which is the case when the simulation is reset). "
"This second launch file must be manually restarted from the command line "
"after pressing the reset button."
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:189
msgid "Summary"
msgstr ""

#: ../../../source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst:191
msgid ""
"In this tutorial, you learned how to implement a reset handler in a robot "
"simulation using Webots. The reset handler allows you to restart specific "
"nodes or perform additional actions when the reset button in Webots is "
"pressed. You explored different approaches based on the complexity of your "
"simulation and the requirements of your nodes."
msgstr ""
