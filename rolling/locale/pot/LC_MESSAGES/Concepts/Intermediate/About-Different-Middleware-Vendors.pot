# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation rolling\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-18 08:29+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:7
msgid "Different ROS 2 middleware vendors"
msgstr ""

#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:10
msgid "Table of Contents"
msgstr ""

#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:12
msgid ""
"ROS 2 supports multiple middleware implementations which provide discovery, "
"serialisation, and transportation communications. This flexibility exists "
"because it is not necessarily \"one size fits all\" when it comes to "
"choosing a middleware vendor/implementation. While primarily built on top of "
"DDS/RTPS as its initial middleware foundation, the ROS 2 ecosystem has "
"expanded to include other middleware architectures such as Zenoh."
msgstr ""

#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:17
msgid "DDS middleware"
msgstr ""

#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:19
msgid ""
"`DDS <https://www.omg.org/omg-dds-portal>`__ is an industry standard which "
"is implemented by a range of vendors, such as RTI's `Connext DDS <https://"
"www.rti.com/products/>`__, eProsima's `Fast DDS <https://fast-dds.docs."
"eprosima.com/>`__, Eclipse's `Cyclone DDS <https://projects.eclipse.org/"
"projects/iot.cyclonedds>`__, or GurumNetworks's `GurumDDS <https://gurum.cc/"
"index_eng>`__. RTPS (a.k.a. `DDSI-RTPS <https://www.omg.org/spec/DDSI-RTPS/"
"About-DDSI-RTPS/>`__\\ ) is the wire protocol used by DDS to communicate "
"over the network."
msgstr ""

#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:22
msgid ""
"`This article <https://design.ros2.org/articles/ros_on_dds.html>`__ explains "
"the motivation behind using DDS implementations, and/or the RTPS wire "
"protocol of DDS, in detail. In summary, DDS is an end-to-end middleware that "
"provides features which are relevant to ROS systems, such as distributed "
"discovery (not centralized like in ROS 1) and control over different "
"\"Quality of Service\" (a.k.a. QoS) options for the transportation."
msgstr ""

#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:26
msgid "Zenoh middleware"
msgstr ""

#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:28
msgid ""
"`Zenoh <https://docs.ros.org/en/rolling/Installation/RMW-Implementations/Non-"
"DDS-Implementations/Working-with-Zenoh.html>`_ is a protocol that integrates "
"internet-scale publish/subscribe with distributed querying. It is designed "
"for efficient communication in a wide range of deployments that vary from "
"server-grade hardware and networks to resource-constrained edge devices. "
"Zenoh extends the privilege of location transparency to storage data, "
"allowing queries to be addressed with no concerns about where the data is "
"stored."
msgstr ""

#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:32
msgid ""
"As an RMW implementation for ROS 2, Zenoh offers a more lightweight "
"alternative to DDS and maintains Quality of Service features (in Zenoh, "
"there are essentially no \"incompatible\" QoS settings). Its minimal wire "
"overhead and flexible routing make Zenoh well-suited for challenging network "
"conditions."
msgstr ""

#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:36
msgid "Supported RMW implementations"
msgstr ""

#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:41
msgid "Product name"
msgstr ""

#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:42
msgid "License"
msgstr ""

#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:43
msgid "RMW implementation"
msgstr ""

#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:44
msgid "Status"
msgstr ""

#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:45
msgid "eProsima *Fast DDS*"
msgstr ""

#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:46
msgid "Apache 2"
msgstr ""

#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:47
msgid "``rmw_fastrtps_cpp``"
msgstr ""

#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:48
msgid "Full support. Default RMW. Packaged with binary releases."
msgstr ""

#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:51
msgid "Eclipse *Cyclone DDS*"
msgstr ""

#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:52
#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:67
msgid "Eclipse Public License v2.0"
msgstr ""

#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:53
msgid "``rmw_cyclonedds_cpp``"
msgstr ""

#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:54
msgid "Full support. Packaged with binary releases."
msgstr ""

#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:56
msgid "RTI *Connext DDS*"
msgstr ""

#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:57
msgid "Commercial, research"
msgstr ""

#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:58
msgid "``rmw_connextdds``"
msgstr ""

#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:59
msgid ""
"Full support. Support included in binaries, but Connext installed separately."
msgstr ""

#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:61
msgid "GurumNetworks *GurumDDS*"
msgstr ""

#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:62
msgid "Commercial"
msgstr ""

#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:63
msgid "``rmw_gurumdds_cpp``"
msgstr ""

#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:64
msgid ""
"Community support. Support included in binaries, but GurumDDS installed "
"separately."
msgstr ""

#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:66
msgid "Eclipse *Zenoh*"
msgstr ""

#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:68
msgid "``rmw_zenoh_cpp``"
msgstr ""

#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:69
msgid "Full support. Packaged with binary releases starting with Kilted Kaiju."
msgstr ""

#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:72
msgid ""
"For practical information on working with multiple RMW implementations, see "
"the :doc:`\"Working with multiple RMW implementations\" <../../How-To-Guides/"
"Working-with-multiple-RMW-implementations>` tutorial."
msgstr ""

#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:75
msgid "Choosing a middleware implementation"
msgstr ""

#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:77
msgid ""
"There are many factors you might consider while choosing a middleware "
"implementation: logistical considerations like the license, or technical "
"considerations like platform availability, resource utilisation, or "
"computation footprint. Vendors may provide more than one middleware "
"implementation targeted at meeting different needs."
msgstr ""

#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:80
msgid ""
"For example, RTI has a few variations of their Connext implementation that "
"vary in purpose, like one that specifically targets microcontrollers and "
"another which targets applications requiring special safety certifications "
"(we only support their standard desktop version at this time). Eclipse "
"offers both Cyclone DDS and Zenoh. Cyclone DDS is one of the lighter DDS "
"implementations, optimised for real-time deterministic communication, while "
"Zenoh is designed for IoT and edge computing scenarios where high "
"throughput, low latency, and interoperability across heterogeneous "
"environments are primary concerns."
msgstr ""

#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:84
msgid ""
"In order to use a middleware implementation with ROS 2, a \"\\ **R**\\ OS "
"**M**\\ iddle\\ **w**\\ are interface\" (a.k.a. ``rmw`` interface or just "
"``rmw``\\ ) package needs to be created that implements the abstract ROS "
"middleware interface using that specific implementation's API and tools. "
"It's a lot of work to implement and maintain RMW packages for supporting "
"various middleware implementations, but this diversity is important for "
"ensuring that the ROS 2 codebase is not tied to any one particular "
"implementation, as users may wish to switch out implementations depending on "
"their project's needs."
msgstr ""

#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:88
msgid "Multiple RMW implementations"
msgstr ""

#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:90
msgid ""
"The ROS 2 binary releases for currently active distros have built-in support "
"for several RMW implementations out of the box (Fast DDS, RTI Connext Pro, "
"Eclipse Cyclone DDS, GurumNetworks GurumDDS). Beginning with ROS 2 Kilted "
"Kaiju, this also includes Eclipse Zenoh. The default is Fast DDS, which "
"works without any additional installation steps because we distribute it "
"with our binary packages."
msgstr ""

#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:94
msgid ""
"RMWs other than Fast DDS, like Cyclone DDS, Connext or GurumDDS can be "
"enabled by :doc:`installing additional packages <../../Installation/RMW-"
"Implementations>`, and without having to rebuild anything or replace any "
"existing packages."
msgstr ""

#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:96
msgid ""
"A ROS 2 workspace that has been built from source may build and install "
"multiple RMW implementations simultaneously. While the core ROS 2 code is "
"being compiled, any RMW implementation that is found will be built if the "
"relevant middleware implementation has been installed properly and the "
"relevant environment variables have been configured. For example, if the "
"code for the `RMW package for RTI Connext DDS <https://github.com/ros2/"
"rmw_connextdds>`__ is in the workspace, it will be built if an installation "
"of RTI's Connext Pro can also be found."
msgstr ""

#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:100
msgid ""
"If a ROS 2 workspace has multiple RMW implementations, Fast DDS is selected "
"as the default RMW implementation if it is available. If Fast DDS is not "
"installed, the default middleware will be selected based on alphabetical "
"order of the package identifiers. The implementation identifier is the name "
"of the ROS package that provides the RMW implementation, e.g. "
"``rmw_cyclonedds_cpp``. For example, if both ``rmw_cyclonedds_cpp`` and "
"``rmw_connextdds`` ROS packages are installed, ``rmw_connextdds`` would be "
"the default. If ``rmw_fastrtps_cpp`` is ever installed, it would be the "
"default."
msgstr ""

#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:106
msgid ""
"See the :doc:`guide <../../How-To-Guides/Working-with-multiple-RMW-"
"implementations>` for how to specify which RMW implementation is to be used "
"when running the ROS 2 examples."
msgstr ""

#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:111
msgid "Cross-Vendor Communication among DDS middleware"
msgstr ""

#: ../../../source/Concepts/Intermediate/About-Different-Middleware-Vendors.rst:113
msgid ""
"For many cases you will find that nodes using different DDS middleware "
"implementations are able to communicate, however this is not true under all "
"circumstances. While the different DDS implementations may be compatible in "
"limited circumstances, this is not guaranteed. Thus it is suggested that "
"users ensure that all parts of a distributed system are using the same ROS "
"version and the same RMW implementation."
msgstr ""
