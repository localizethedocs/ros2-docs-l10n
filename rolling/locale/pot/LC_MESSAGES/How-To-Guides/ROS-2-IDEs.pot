# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation rolling\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 06:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:2
msgid "IDEs and Debugging [community-contributed]"
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:4
msgid ""
"ROS 2 is not made around a specific development environment and the main "
"focus is on building / running from the command line. Nonetheless Integrated "
"Development Environments (IDEs) can be used to develop, run and/or debug ROS "
"2 nodes."
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:7
msgid ""
"Below are listed some IDEs and instructions on how to use them with ROS 2."
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:13
msgid "Contents"
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:16
msgid "General"
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:22
msgid "Installed Python Code"
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:24
msgid "By default, when building workspaces with:"
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:26
msgid "$ colcon build"
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:30
msgid ""
"The Python code will be coped over into the ``build``/``install`` "
"directories. So when attaching a debugger to a ``ros2 run`` command from "
"within an IDE, the code being run (from the ``build``/``install``) is not "
"the same as the files opened in the IDE project."
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:33
msgid "There are 2 options to deal with this:"
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:35
msgid ""
"Open the source files from ``build``/``install`` directory and place "
"breakpoints there."
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:36
msgid ""
"Build the workspace with the `--symlink-install <https://colcon.readthedocs."
"io/en/released/reference/verb/build.html#command-line-arguments>`__ flag to "
"colcon, which will symlink the source files to the ``build``/``install`` "
"directory instead."
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:40
msgid "Visual Studio Code"
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:42
msgid ""
"`VSCode <https://code.visualstudio.com/>`_ is a versatile and free "
"development environment."
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:44
msgid ""
"VSCode is relatively easy to use with ROS 2. Simply activate your "
"environment in a command line and start the VSCode application from the same "
"terminal and use as normal. So:"
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:48
#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:178
msgid "Create your ROS workspace as you would normally."
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:49
msgid ""
"In a terminal, source both ROS 2 and your install (if it was built already)."
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:50
msgid ""
"Start VSCode from the same command line. The terminal will be blocked until "
"the application is closed again."
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:55
#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:155
msgid "Linux"
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:57
msgid ""
"$ source /opt/ros/rolling/setup.bash\n"
"$ cd ~/dev_ws\n"
"$ source ./install/setup.bash\n"
"$ /usr/bin/code ./src/my_node/"
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:64
msgid "macOS"
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:66
msgid ""
"$ . ~/ros2_install/ros2-osx/setup.bash\n"
"$ cd ~/dev_ws\n"
"$ . ./install/setup.bash\n"
"$ /Applications/Visual Studio Code.app/Contents/Resources/app/bin/code ./src/"
"my_node/"
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:73
#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:173
msgid "Windows"
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:75
msgid "In a Windows command line interface:"
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:77
msgid ""
"$ call C:\\dev\\ros2\\local_setup.bat\n"
"$ cd C:\\dev_ws\n"
"$ call .\\install\\local_setup.bat\n"
"$ \"C:\\Program Files\\Microsoft VS Code\\Code.exe\" .\\src\\my_node\\"
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:84
msgid "Or in powershell:"
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:86
msgid ""
"$ C:\\dev\\ros2\\local_setup.ps1\n"
"$ cd C:\\dev_ws\n"
"$ .\\install\\local_setup.ps1\n"
"$ & \"C:\\Program Files\\Microsoft VS Code\\Code.exe\" .\\src\\my_node\\"
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:94
msgid ""
"VSCode and any terminal created inside VSCode will correctly inherit from "
"the parent environment and should have ROS and installed package available."
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:98
msgid ""
"After adding packages or making major changes you might need to source your "
"install again. The simplest way to do this is to close VSCode and restart it "
"as above."
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:103
msgid "Python"
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:105
msgid ""
"In your workspace, verify the correct interpreter is used. Through sourcing "
"the basic command ``python`` should be correct, but VSCode likes to resort "
"to an absolute path for Python. In the bottom right corner click on "
"\"Selected Python Interpreter\" to change it."
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:109
msgid ""
"If your ROS 2 Python version is from a virtual environment, VSCode will try "
"to source it at each run command. But we already started VSCode from a "
"sourced environment, so this extra step is not necessary. You can disable "
"this for the current workspace by finding \"Settings\" > \"Extensions\" > "
"\"Python\" > \"Activate Environment\" and disabling the check."
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:113
msgid ""
"Now simply run a file or create a configuration in ``launch.json``. "
"Debugging a node is easiest by creating a configuration like a ``python ..."
"`` command, instead of ``ros2 run/launch ...``. An example of ``launch."
"json`` could be:"
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:117
msgid ""
"{\n"
"    \"version\": \"0.2.0\",\n"
"    \"configurations\": [\n"
"        {\n"
"            \"name\": \"Python: File\",\n"
"            \"type\": \"python\",\n"
"            \"request\": \"launch\",\n"
"            \"program\": \"my_node.py\"\n"
"        },\n"
"    ]\n"
"}"
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:132
msgid ""
"Instead you could also create a configuration for attaching to a running "
"process, under \"Attach using Process Id\"."
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:135
msgid ""
"See :doc:`Setup ROS 2 with VSCode and Docker<Setup-ROS-2-with-VSCode-and-"
"Docker-Container>` for full instructions on how to use VSCode, in "
"combination with Docker."
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:139
msgid "PyCharm"
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:141
msgid ""
"`PyCharm <https://www.jetbrains.com/pycharm/>`_ is an IDE specifically for "
"Python."
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:143
msgid "Of course it can only be meaningfully used for nodes made in Python."
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:145
msgid ""
"With PyCharm you can either attach to an existing process (probably started "
"by you via ``ros2 run ...`` or ``ros2 launch ...``) or run the node directly "
"from Python (equivalent to ``python [file.py]``."
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:149
msgid "Integrate for code inspection"
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:151
msgid ""
"You can setup your PyCharm project such that it is fully aware of ROS 2 "
"code, allowing code completion and suggestion."
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:157
msgid "Open a terminal, source ROS and start PyCharm:"
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:159
msgid ""
"$ source /opt/ros/humble/setup.bash\n"
"$ cd path/to/dev_ws\n"
"$ /opt/pycharm/bin/pycharm.sh"
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:165
msgid "After selecting the correct interpreter, everything should work."
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:169
msgid "This is untested."
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:175
msgid ""
"First sourcing ROS and then starting PyCharm from the command line seems to "
"have no effect on Windows. Instead, some settings need to be tweaked."
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:179
msgid "Start PyCharm normally."
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:180
msgid ""
"Open a project. This should be the root directory of the ROS node you're "
"developing, e.g. ``C:\\dev_ws\\src\\my_node``."
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:182
msgid ""
"Click \"Add new interpreter\" > \"Add local interpreter...\". Select a "
"system interpreter (or virtual environment if you're using one) and select "
"the executable of your ROS Python version (typically ``C:\\Python38\\python."
"exe``)."
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:185
msgid ""
"If you now open one of your code files, you will see warnings about missing "
"imports. Trying to run the file will confirm these issues."
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:188
msgid ""
"Under the \"Python Interpreters\" window, find and select your ROS "
"interpreter. Edit the name to something recognizable. More importantly, now "
"click the \"Show Interpreter Paths\" button."
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:191
msgid ""
"In the new window, you will see the paths already associated with this "
"interpreter. Click the \"+\" button and add two more paths (according to "
"your ROS install):"
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:194
msgid "``C:\\dev\\ros2_humble\\bin``"
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:195
msgid "``C:\\dev\\ros2_humble\\Lib\\site-packages``"
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:197
msgid ""
"PyCharm will re-index and when finished it should correctly interpret your "
"project, recognising the ROS 2 system packages. You can navigate through "
"code, get completion and read doc blurbs as expected."
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:201
msgid ""
"If there are dependencies built alongside with your package, they are "
"probably not yet recognized and result in invalid IDE warnings and runtime "
"errors."
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:203
msgid "Resolve this by:"
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:205
msgid ""
"Making sure the ``PATH`` override in the run/debug configuration includes "
"both the ROS 2 install and your workspace, e.g.:"
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:207
msgid ""
"$ C:\\dev\\ros2_humble\\local_setup.ps1\n"
"$ C:\\dev_ws\\install\\local_setup.ps1\n"
"$ echo $ENV:Path"
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:213
msgid ""
"Adding the relevant folders from the ``install/`` directory to your project "
"sources."
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:215
msgid ""
"Go to \"Settings...\" and under \"Project: \" > \"Project Structure\" click "
"\"Add content root\". Add all the relevant ``site-packages`` folders under "
"``install/Lib/*``."
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:218
msgid ""
"Finally, make sure your run/debug configuration has the option \"include "
"content roots in PYTHONPATH\" enabled."
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:222
msgid ""
"Using the `--merge-install <https://colcon.readthedocs.io/en/released/user/"
"isolated-vs-merged-workspaces.html>`__ option with your colcon build will "
"limit the number of depending directories, making it easier to configure "
"PyCharm."
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:226
msgid "Attach to Process"
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:228
msgid ""
"Even without any configuration to PyCharm, you can always just attach to a "
"running Python node. Open your project source and simply run your node as "
"usual:"
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:231
msgid "$ ros2 run my_node main"
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:235
msgid ""
"Then in PyCharm select \"Run\" > \"Attach to Process...\". It might take a "
"second, but a small window should show listing the currently running Python "
"instances, including your node. There can be multiple Python processes, so "
"there may be some trial-and-error to find the right one."
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:239
msgid ""
"After selecting an instance, the usual debugging tools are available. You "
"can pause it or create breakpoints in the code and step through it."
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:244
msgid ""
"The code in your project might not be the files being executed, see :ref:"
"`this<InstalledPythonCode>`."
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:248
msgid "Run/Debug"
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:250
msgid "Follow the steps for integration first."
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:252
msgid ""
"Running your Python file from PyCharm will likely result in import errors. "
"This is because PyCharm extends the ``PYTHONPATH`` environment variable, but "
"it leaves ``PATH`` untouched. Necessary library files in ``ros/bin`` are not "
"found."
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:256
msgid ""
"Edit the run/debug configuration for your file and under \"Environment "
"Variables:\" add a new variable. It is currently not supported to extend the "
"existing ``PATH``, so we need to override it. From a sourced ROS terminal, "
"export the content of ``PATH`` with: ``echo $Env:PATH``. Copy the result."
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:261
msgid ""
"Back in PyCharm, paste it as ``PATH``, apply changes and run or debug your "
"node. It should work like any Python project now, allowing easy additions of "
"breakpoints and other debug methods."
msgstr ""

#: ../../../source/How-To-Guides/ROS-2-IDEs.rst:266
msgid ""
"On Windows it seems the capitalization of the ``PATH`` variable under "
"\"Environment Variables:\" must be \"path\" (all lowercase) in order to work."
msgstr ""
