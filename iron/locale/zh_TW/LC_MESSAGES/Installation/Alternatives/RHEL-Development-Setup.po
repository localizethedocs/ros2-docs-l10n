# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation iron\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 06:55+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:8
msgid "RHEL (source)"
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:13
msgid "Table of Contents"
msgstr "目次表"

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:16
msgid "System requirements"
msgstr "系統要求"

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:17
msgid "The current target Red Hat platforms for Rolling Ridley are:"
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:19
msgid "Tier 2: RHEL 9 64-bit"
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:21
msgid "As defined in `REP 2000 <https://www.ros.org/reps/rep-2000.html>`_."
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:24
msgid "System setup"
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:27
msgid "Set locale"
msgstr ""

#: ../../../source/Installation/_RHEL-Set-Locale.rst:1
msgid ""
"Make sure you have a locale which supports ``UTF-8``. If you are in a "
"minimal environment (such as a docker container), the locale may be "
"something minimal like ``C``. We test with the following settings. However, "
"it should be fine if you're using a different UTF-8 supported locale."
msgstr ""

#: ../../../source/Installation/_RHEL-Set-Locale.rst:5
msgid ""
"locale  # check for UTF-8\n"
"\n"
"sudo dnf install langpacks-en glibc-langpack-en\n"
"export LANG=en_US.UTF-8\n"
"\n"
"locale  # verify settings"
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:32
msgid "Enable required repositories"
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:36
msgid "RHEL"
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:38
msgid ""
"The rosdep database contains packages from the EPEL and PowerTools "
"repositories, which are not enabled by default. They can be enabled by "
"running:"
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:41
msgid ""
"sudo dnf install 'dnf-command(config-manager)' epel-release -y\n"
"sudo dnf config-manager --set-enabled crb"
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:46
msgid ""
"This step may be slightly different depending on the distribution you are "
"using. Check the EPEL documentation: https://docs.fedoraproject.org/en-US/"
"epel/#_quickstart"
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:48
msgid "Fedora"
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:50
msgid "No additional setup required."
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:54
msgid "Install development tools"
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:56
msgid ""
"sudo dnf install -y \\\n"
"  cmake \\\n"
"  gcc-c++ \\\n"
"  git \\\n"
"  make \\\n"
"  patch \\\n"
"  python3-colcon-common-extensions \\\n"
"  python3-flake8-builtins \\\n"
"  python3-flake8-comprehensions \\\n"
"  python3-flake8-docstrings \\\n"
"  python3-flake8-import-order \\\n"
"  python3-flake8-quotes \\\n"
"  python3-mypy \\\n"
"  python3-pip \\\n"
"  python3-pydocstyle \\\n"
"  python3-pytest \\\n"
"  python3-pytest-repeat \\\n"
"  python3-pytest-rerunfailures \\\n"
"  python3-rosdep \\\n"
"  python3-setuptools \\\n"
"  python3-vcstool \\\n"
"  wget\n"
"\n"
"# install some pip packages needed for testing and\n"
"# not available as RPMs\n"
"python3 -m pip install -U --user \\\n"
"  flake8-blind-except==0.1.1 \\\n"
"  flake8-class-newline \\\n"
"  flake8-deprecated"
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:89
msgid "Build ROS 2"
msgstr "建置 ROS 2"

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:92
msgid "Get ROS 2 code"
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:94
msgid "Create a workspace and clone all repos:"
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:96
msgid ""
"mkdir -p ~/ros2_rolling/src\n"
"cd ~/ros2_rolling\n"
"vcs import --input https://raw.githubusercontent.com/ros2/ros2/rolling/ros2."
"repos src"
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:103
msgid "Install dependencies using rosdep"
msgstr ""

#: ../../../source/Installation/_Dnf-Update-Admonition.rst:1
msgid ""
"ROS 2 packages are built on frequently updated RHEL systems. It is always "
"recommended that you ensure your system is up to date before installing new "
"packages."
msgstr ""

#: ../../../source/Installation/_Dnf-Update-Admonition.rst:4
msgid "sudo dnf update"
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:107
msgid ""
"sudo rosdep init\n"
"rosdep update\n"
"rosdep install --from-paths src --ignore-src -y --skip-keys \"fastcdr "
"ignition-cmake2 ignition-math6 rti-connext-dds-6.0.1 urdfdom_headers\""
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:114
msgid "Install additional RMW implementations (optional)"
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:116
msgid ""
"The default middleware that ROS 2 uses is ``Fast DDS``, but the middleware "
"(RMW) can be replaced at build or runtime. See the :doc:`guide <../../How-To-"
"Guides/Working-with-multiple-RMW-implementations>` on how to work with "
"multiple RMWs."
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:120
msgid "Build the code in the workspace"
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:122
msgid ""
"If you have already installed ROS 2 another way (either via RPMs or the "
"binary distribution), make sure that you run the below commands in a fresh "
"environment that does not have those other installations sourced. Also "
"ensure that you do not have ``source /opt/ros/${ROS_DISTRO}/setup.bash`` in "
"your ``.bashrc``. You can make sure that ROS 2 is not sourced with the "
"command ``printenv | grep -i ROS``. The output should be empty."
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:127
msgid ""
"More info on working with a ROS workspace can be found in :doc:`this "
"tutorial <../../Tutorials/Beginner-Client-Libraries/Colcon-Tutorial>`."
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:129
msgid ""
"cd ~/ros2_rolling/\n"
"colcon build --symlink-install"
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:136
msgid ""
"If you are having trouble compiling all examples and this is preventing you "
"from completing a successful build, you can use the ``--packages-skip`` "
"colcon flag to ignore the package that is causing problems. For instance, if "
"you don't want to install the large OpenCV library, you could skip building "
"the packages that depend on it using the command:"
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:139
msgid ""
"colcon build --symlink-install --packages-skip image_tools intra_process_demo"
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:144
msgid "Setup environment"
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:146
msgid "Set up your environment by sourcing the following file."
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:148
msgid ""
"# Replace \".bash\" with your shell if you're not using bash\n"
"# Possible values are: setup.bash, setup.sh, setup.zsh\n"
". ~/ros2_rolling/install/local_setup.bash"
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:155
msgid "Try some examples"
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:157
msgid ""
"In one terminal, source the setup file and then run a C++ ``talker``\\ :"
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:159
msgid ""
". ~/ros2_rolling/install/local_setup.bash\n"
"ros2 run demo_nodes_cpp talker"
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:164
msgid ""
"In another terminal source the setup file and then run a Python "
"``listener``\\ :"
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:166
msgid ""
". ~/ros2_rolling/install/local_setup.bash\n"
"ros2 run demo_nodes_py listener"
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:171
msgid ""
"You should see the ``talker`` saying that it's ``Publishing`` messages and "
"the ``listener`` saying ``I heard`` those messages. This verifies both the C+"
"+ and Python APIs are working properly. Hooray!"
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:176
msgid "Next steps"
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:178
msgid ""
"Continue with the :doc:`tutorials and demos <../../Tutorials>` to configure "
"your environment, create your own workspace and packages, and learn ROS 2 "
"core concepts."
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:181
msgid "Alternate compilers"
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:183
msgid ""
"Using a different compiler besides gcc to compile ROS 2 is easy. If you set "
"the environment variables ``CC`` and ``CXX`` to executables for a working C "
"and C++ compiler, respectively, and retrigger CMake configuration (by using "
"``--force-cmake-config`` or by deleting the packages you want to be "
"affected), CMake will reconfigure and use the different compiler."
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:186
msgid "Clang"
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:188
msgid "To configure CMake to detect and use Clang:"
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:190
msgid ""
"sudo dnf install clang\n"
"export CC=clang\n"
"export CXX=clang++\n"
"colcon build --cmake-force-configure"
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:198
msgid "Stay up to date"
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:200
msgid ""
"See :doc:`../Maintaining-a-Source-Checkout` to periodically refresh your "
"source installation."
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:203
msgid "Troubleshoot"
msgstr "疑難排解"

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:205
msgid ""
"Troubleshooting techniques can be found :ref:`here <linux-troubleshooting>`."
msgstr "可以在\\ :ref:`這裡 <linux-troubleshooting>`\\ 找到疑難排解技術。"

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:208
msgid "Uninstall"
msgstr "解除安裝"

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:210
msgid ""
"If you installed your workspace with colcon as instructed above, "
"\"uninstalling\" could be just a matter of opening a new terminal and not "
"sourcing the workspace's ``setup`` file. This way, your environment will "
"behave as though there is no Rolling install on your system."
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:213
msgid ""
"If you're also trying to free up space, you can delete the entire workspace "
"directory with:"
msgstr ""

#: ../../../source/Installation/Alternatives/RHEL-Development-Setup.rst:215
msgid "rm -rf ~/ros2_rolling"
msgstr ""
